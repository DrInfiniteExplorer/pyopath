Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> path
Rule 1     path -> Expr
Rule 2     Expr -> ExprList
Rule 3     ExprList -> ExprSingle
Rule 4     ExprList -> ExprList , ExprSingle
Rule 5     ExprSingle -> OrExpr
Rule 6     OrExpr -> AndExpr OR AndExpr
Rule 7     OrExpr -> AndExpr
Rule 8     AndExpr -> ComparisonExpr AND ComparisonExpr
Rule 9     AndExpr -> ComparisonExpr
Rule 10    ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr
Rule 11    ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr
Rule 12    ComparisonExpr -> AdditiveExpr
Rule 13    ValueComp -> EQstr
Rule 14    ValueComp -> NEstr
Rule 15    ValueComp -> LTstr
Rule 16    ValueComp -> LEstr
Rule 17    ValueComp -> GTstr
Rule 18    ValueComp -> GEstr
Rule 19    ValueComp -> EQsym
Rule 20    ValueComp -> NEsym
Rule 21    ValueComp -> LTsym
Rule 22    ValueComp -> LEsym
Rule 23    ValueComp -> GTsym
Rule 24    ValueComp -> GEsym
Rule 25    NodeComp -> IS
Rule 26    AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr
Rule 27    AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr
Rule 28    AdditiveExpr -> MultiplicativeExpr
Rule 29    MultiplicativeExpr -> UnionExpr * UnionExpr
Rule 30    MultiplicativeExpr -> UnionExpr DIV UnionExpr
Rule 31    MultiplicativeExpr -> UnionExpr IDIV UnionExpr
Rule 32    MultiplicativeExpr -> UnionExpr MOD UnionExpr
Rule 33    MultiplicativeExpr -> UnionExpr
Rule 34    UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr
Rule 35    UnionExpr -> IntersectExceptExpr | IntersectExceptExpr
Rule 36    UnionExpr -> IntersectExceptExpr
Rule 37    IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr
Rule 38    IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr
Rule 39    IntersectExceptExpr -> UnaryExpr
Rule 40    UnaryExpr -> + ValueExpr
Rule 41    UnaryExpr -> - ValueExpr
Rule 42    UnaryExpr -> ValueExpr
Rule 43    ValueExpr -> SLASH RelativePathExpr
Rule 44    ValueExpr -> SLASH
Rule 45    ValueExpr -> DOUBLESLASH RelativePathExpr
Rule 46    ValueExpr -> RelativePathExpr
Rule 47    RelativePathExpr -> RelativePathList
Rule 48    RelativePathList -> StepExpr
Rule 49    RelativePathList -> RelativePathList SLASH StepExpr
Rule 50    RelativePathList -> RelativePathList DOUBLESLASH StepExpr
Rule 51    StepExpr -> PostfixExpr
Rule 52    StepExpr -> AxisStep
Rule 53    PostfixExpr -> PrimaryExpr Predicate
Rule 54    PostfixExpr -> PrimaryExpr
Rule 55    AxisStep -> ReverseStep PredicateList
Rule 56    AxisStep -> ForwardStep PredicateList
Rule 57    PredicateList -> Predicate
Rule 58    PredicateList -> PredicateList Predicate
Rule 59    PredicateList -> <empty>
Rule 60    Predicate -> [ Expr ]
Rule 61    ReverseStep -> ReverseAxis NodeTest
Rule 62    ReverseStep -> AbbrevReverseStep
Rule 63    ReverseAxis -> PARENT AXIS
Rule 64    ReverseAxis -> ANCESTOR AXIS
Rule 65    ReverseAxis -> PRECEDING_SIBLING AXIS
Rule 66    ReverseAxis -> PRECEDING AXIS
Rule 67    ReverseAxis -> ANCESTOR_OR_SELF AXIS
Rule 68    AbbrevReverseStep -> DOUBLEDOT
Rule 69    ForwardStep -> ForwardAxis NodeTest
Rule 70    ForwardStep -> AbbrevForwardStep
Rule 71    ForwardAxis -> CHILD AXIS
Rule 72    ForwardAxis -> DESCENDANT AXIS
Rule 73    ForwardAxis -> ATTRIBUTE AXIS
Rule 74    ForwardAxis -> SELF AXIS
Rule 75    ForwardAxis -> DESCENDANT_OR_SELF AXIS
Rule 76    ForwardAxis -> FOLLOWING_SIBLING AXIS
Rule 77    ForwardAxis -> FOLLOWING AXIS
Rule 78    ForwardAxis -> NAMESPACE AXIS
Rule 79    AbbrevForwardStep -> @ NodeTest
Rule 80    AbbrevForwardStep -> NodeTest
Rule 81    NodeTest -> KindTest
Rule 82    NodeTest -> NameTest
Rule 83    KindTest -> ElementTest
Rule 84    KindTest -> AttributeTest
Rule 85    KindTest -> AnyKindTest
Rule 86    ElementTest -> ELEMENT ( ElementNameOrWildcard )
Rule 87    ElementTest -> ELEMENT ( )
Rule 88    ElementNameOrWildcard -> ElementName
Rule 89    ElementNameOrWildcard -> *
Rule 90    ElementName -> EQNAME
Rule 91    AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard )
Rule 92    AttributeTest -> ATTRIBUTE ( )
Rule 93    AttributeNameOrWildcard -> AttributeName
Rule 94    AttributeNameOrWildcard -> *
Rule 95    AttributeName -> EQNAME
Rule 96    AnyKindTest -> NODE ( )
Rule 97    NameTest -> EQNAME
Rule 98    NameTest -> *
Rule 99    PrimaryExpr -> Literal
Rule 100   PrimaryExpr -> VarRef
Rule 101   PrimaryExpr -> ParenthesizedExpr
Rule 102   PrimaryExpr -> CONTEXT
Rule 103   PrimaryExpr -> FunctionCall
Rule 104   Literal -> STRING
Rule 105   Literal -> NUMBER
Rule 106   VarRef -> $ VarName
Rule 107   VarName -> EQNAME
Rule 108   ParenthesizedExpr -> ( )
Rule 109   ParenthesizedExpr -> ( Expr )
Rule 110   FunctionCall -> EQNAME ArgumentList
Rule 111   ArgumentList -> ( )
Rule 112   ArgumentList -> ( ArgumentExpr )
Rule 113   ArgumentExpr -> Argument , Argument
Rule 114   ArgumentExpr -> Argument
Rule 115   Argument -> Expr

Terminals, with rules where they appear

$                    : 106
(                    : 86 87 91 92 96 108 109 111 112
)                    : 86 87 91 92 96 108 109 111 112
*                    : 29 89 94 98
+                    : 26 40
,                    : 4 113
-                    : 27 41
@                    : 79
ANCESTOR             : 64
ANCESTOR_OR_SELF     : 67
AND                  : 8
ATTRIBUTE            : 73 91 92
AXIS                 : 63 64 65 66 67 71 72 73 74 75 76 77 78
CHILD                : 71
CONTEXT              : 102
DESCENDANT           : 72
DESCENDANT_OR_SELF   : 75
DIV                  : 30
DOUBLEDOT            : 68
DOUBLESLASH          : 45 50
ELEMENT              : 86 87
EQNAME               : 90 95 97 107 110
EQstr                : 13
EQsym                : 19
EXCEPT               : 38
FOLLOWING            : 77
FOLLOWING_SIBLING    : 76
GEstr                : 18
GEsym                : 24
GTstr                : 17
GTsym                : 23
IDIV                 : 31
INTERSECT            : 37
IS                   : 25
LEstr                : 16
LEsym                : 22
LTstr                : 15
LTsym                : 21
MOD                  : 32
NAMESPACE            : 78
NEstr                : 14
NEsym                : 20
NODE                 : 96
NUMBER               : 105
OR                   : 6
PARENT               : 63
PRECEDING            : 66
PRECEDING_SIBLING    : 65
SELF                 : 74
SLASH                : 43 44 49
STRING               : 104
UNION                : 34
[                    : 60
]                    : 60
error                : 
|                    : 35

Nonterminals, with rules where they appear

AbbrevForwardStep    : 70
AbbrevReverseStep    : 62
AdditiveExpr         : 10 10 11 11 12
AndExpr              : 6 6 7
AnyKindTest          : 85
Argument             : 113 113 114
ArgumentExpr         : 112
ArgumentList         : 110
AttributeName        : 93
AttributeNameOrWildcard : 91
AttributeTest        : 84
AxisStep             : 52
ComparisonExpr       : 8 8 9
ElementName          : 88
ElementNameOrWildcard : 86
ElementTest          : 83
Expr                 : 1 60 109 115
ExprList             : 2 4
ExprSingle           : 3 4
ForwardAxis          : 69
ForwardStep          : 56
FunctionCall         : 103
IntersectExceptExpr  : 34 34 35 35 36
KindTest             : 81
Literal              : 99
MultiplicativeExpr   : 26 26 27 27 28
NameTest             : 82
NodeComp             : 11
NodeTest             : 61 69 79 80
OrExpr               : 5
ParenthesizedExpr    : 101
PostfixExpr          : 51
Predicate            : 53 57 58
PredicateList        : 55 56 58
PrimaryExpr          : 53 54
RelativePathExpr     : 43 45 46
RelativePathList     : 47 49 50
ReverseAxis          : 61
ReverseStep          : 55
StepExpr             : 48 49 50
UnaryExpr            : 37 37 38 38 39
UnionExpr            : 29 29 30 30 31 31 32 32 33
ValueComp            : 10
ValueExpr            : 40 41 42
VarName              : 106
VarRef               : 100
path                 : 0

Parsing method: LALR

state 0

    (0) S' -> . path
    (1) path -> . Expr
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    path                           shift and go to state 1
    Expr                           shift and go to state 2
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 1

    (0) S' -> path .



state 2

    (1) path -> Expr .

    $end            reduce using rule 1 (path -> Expr .)


state 3

    (2) Expr -> ExprList .
    (4) ExprList -> ExprList . , ExprSingle

  ! shift/reduce conflict for , resolved as shift
    $end            reduce using rule 2 (Expr -> ExprList .)
    )               reduce using rule 2 (Expr -> ExprList .)
    ]               reduce using rule 2 (Expr -> ExprList .)
    ,               shift and go to state 64

  ! ,               [ reduce using rule 2 (Expr -> ExprList .) ]


state 4

    (3) ExprList -> ExprSingle .

    ,               reduce using rule 3 (ExprList -> ExprSingle .)
    $end            reduce using rule 3 (ExprList -> ExprSingle .)
    )               reduce using rule 3 (ExprList -> ExprSingle .)
    ]               reduce using rule 3 (ExprList -> ExprSingle .)


state 5

    (5) ExprSingle -> OrExpr .

    ,               reduce using rule 5 (ExprSingle -> OrExpr .)
    $end            reduce using rule 5 (ExprSingle -> OrExpr .)
    )               reduce using rule 5 (ExprSingle -> OrExpr .)
    ]               reduce using rule 5 (ExprSingle -> OrExpr .)


state 6

    (6) OrExpr -> AndExpr . OR AndExpr
    (7) OrExpr -> AndExpr .

    OR              shift and go to state 65
    ,               reduce using rule 7 (OrExpr -> AndExpr .)
    $end            reduce using rule 7 (OrExpr -> AndExpr .)
    )               reduce using rule 7 (OrExpr -> AndExpr .)
    ]               reduce using rule 7 (OrExpr -> AndExpr .)


state 7

    (8) AndExpr -> ComparisonExpr . AND ComparisonExpr
    (9) AndExpr -> ComparisonExpr .

    AND             shift and go to state 66
    OR              reduce using rule 9 (AndExpr -> ComparisonExpr .)
    ,               reduce using rule 9 (AndExpr -> ComparisonExpr .)
    $end            reduce using rule 9 (AndExpr -> ComparisonExpr .)
    )               reduce using rule 9 (AndExpr -> ComparisonExpr .)
    ]               reduce using rule 9 (AndExpr -> ComparisonExpr .)


state 8

    (10) ComparisonExpr -> AdditiveExpr . ValueComp AdditiveExpr
    (11) ComparisonExpr -> AdditiveExpr . NodeComp AdditiveExpr
    (12) ComparisonExpr -> AdditiveExpr .
    (13) ValueComp -> . EQstr
    (14) ValueComp -> . NEstr
    (15) ValueComp -> . LTstr
    (16) ValueComp -> . LEstr
    (17) ValueComp -> . GTstr
    (18) ValueComp -> . GEstr
    (19) ValueComp -> . EQsym
    (20) ValueComp -> . NEsym
    (21) ValueComp -> . LTsym
    (22) ValueComp -> . LEsym
    (23) ValueComp -> . GTsym
    (24) ValueComp -> . GEsym
    (25) NodeComp -> . IS

    AND             reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    OR              reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    ,               reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    $end            reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    )               reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    ]               reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    EQstr           shift and go to state 69
    NEstr           shift and go to state 70
    LTstr           shift and go to state 71
    LEstr           shift and go to state 72
    GTstr           shift and go to state 73
    GEstr           shift and go to state 74
    EQsym           shift and go to state 75
    NEsym           shift and go to state 76
    LTsym           shift and go to state 77
    LEsym           shift and go to state 78
    GTsym           shift and go to state 79
    GEsym           shift and go to state 80
    IS              shift and go to state 81

    ValueComp                      shift and go to state 67
    NodeComp                       shift and go to state 68

state 9

    (26) AdditiveExpr -> MultiplicativeExpr . + MultiplicativeExpr
    (27) AdditiveExpr -> MultiplicativeExpr . - MultiplicativeExpr
    (28) AdditiveExpr -> MultiplicativeExpr .

    +               shift and go to state 82
    -               shift and go to state 83
    EQstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    NEstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    LTstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    LEstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    GTstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    GEstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    EQsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    NEsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    LTsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    LEsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    GTsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    GEsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    IS              reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    AND             reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    OR              reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    ,               reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    $end            reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    )               reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    ]               reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)


state 10

    (40) UnaryExpr -> + . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    ValueExpr                      shift and go to state 84
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 11

    (41) UnaryExpr -> - . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    ValueExpr                      shift and go to state 85
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 12

    (29) MultiplicativeExpr -> UnionExpr . * UnionExpr
    (30) MultiplicativeExpr -> UnionExpr . DIV UnionExpr
    (31) MultiplicativeExpr -> UnionExpr . IDIV UnionExpr
    (32) MultiplicativeExpr -> UnionExpr . MOD UnionExpr
    (33) MultiplicativeExpr -> UnionExpr .

    *               shift and go to state 86
    DIV             shift and go to state 87
    IDIV            shift and go to state 88
    MOD             shift and go to state 89
    +               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    -               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    EQstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    NEstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    LTstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    LEstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    GTstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    GEstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    EQsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    NEsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    LTsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    LEsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    GTsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    GEsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    IS              reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    AND             reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    OR              reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    ,               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    $end            reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    )               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    ]               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)


state 13

    (98) NameTest -> * .

    [               reduce using rule 98 (NameTest -> * .)
    SLASH           reduce using rule 98 (NameTest -> * .)
    DOUBLESLASH     reduce using rule 98 (NameTest -> * .)
    INTERSECT       reduce using rule 98 (NameTest -> * .)
    EXCEPT          reduce using rule 98 (NameTest -> * .)
    UNION           reduce using rule 98 (NameTest -> * .)
    |               reduce using rule 98 (NameTest -> * .)
    *               reduce using rule 98 (NameTest -> * .)
    DIV             reduce using rule 98 (NameTest -> * .)
    IDIV            reduce using rule 98 (NameTest -> * .)
    MOD             reduce using rule 98 (NameTest -> * .)
    +               reduce using rule 98 (NameTest -> * .)
    -               reduce using rule 98 (NameTest -> * .)
    EQstr           reduce using rule 98 (NameTest -> * .)
    NEstr           reduce using rule 98 (NameTest -> * .)
    LTstr           reduce using rule 98 (NameTest -> * .)
    LEstr           reduce using rule 98 (NameTest -> * .)
    GTstr           reduce using rule 98 (NameTest -> * .)
    GEstr           reduce using rule 98 (NameTest -> * .)
    EQsym           reduce using rule 98 (NameTest -> * .)
    NEsym           reduce using rule 98 (NameTest -> * .)
    LTsym           reduce using rule 98 (NameTest -> * .)
    LEsym           reduce using rule 98 (NameTest -> * .)
    GTsym           reduce using rule 98 (NameTest -> * .)
    GEsym           reduce using rule 98 (NameTest -> * .)
    IS              reduce using rule 98 (NameTest -> * .)
    AND             reduce using rule 98 (NameTest -> * .)
    OR              reduce using rule 98 (NameTest -> * .)
    ,               reduce using rule 98 (NameTest -> * .)
    $end            reduce using rule 98 (NameTest -> * .)
    )               reduce using rule 98 (NameTest -> * .)
    ]               reduce using rule 98 (NameTest -> * .)


state 14

    (34) UnionExpr -> IntersectExceptExpr . UNION IntersectExceptExpr
    (35) UnionExpr -> IntersectExceptExpr . | IntersectExceptExpr
    (36) UnionExpr -> IntersectExceptExpr .

    UNION           shift and go to state 90
    |               shift and go to state 91
    *               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    DIV             reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    IDIV            reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    MOD             reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    +               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    -               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    EQstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    NEstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    LTstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    LEstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    GTstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    GEstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    EQsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    NEsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    LTsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    LEsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    GTsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    GEsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    IS              reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    AND             reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    OR              reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    ,               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    $end            reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    )               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    ]               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)


state 15

    (37) IntersectExceptExpr -> UnaryExpr . INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> UnaryExpr . EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> UnaryExpr .

    INTERSECT       shift and go to state 92
    EXCEPT          shift and go to state 93
    UNION           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    |               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    *               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    DIV             reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    IDIV            reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    MOD             reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    +               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    -               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    EQstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    NEstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    LTstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    LEstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    GTstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    GEstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    EQsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    NEsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    LTsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    LEsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    GTsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    GEsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    IS              reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    AND             reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    OR              reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    ,               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    $end            reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    )               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    ]               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)


state 16

    (42) UnaryExpr -> ValueExpr .

    INTERSECT       reduce using rule 42 (UnaryExpr -> ValueExpr .)
    EXCEPT          reduce using rule 42 (UnaryExpr -> ValueExpr .)
    UNION           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    |               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    *               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    DIV             reduce using rule 42 (UnaryExpr -> ValueExpr .)
    IDIV            reduce using rule 42 (UnaryExpr -> ValueExpr .)
    MOD             reduce using rule 42 (UnaryExpr -> ValueExpr .)
    +               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    -               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    EQstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    NEstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    LTstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    LEstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    GTstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    GEstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    EQsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    NEsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    LTsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    LEsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    GTsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    GEsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    IS              reduce using rule 42 (UnaryExpr -> ValueExpr .)
    AND             reduce using rule 42 (UnaryExpr -> ValueExpr .)
    OR              reduce using rule 42 (UnaryExpr -> ValueExpr .)
    ,               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    $end            reduce using rule 42 (UnaryExpr -> ValueExpr .)
    )               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    ]               reduce using rule 42 (UnaryExpr -> ValueExpr .)


state 17

    (43) ValueExpr -> SLASH . RelativePathExpr
    (44) ValueExpr -> SLASH .
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    INTERSECT       reduce using rule 44 (ValueExpr -> SLASH .)
    EXCEPT          reduce using rule 44 (ValueExpr -> SLASH .)
    UNION           reduce using rule 44 (ValueExpr -> SLASH .)
    |               reduce using rule 44 (ValueExpr -> SLASH .)
    *               reduce using rule 44 (ValueExpr -> SLASH .)
    DIV             reduce using rule 44 (ValueExpr -> SLASH .)
    IDIV            reduce using rule 44 (ValueExpr -> SLASH .)
    MOD             reduce using rule 44 (ValueExpr -> SLASH .)
    +               reduce using rule 44 (ValueExpr -> SLASH .)
    -               reduce using rule 44 (ValueExpr -> SLASH .)
    EQstr           reduce using rule 44 (ValueExpr -> SLASH .)
    NEstr           reduce using rule 44 (ValueExpr -> SLASH .)
    LTstr           reduce using rule 44 (ValueExpr -> SLASH .)
    LEstr           reduce using rule 44 (ValueExpr -> SLASH .)
    GTstr           reduce using rule 44 (ValueExpr -> SLASH .)
    GEstr           reduce using rule 44 (ValueExpr -> SLASH .)
    EQsym           reduce using rule 44 (ValueExpr -> SLASH .)
    NEsym           reduce using rule 44 (ValueExpr -> SLASH .)
    LTsym           reduce using rule 44 (ValueExpr -> SLASH .)
    LEsym           reduce using rule 44 (ValueExpr -> SLASH .)
    GTsym           reduce using rule 44 (ValueExpr -> SLASH .)
    GEsym           reduce using rule 44 (ValueExpr -> SLASH .)
    IS              reduce using rule 44 (ValueExpr -> SLASH .)
    AND             reduce using rule 44 (ValueExpr -> SLASH .)
    OR              reduce using rule 44 (ValueExpr -> SLASH .)
    ,               reduce using rule 44 (ValueExpr -> SLASH .)
    $end            reduce using rule 44 (ValueExpr -> SLASH .)
    )               reduce using rule 44 (ValueExpr -> SLASH .)
    ]               reduce using rule 44 (ValueExpr -> SLASH .)
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

  ! *               [ shift and go to state 13 ]

    RelativePathExpr               shift and go to state 94
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 18

    (46) ValueExpr -> RelativePathExpr .

    INTERSECT       reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    EXCEPT          reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    UNION           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    |               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    *               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    DIV             reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    IDIV            reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    MOD             reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    +               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    -               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    EQstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    NEstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    LTstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    LEstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    GTstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    GEstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    EQsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    NEsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    LTsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    LEsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    GTsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    GEsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    IS              reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    AND             reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    OR              reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    ,               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    $end            reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    )               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    ]               reduce using rule 46 (ValueExpr -> RelativePathExpr .)


state 19

    (45) ValueExpr -> DOUBLESLASH . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    RelativePathExpr               shift and go to state 95
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 20

    (47) RelativePathExpr -> RelativePathList .
    (49) RelativePathList -> RelativePathList . SLASH StepExpr
    (50) RelativePathList -> RelativePathList . DOUBLESLASH StepExpr

    INTERSECT       reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    EXCEPT          reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    UNION           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    |               reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    *               reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    DIV             reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    IDIV            reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    MOD             reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    +               reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    -               reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    EQstr           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    NEstr           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    LTstr           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    LEstr           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    GTstr           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    GEstr           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    EQsym           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    NEsym           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    LTsym           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    LEsym           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    GTsym           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    GEsym           reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    IS              reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    AND             reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    OR              reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    ,               reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    $end            reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    )               reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    ]               reduce using rule 47 (RelativePathExpr -> RelativePathList .)
    SLASH           shift and go to state 96
    DOUBLESLASH     shift and go to state 97


state 21

    (48) RelativePathList -> StepExpr .

    SLASH           reduce using rule 48 (RelativePathList -> StepExpr .)
    DOUBLESLASH     reduce using rule 48 (RelativePathList -> StepExpr .)
    INTERSECT       reduce using rule 48 (RelativePathList -> StepExpr .)
    EXCEPT          reduce using rule 48 (RelativePathList -> StepExpr .)
    UNION           reduce using rule 48 (RelativePathList -> StepExpr .)
    |               reduce using rule 48 (RelativePathList -> StepExpr .)
    *               reduce using rule 48 (RelativePathList -> StepExpr .)
    DIV             reduce using rule 48 (RelativePathList -> StepExpr .)
    IDIV            reduce using rule 48 (RelativePathList -> StepExpr .)
    MOD             reduce using rule 48 (RelativePathList -> StepExpr .)
    +               reduce using rule 48 (RelativePathList -> StepExpr .)
    -               reduce using rule 48 (RelativePathList -> StepExpr .)
    EQstr           reduce using rule 48 (RelativePathList -> StepExpr .)
    NEstr           reduce using rule 48 (RelativePathList -> StepExpr .)
    LTstr           reduce using rule 48 (RelativePathList -> StepExpr .)
    LEstr           reduce using rule 48 (RelativePathList -> StepExpr .)
    GTstr           reduce using rule 48 (RelativePathList -> StepExpr .)
    GEstr           reduce using rule 48 (RelativePathList -> StepExpr .)
    EQsym           reduce using rule 48 (RelativePathList -> StepExpr .)
    NEsym           reduce using rule 48 (RelativePathList -> StepExpr .)
    LTsym           reduce using rule 48 (RelativePathList -> StepExpr .)
    LEsym           reduce using rule 48 (RelativePathList -> StepExpr .)
    GTsym           reduce using rule 48 (RelativePathList -> StepExpr .)
    GEsym           reduce using rule 48 (RelativePathList -> StepExpr .)
    IS              reduce using rule 48 (RelativePathList -> StepExpr .)
    AND             reduce using rule 48 (RelativePathList -> StepExpr .)
    OR              reduce using rule 48 (RelativePathList -> StepExpr .)
    ,               reduce using rule 48 (RelativePathList -> StepExpr .)
    $end            reduce using rule 48 (RelativePathList -> StepExpr .)
    )               reduce using rule 48 (RelativePathList -> StepExpr .)
    ]               reduce using rule 48 (RelativePathList -> StepExpr .)


state 22

    (51) StepExpr -> PostfixExpr .

    SLASH           reduce using rule 51 (StepExpr -> PostfixExpr .)
    DOUBLESLASH     reduce using rule 51 (StepExpr -> PostfixExpr .)
    INTERSECT       reduce using rule 51 (StepExpr -> PostfixExpr .)
    EXCEPT          reduce using rule 51 (StepExpr -> PostfixExpr .)
    UNION           reduce using rule 51 (StepExpr -> PostfixExpr .)
    |               reduce using rule 51 (StepExpr -> PostfixExpr .)
    *               reduce using rule 51 (StepExpr -> PostfixExpr .)
    DIV             reduce using rule 51 (StepExpr -> PostfixExpr .)
    IDIV            reduce using rule 51 (StepExpr -> PostfixExpr .)
    MOD             reduce using rule 51 (StepExpr -> PostfixExpr .)
    +               reduce using rule 51 (StepExpr -> PostfixExpr .)
    -               reduce using rule 51 (StepExpr -> PostfixExpr .)
    EQstr           reduce using rule 51 (StepExpr -> PostfixExpr .)
    NEstr           reduce using rule 51 (StepExpr -> PostfixExpr .)
    LTstr           reduce using rule 51 (StepExpr -> PostfixExpr .)
    LEstr           reduce using rule 51 (StepExpr -> PostfixExpr .)
    GTstr           reduce using rule 51 (StepExpr -> PostfixExpr .)
    GEstr           reduce using rule 51 (StepExpr -> PostfixExpr .)
    EQsym           reduce using rule 51 (StepExpr -> PostfixExpr .)
    NEsym           reduce using rule 51 (StepExpr -> PostfixExpr .)
    LTsym           reduce using rule 51 (StepExpr -> PostfixExpr .)
    LEsym           reduce using rule 51 (StepExpr -> PostfixExpr .)
    GTsym           reduce using rule 51 (StepExpr -> PostfixExpr .)
    GEsym           reduce using rule 51 (StepExpr -> PostfixExpr .)
    IS              reduce using rule 51 (StepExpr -> PostfixExpr .)
    AND             reduce using rule 51 (StepExpr -> PostfixExpr .)
    OR              reduce using rule 51 (StepExpr -> PostfixExpr .)
    ,               reduce using rule 51 (StepExpr -> PostfixExpr .)
    $end            reduce using rule 51 (StepExpr -> PostfixExpr .)
    )               reduce using rule 51 (StepExpr -> PostfixExpr .)
    ]               reduce using rule 51 (StepExpr -> PostfixExpr .)


state 23

    (52) StepExpr -> AxisStep .

    SLASH           reduce using rule 52 (StepExpr -> AxisStep .)
    DOUBLESLASH     reduce using rule 52 (StepExpr -> AxisStep .)
    INTERSECT       reduce using rule 52 (StepExpr -> AxisStep .)
    EXCEPT          reduce using rule 52 (StepExpr -> AxisStep .)
    UNION           reduce using rule 52 (StepExpr -> AxisStep .)
    |               reduce using rule 52 (StepExpr -> AxisStep .)
    *               reduce using rule 52 (StepExpr -> AxisStep .)
    DIV             reduce using rule 52 (StepExpr -> AxisStep .)
    IDIV            reduce using rule 52 (StepExpr -> AxisStep .)
    MOD             reduce using rule 52 (StepExpr -> AxisStep .)
    +               reduce using rule 52 (StepExpr -> AxisStep .)
    -               reduce using rule 52 (StepExpr -> AxisStep .)
    EQstr           reduce using rule 52 (StepExpr -> AxisStep .)
    NEstr           reduce using rule 52 (StepExpr -> AxisStep .)
    LTstr           reduce using rule 52 (StepExpr -> AxisStep .)
    LEstr           reduce using rule 52 (StepExpr -> AxisStep .)
    GTstr           reduce using rule 52 (StepExpr -> AxisStep .)
    GEstr           reduce using rule 52 (StepExpr -> AxisStep .)
    EQsym           reduce using rule 52 (StepExpr -> AxisStep .)
    NEsym           reduce using rule 52 (StepExpr -> AxisStep .)
    LTsym           reduce using rule 52 (StepExpr -> AxisStep .)
    LEsym           reduce using rule 52 (StepExpr -> AxisStep .)
    GTsym           reduce using rule 52 (StepExpr -> AxisStep .)
    GEsym           reduce using rule 52 (StepExpr -> AxisStep .)
    IS              reduce using rule 52 (StepExpr -> AxisStep .)
    AND             reduce using rule 52 (StepExpr -> AxisStep .)
    OR              reduce using rule 52 (StepExpr -> AxisStep .)
    ,               reduce using rule 52 (StepExpr -> AxisStep .)
    $end            reduce using rule 52 (StepExpr -> AxisStep .)
    )               reduce using rule 52 (StepExpr -> AxisStep .)
    ]               reduce using rule 52 (StepExpr -> AxisStep .)


state 24

    (53) PostfixExpr -> PrimaryExpr . Predicate
    (54) PostfixExpr -> PrimaryExpr .
    (60) Predicate -> . [ Expr ]

    SLASH           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    DOUBLESLASH     reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    INTERSECT       reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    EXCEPT          reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    UNION           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    |               reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    *               reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    DIV             reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    IDIV            reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    MOD             reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    +               reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    -               reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    EQstr           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    NEstr           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    LTstr           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    LEstr           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    GTstr           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    GEstr           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    EQsym           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    NEsym           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    LTsym           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    LEsym           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    GTsym           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    GEsym           reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    IS              reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    AND             reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    OR              reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    ,               reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    $end            reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    )               reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    ]               reduce using rule 54 (PostfixExpr -> PrimaryExpr .)
    [               shift and go to state 99

    Predicate                      shift and go to state 98

state 25

    (55) AxisStep -> ReverseStep . PredicateList
    (57) PredicateList -> . Predicate
    (58) PredicateList -> . PredicateList Predicate
    (59) PredicateList -> .
    (60) Predicate -> . [ Expr ]

  ! shift/reduce conflict for [ resolved as shift
    SLASH           reduce using rule 59 (PredicateList -> .)
    DOUBLESLASH     reduce using rule 59 (PredicateList -> .)
    INTERSECT       reduce using rule 59 (PredicateList -> .)
    EXCEPT          reduce using rule 59 (PredicateList -> .)
    UNION           reduce using rule 59 (PredicateList -> .)
    |               reduce using rule 59 (PredicateList -> .)
    *               reduce using rule 59 (PredicateList -> .)
    DIV             reduce using rule 59 (PredicateList -> .)
    IDIV            reduce using rule 59 (PredicateList -> .)
    MOD             reduce using rule 59 (PredicateList -> .)
    +               reduce using rule 59 (PredicateList -> .)
    -               reduce using rule 59 (PredicateList -> .)
    EQstr           reduce using rule 59 (PredicateList -> .)
    NEstr           reduce using rule 59 (PredicateList -> .)
    LTstr           reduce using rule 59 (PredicateList -> .)
    LEstr           reduce using rule 59 (PredicateList -> .)
    GTstr           reduce using rule 59 (PredicateList -> .)
    GEstr           reduce using rule 59 (PredicateList -> .)
    EQsym           reduce using rule 59 (PredicateList -> .)
    NEsym           reduce using rule 59 (PredicateList -> .)
    LTsym           reduce using rule 59 (PredicateList -> .)
    LEsym           reduce using rule 59 (PredicateList -> .)
    GTsym           reduce using rule 59 (PredicateList -> .)
    GEsym           reduce using rule 59 (PredicateList -> .)
    IS              reduce using rule 59 (PredicateList -> .)
    AND             reduce using rule 59 (PredicateList -> .)
    OR              reduce using rule 59 (PredicateList -> .)
    ,               reduce using rule 59 (PredicateList -> .)
    $end            reduce using rule 59 (PredicateList -> .)
    )               reduce using rule 59 (PredicateList -> .)
    ]               reduce using rule 59 (PredicateList -> .)
    [               shift and go to state 99

  ! [               [ reduce using rule 59 (PredicateList -> .) ]

    PredicateList                  shift and go to state 100
    Predicate                      shift and go to state 101

state 26

    (56) AxisStep -> ForwardStep . PredicateList
    (57) PredicateList -> . Predicate
    (58) PredicateList -> . PredicateList Predicate
    (59) PredicateList -> .
    (60) Predicate -> . [ Expr ]

  ! shift/reduce conflict for [ resolved as shift
    SLASH           reduce using rule 59 (PredicateList -> .)
    DOUBLESLASH     reduce using rule 59 (PredicateList -> .)
    INTERSECT       reduce using rule 59 (PredicateList -> .)
    EXCEPT          reduce using rule 59 (PredicateList -> .)
    UNION           reduce using rule 59 (PredicateList -> .)
    |               reduce using rule 59 (PredicateList -> .)
    *               reduce using rule 59 (PredicateList -> .)
    DIV             reduce using rule 59 (PredicateList -> .)
    IDIV            reduce using rule 59 (PredicateList -> .)
    MOD             reduce using rule 59 (PredicateList -> .)
    +               reduce using rule 59 (PredicateList -> .)
    -               reduce using rule 59 (PredicateList -> .)
    EQstr           reduce using rule 59 (PredicateList -> .)
    NEstr           reduce using rule 59 (PredicateList -> .)
    LTstr           reduce using rule 59 (PredicateList -> .)
    LEstr           reduce using rule 59 (PredicateList -> .)
    GTstr           reduce using rule 59 (PredicateList -> .)
    GEstr           reduce using rule 59 (PredicateList -> .)
    EQsym           reduce using rule 59 (PredicateList -> .)
    NEsym           reduce using rule 59 (PredicateList -> .)
    LTsym           reduce using rule 59 (PredicateList -> .)
    LEsym           reduce using rule 59 (PredicateList -> .)
    GTsym           reduce using rule 59 (PredicateList -> .)
    GEsym           reduce using rule 59 (PredicateList -> .)
    IS              reduce using rule 59 (PredicateList -> .)
    AND             reduce using rule 59 (PredicateList -> .)
    OR              reduce using rule 59 (PredicateList -> .)
    ,               reduce using rule 59 (PredicateList -> .)
    $end            reduce using rule 59 (PredicateList -> .)
    )               reduce using rule 59 (PredicateList -> .)
    ]               reduce using rule 59 (PredicateList -> .)
    [               shift and go to state 99

  ! [               [ reduce using rule 59 (PredicateList -> .) ]

    PredicateList                  shift and go to state 102
    Predicate                      shift and go to state 101

state 27

    (99) PrimaryExpr -> Literal .

    [               reduce using rule 99 (PrimaryExpr -> Literal .)
    SLASH           reduce using rule 99 (PrimaryExpr -> Literal .)
    DOUBLESLASH     reduce using rule 99 (PrimaryExpr -> Literal .)
    INTERSECT       reduce using rule 99 (PrimaryExpr -> Literal .)
    EXCEPT          reduce using rule 99 (PrimaryExpr -> Literal .)
    UNION           reduce using rule 99 (PrimaryExpr -> Literal .)
    |               reduce using rule 99 (PrimaryExpr -> Literal .)
    *               reduce using rule 99 (PrimaryExpr -> Literal .)
    DIV             reduce using rule 99 (PrimaryExpr -> Literal .)
    IDIV            reduce using rule 99 (PrimaryExpr -> Literal .)
    MOD             reduce using rule 99 (PrimaryExpr -> Literal .)
    +               reduce using rule 99 (PrimaryExpr -> Literal .)
    -               reduce using rule 99 (PrimaryExpr -> Literal .)
    EQstr           reduce using rule 99 (PrimaryExpr -> Literal .)
    NEstr           reduce using rule 99 (PrimaryExpr -> Literal .)
    LTstr           reduce using rule 99 (PrimaryExpr -> Literal .)
    LEstr           reduce using rule 99 (PrimaryExpr -> Literal .)
    GTstr           reduce using rule 99 (PrimaryExpr -> Literal .)
    GEstr           reduce using rule 99 (PrimaryExpr -> Literal .)
    EQsym           reduce using rule 99 (PrimaryExpr -> Literal .)
    NEsym           reduce using rule 99 (PrimaryExpr -> Literal .)
    LTsym           reduce using rule 99 (PrimaryExpr -> Literal .)
    LEsym           reduce using rule 99 (PrimaryExpr -> Literal .)
    GTsym           reduce using rule 99 (PrimaryExpr -> Literal .)
    GEsym           reduce using rule 99 (PrimaryExpr -> Literal .)
    IS              reduce using rule 99 (PrimaryExpr -> Literal .)
    AND             reduce using rule 99 (PrimaryExpr -> Literal .)
    OR              reduce using rule 99 (PrimaryExpr -> Literal .)
    ,               reduce using rule 99 (PrimaryExpr -> Literal .)
    $end            reduce using rule 99 (PrimaryExpr -> Literal .)
    )               reduce using rule 99 (PrimaryExpr -> Literal .)
    ]               reduce using rule 99 (PrimaryExpr -> Literal .)


state 28

    (100) PrimaryExpr -> VarRef .

    [               reduce using rule 100 (PrimaryExpr -> VarRef .)
    SLASH           reduce using rule 100 (PrimaryExpr -> VarRef .)
    DOUBLESLASH     reduce using rule 100 (PrimaryExpr -> VarRef .)
    INTERSECT       reduce using rule 100 (PrimaryExpr -> VarRef .)
    EXCEPT          reduce using rule 100 (PrimaryExpr -> VarRef .)
    UNION           reduce using rule 100 (PrimaryExpr -> VarRef .)
    |               reduce using rule 100 (PrimaryExpr -> VarRef .)
    *               reduce using rule 100 (PrimaryExpr -> VarRef .)
    DIV             reduce using rule 100 (PrimaryExpr -> VarRef .)
    IDIV            reduce using rule 100 (PrimaryExpr -> VarRef .)
    MOD             reduce using rule 100 (PrimaryExpr -> VarRef .)
    +               reduce using rule 100 (PrimaryExpr -> VarRef .)
    -               reduce using rule 100 (PrimaryExpr -> VarRef .)
    EQstr           reduce using rule 100 (PrimaryExpr -> VarRef .)
    NEstr           reduce using rule 100 (PrimaryExpr -> VarRef .)
    LTstr           reduce using rule 100 (PrimaryExpr -> VarRef .)
    LEstr           reduce using rule 100 (PrimaryExpr -> VarRef .)
    GTstr           reduce using rule 100 (PrimaryExpr -> VarRef .)
    GEstr           reduce using rule 100 (PrimaryExpr -> VarRef .)
    EQsym           reduce using rule 100 (PrimaryExpr -> VarRef .)
    NEsym           reduce using rule 100 (PrimaryExpr -> VarRef .)
    LTsym           reduce using rule 100 (PrimaryExpr -> VarRef .)
    LEsym           reduce using rule 100 (PrimaryExpr -> VarRef .)
    GTsym           reduce using rule 100 (PrimaryExpr -> VarRef .)
    GEsym           reduce using rule 100 (PrimaryExpr -> VarRef .)
    IS              reduce using rule 100 (PrimaryExpr -> VarRef .)
    AND             reduce using rule 100 (PrimaryExpr -> VarRef .)
    OR              reduce using rule 100 (PrimaryExpr -> VarRef .)
    ,               reduce using rule 100 (PrimaryExpr -> VarRef .)
    $end            reduce using rule 100 (PrimaryExpr -> VarRef .)
    )               reduce using rule 100 (PrimaryExpr -> VarRef .)
    ]               reduce using rule 100 (PrimaryExpr -> VarRef .)


state 29

    (101) PrimaryExpr -> ParenthesizedExpr .

    [               reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    SLASH           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    DOUBLESLASH     reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    INTERSECT       reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    EXCEPT          reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    UNION           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    |               reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    *               reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    DIV             reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    IDIV            reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    MOD             reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    +               reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    -               reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    EQstr           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    NEstr           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    LTstr           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    LEstr           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    GTstr           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    GEstr           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    EQsym           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    NEsym           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    LTsym           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    LEsym           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    GTsym           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    GEsym           reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    IS              reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    AND             reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    OR              reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    ,               reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    $end            reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    )               reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)
    ]               reduce using rule 101 (PrimaryExpr -> ParenthesizedExpr .)


state 30

    (102) PrimaryExpr -> CONTEXT .

    [               reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    SLASH           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    DOUBLESLASH     reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    INTERSECT       reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    EXCEPT          reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    UNION           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    |               reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    *               reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    DIV             reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    IDIV            reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    MOD             reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    +               reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    -               reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    EQstr           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    NEstr           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    LTstr           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    LEstr           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    GTstr           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    GEstr           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    EQsym           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    NEsym           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    LTsym           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    LEsym           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    GTsym           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    GEsym           reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    IS              reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    AND             reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    OR              reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    ,               reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    $end            reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    )               reduce using rule 102 (PrimaryExpr -> CONTEXT .)
    ]               reduce using rule 102 (PrimaryExpr -> CONTEXT .)


state 31

    (103) PrimaryExpr -> FunctionCall .

    [               reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    SLASH           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    DOUBLESLASH     reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    INTERSECT       reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    EXCEPT          reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    UNION           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    |               reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    *               reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    DIV             reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    IDIV            reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    MOD             reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    +               reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    -               reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    EQstr           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    NEstr           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    LTstr           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    LEstr           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    GTstr           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    GEstr           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    EQsym           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    NEsym           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    LTsym           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    LEsym           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    GTsym           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    GEsym           reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    IS              reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    AND             reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    OR              reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    ,               reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    $end            reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    )               reduce using rule 103 (PrimaryExpr -> FunctionCall .)
    ]               reduce using rule 103 (PrimaryExpr -> FunctionCall .)


state 32

    (61) ReverseStep -> ReverseAxis . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    EQNAME          shift and go to state 104
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    ATTRIBUTE       shift and go to state 105
    NODE            shift and go to state 63

    NodeTest                       shift and go to state 103
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 33

    (80) AbbrevForwardStep -> NodeTest .

    [               reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    SLASH           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    DOUBLESLASH     reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    INTERSECT       reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    EXCEPT          reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    UNION           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    |               reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    *               reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    DIV             reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    IDIV            reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    MOD             reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    +               reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    -               reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    EQstr           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    NEstr           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    LTstr           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    LEstr           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    GTstr           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    GEstr           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    EQsym           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    NEsym           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    LTsym           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    LEsym           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    GTsym           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    GEsym           reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    IS              reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    AND             reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    OR              reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    ,               reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    $end            reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    )               reduce using rule 80 (AbbrevForwardStep -> NodeTest .)
    ]               reduce using rule 80 (AbbrevForwardStep -> NodeTest .)


state 34

    (62) ReverseStep -> AbbrevReverseStep .

    [               reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    SLASH           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    DOUBLESLASH     reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    INTERSECT       reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    EXCEPT          reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    UNION           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    |               reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    *               reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    DIV             reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    IDIV            reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    MOD             reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    +               reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    -               reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    EQstr           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    NEstr           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    LTstr           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    LEstr           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    GTstr           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    GEstr           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    EQsym           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    NEsym           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    LTsym           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    LEsym           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    GTsym           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    GEsym           reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    IS              reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    AND             reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    OR              reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    ,               reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    $end            reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    )               reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)
    ]               reduce using rule 62 (ReverseStep -> AbbrevReverseStep .)


state 35

    (69) ForwardStep -> ForwardAxis . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    EQNAME          shift and go to state 104
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    ATTRIBUTE       shift and go to state 105
    NODE            shift and go to state 63

    NodeTest                       shift and go to state 106
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 36

    (70) ForwardStep -> AbbrevForwardStep .

    [               reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    SLASH           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    DOUBLESLASH     reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    INTERSECT       reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    EXCEPT          reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    UNION           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    |               reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    *               reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    DIV             reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    IDIV            reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    MOD             reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    +               reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    -               reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    EQstr           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    NEstr           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    LTstr           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    LEstr           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    GTstr           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    GEstr           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    EQsym           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    NEsym           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    LTsym           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    LEsym           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    GTsym           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    GEsym           reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    IS              reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    AND             reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    OR              reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    ,               reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    $end            reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    )               reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)
    ]               reduce using rule 70 (ForwardStep -> AbbrevForwardStep .)


state 37

    (104) Literal -> STRING .

    [               reduce using rule 104 (Literal -> STRING .)
    SLASH           reduce using rule 104 (Literal -> STRING .)
    DOUBLESLASH     reduce using rule 104 (Literal -> STRING .)
    INTERSECT       reduce using rule 104 (Literal -> STRING .)
    EXCEPT          reduce using rule 104 (Literal -> STRING .)
    UNION           reduce using rule 104 (Literal -> STRING .)
    |               reduce using rule 104 (Literal -> STRING .)
    *               reduce using rule 104 (Literal -> STRING .)
    DIV             reduce using rule 104 (Literal -> STRING .)
    IDIV            reduce using rule 104 (Literal -> STRING .)
    MOD             reduce using rule 104 (Literal -> STRING .)
    +               reduce using rule 104 (Literal -> STRING .)
    -               reduce using rule 104 (Literal -> STRING .)
    EQstr           reduce using rule 104 (Literal -> STRING .)
    NEstr           reduce using rule 104 (Literal -> STRING .)
    LTstr           reduce using rule 104 (Literal -> STRING .)
    LEstr           reduce using rule 104 (Literal -> STRING .)
    GTstr           reduce using rule 104 (Literal -> STRING .)
    GEstr           reduce using rule 104 (Literal -> STRING .)
    EQsym           reduce using rule 104 (Literal -> STRING .)
    NEsym           reduce using rule 104 (Literal -> STRING .)
    LTsym           reduce using rule 104 (Literal -> STRING .)
    LEsym           reduce using rule 104 (Literal -> STRING .)
    GTsym           reduce using rule 104 (Literal -> STRING .)
    GEsym           reduce using rule 104 (Literal -> STRING .)
    IS              reduce using rule 104 (Literal -> STRING .)
    AND             reduce using rule 104 (Literal -> STRING .)
    OR              reduce using rule 104 (Literal -> STRING .)
    ,               reduce using rule 104 (Literal -> STRING .)
    $end            reduce using rule 104 (Literal -> STRING .)
    )               reduce using rule 104 (Literal -> STRING .)
    ]               reduce using rule 104 (Literal -> STRING .)


state 38

    (105) Literal -> NUMBER .

    [               reduce using rule 105 (Literal -> NUMBER .)
    SLASH           reduce using rule 105 (Literal -> NUMBER .)
    DOUBLESLASH     reduce using rule 105 (Literal -> NUMBER .)
    INTERSECT       reduce using rule 105 (Literal -> NUMBER .)
    EXCEPT          reduce using rule 105 (Literal -> NUMBER .)
    UNION           reduce using rule 105 (Literal -> NUMBER .)
    |               reduce using rule 105 (Literal -> NUMBER .)
    *               reduce using rule 105 (Literal -> NUMBER .)
    DIV             reduce using rule 105 (Literal -> NUMBER .)
    IDIV            reduce using rule 105 (Literal -> NUMBER .)
    MOD             reduce using rule 105 (Literal -> NUMBER .)
    +               reduce using rule 105 (Literal -> NUMBER .)
    -               reduce using rule 105 (Literal -> NUMBER .)
    EQstr           reduce using rule 105 (Literal -> NUMBER .)
    NEstr           reduce using rule 105 (Literal -> NUMBER .)
    LTstr           reduce using rule 105 (Literal -> NUMBER .)
    LEstr           reduce using rule 105 (Literal -> NUMBER .)
    GTstr           reduce using rule 105 (Literal -> NUMBER .)
    GEstr           reduce using rule 105 (Literal -> NUMBER .)
    EQsym           reduce using rule 105 (Literal -> NUMBER .)
    NEsym           reduce using rule 105 (Literal -> NUMBER .)
    LTsym           reduce using rule 105 (Literal -> NUMBER .)
    LEsym           reduce using rule 105 (Literal -> NUMBER .)
    GTsym           reduce using rule 105 (Literal -> NUMBER .)
    GEsym           reduce using rule 105 (Literal -> NUMBER .)
    IS              reduce using rule 105 (Literal -> NUMBER .)
    AND             reduce using rule 105 (Literal -> NUMBER .)
    OR              reduce using rule 105 (Literal -> NUMBER .)
    ,               reduce using rule 105 (Literal -> NUMBER .)
    $end            reduce using rule 105 (Literal -> NUMBER .)
    )               reduce using rule 105 (Literal -> NUMBER .)
    ]               reduce using rule 105 (Literal -> NUMBER .)


state 39

    (106) VarRef -> $ . VarName
    (107) VarName -> . EQNAME

    EQNAME          shift and go to state 108

    VarName                        shift and go to state 107

state 40

    (108) ParenthesizedExpr -> ( . )
    (109) ParenthesizedExpr -> ( . Expr )
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    )               shift and go to state 109
    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    Expr                           shift and go to state 110
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 41

    (110) FunctionCall -> EQNAME . ArgumentList
    (97) NameTest -> EQNAME .
    (111) ArgumentList -> . ( )
    (112) ArgumentList -> . ( ArgumentExpr )

    [               reduce using rule 97 (NameTest -> EQNAME .)
    SLASH           reduce using rule 97 (NameTest -> EQNAME .)
    DOUBLESLASH     reduce using rule 97 (NameTest -> EQNAME .)
    INTERSECT       reduce using rule 97 (NameTest -> EQNAME .)
    EXCEPT          reduce using rule 97 (NameTest -> EQNAME .)
    UNION           reduce using rule 97 (NameTest -> EQNAME .)
    |               reduce using rule 97 (NameTest -> EQNAME .)
    *               reduce using rule 97 (NameTest -> EQNAME .)
    DIV             reduce using rule 97 (NameTest -> EQNAME .)
    IDIV            reduce using rule 97 (NameTest -> EQNAME .)
    MOD             reduce using rule 97 (NameTest -> EQNAME .)
    +               reduce using rule 97 (NameTest -> EQNAME .)
    -               reduce using rule 97 (NameTest -> EQNAME .)
    EQstr           reduce using rule 97 (NameTest -> EQNAME .)
    NEstr           reduce using rule 97 (NameTest -> EQNAME .)
    LTstr           reduce using rule 97 (NameTest -> EQNAME .)
    LEstr           reduce using rule 97 (NameTest -> EQNAME .)
    GTstr           reduce using rule 97 (NameTest -> EQNAME .)
    GEstr           reduce using rule 97 (NameTest -> EQNAME .)
    EQsym           reduce using rule 97 (NameTest -> EQNAME .)
    NEsym           reduce using rule 97 (NameTest -> EQNAME .)
    LTsym           reduce using rule 97 (NameTest -> EQNAME .)
    LEsym           reduce using rule 97 (NameTest -> EQNAME .)
    GTsym           reduce using rule 97 (NameTest -> EQNAME .)
    GEsym           reduce using rule 97 (NameTest -> EQNAME .)
    IS              reduce using rule 97 (NameTest -> EQNAME .)
    AND             reduce using rule 97 (NameTest -> EQNAME .)
    OR              reduce using rule 97 (NameTest -> EQNAME .)
    ,               reduce using rule 97 (NameTest -> EQNAME .)
    $end            reduce using rule 97 (NameTest -> EQNAME .)
    )               reduce using rule 97 (NameTest -> EQNAME .)
    ]               reduce using rule 97 (NameTest -> EQNAME .)
    (               shift and go to state 112

    ArgumentList                   shift and go to state 111

state 42

    (63) ReverseAxis -> PARENT . AXIS

    AXIS            shift and go to state 113


state 43

    (64) ReverseAxis -> ANCESTOR . AXIS

    AXIS            shift and go to state 114


state 44

    (65) ReverseAxis -> PRECEDING_SIBLING . AXIS

    AXIS            shift and go to state 115


state 45

    (66) ReverseAxis -> PRECEDING . AXIS

    AXIS            shift and go to state 116


state 46

    (67) ReverseAxis -> ANCESTOR_OR_SELF . AXIS

    AXIS            shift and go to state 117


state 47

    (68) AbbrevReverseStep -> DOUBLEDOT .

    [               reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    SLASH           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    DOUBLESLASH     reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    INTERSECT       reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    EXCEPT          reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    UNION           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    |               reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    *               reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    DIV             reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    IDIV            reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    MOD             reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    +               reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    -               reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    EQstr           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    NEstr           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    LTstr           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    LEstr           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    GTstr           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    GEstr           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    EQsym           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    NEsym           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    LTsym           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    LEsym           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    GTsym           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    GEsym           reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    IS              reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    AND             reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    OR              reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    ,               reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    $end            reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    )               reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)
    ]               reduce using rule 68 (AbbrevReverseStep -> DOUBLEDOT .)


state 48

    (71) ForwardAxis -> CHILD . AXIS

    AXIS            shift and go to state 118


state 49

    (72) ForwardAxis -> DESCENDANT . AXIS

    AXIS            shift and go to state 119


state 50

    (73) ForwardAxis -> ATTRIBUTE . AXIS
    (91) AttributeTest -> ATTRIBUTE . ( AttributeNameOrWildcard )
    (92) AttributeTest -> ATTRIBUTE . ( )

    AXIS            shift and go to state 120
    (               shift and go to state 121


state 51

    (74) ForwardAxis -> SELF . AXIS

    AXIS            shift and go to state 122


state 52

    (75) ForwardAxis -> DESCENDANT_OR_SELF . AXIS

    AXIS            shift and go to state 123


state 53

    (76) ForwardAxis -> FOLLOWING_SIBLING . AXIS

    AXIS            shift and go to state 124


state 54

    (77) ForwardAxis -> FOLLOWING . AXIS

    AXIS            shift and go to state 125


state 55

    (78) ForwardAxis -> NAMESPACE . AXIS

    AXIS            shift and go to state 126


state 56

    (79) AbbrevForwardStep -> @ . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    EQNAME          shift and go to state 104
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    ATTRIBUTE       shift and go to state 105
    NODE            shift and go to state 63

    NodeTest                       shift and go to state 127
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 57

    (81) NodeTest -> KindTest .

    [               reduce using rule 81 (NodeTest -> KindTest .)
    SLASH           reduce using rule 81 (NodeTest -> KindTest .)
    DOUBLESLASH     reduce using rule 81 (NodeTest -> KindTest .)
    INTERSECT       reduce using rule 81 (NodeTest -> KindTest .)
    EXCEPT          reduce using rule 81 (NodeTest -> KindTest .)
    UNION           reduce using rule 81 (NodeTest -> KindTest .)
    |               reduce using rule 81 (NodeTest -> KindTest .)
    *               reduce using rule 81 (NodeTest -> KindTest .)
    DIV             reduce using rule 81 (NodeTest -> KindTest .)
    IDIV            reduce using rule 81 (NodeTest -> KindTest .)
    MOD             reduce using rule 81 (NodeTest -> KindTest .)
    +               reduce using rule 81 (NodeTest -> KindTest .)
    -               reduce using rule 81 (NodeTest -> KindTest .)
    EQstr           reduce using rule 81 (NodeTest -> KindTest .)
    NEstr           reduce using rule 81 (NodeTest -> KindTest .)
    LTstr           reduce using rule 81 (NodeTest -> KindTest .)
    LEstr           reduce using rule 81 (NodeTest -> KindTest .)
    GTstr           reduce using rule 81 (NodeTest -> KindTest .)
    GEstr           reduce using rule 81 (NodeTest -> KindTest .)
    EQsym           reduce using rule 81 (NodeTest -> KindTest .)
    NEsym           reduce using rule 81 (NodeTest -> KindTest .)
    LTsym           reduce using rule 81 (NodeTest -> KindTest .)
    LEsym           reduce using rule 81 (NodeTest -> KindTest .)
    GTsym           reduce using rule 81 (NodeTest -> KindTest .)
    GEsym           reduce using rule 81 (NodeTest -> KindTest .)
    IS              reduce using rule 81 (NodeTest -> KindTest .)
    AND             reduce using rule 81 (NodeTest -> KindTest .)
    OR              reduce using rule 81 (NodeTest -> KindTest .)
    ,               reduce using rule 81 (NodeTest -> KindTest .)
    $end            reduce using rule 81 (NodeTest -> KindTest .)
    )               reduce using rule 81 (NodeTest -> KindTest .)
    ]               reduce using rule 81 (NodeTest -> KindTest .)


state 58

    (82) NodeTest -> NameTest .

    [               reduce using rule 82 (NodeTest -> NameTest .)
    SLASH           reduce using rule 82 (NodeTest -> NameTest .)
    DOUBLESLASH     reduce using rule 82 (NodeTest -> NameTest .)
    INTERSECT       reduce using rule 82 (NodeTest -> NameTest .)
    EXCEPT          reduce using rule 82 (NodeTest -> NameTest .)
    UNION           reduce using rule 82 (NodeTest -> NameTest .)
    |               reduce using rule 82 (NodeTest -> NameTest .)
    *               reduce using rule 82 (NodeTest -> NameTest .)
    DIV             reduce using rule 82 (NodeTest -> NameTest .)
    IDIV            reduce using rule 82 (NodeTest -> NameTest .)
    MOD             reduce using rule 82 (NodeTest -> NameTest .)
    +               reduce using rule 82 (NodeTest -> NameTest .)
    -               reduce using rule 82 (NodeTest -> NameTest .)
    EQstr           reduce using rule 82 (NodeTest -> NameTest .)
    NEstr           reduce using rule 82 (NodeTest -> NameTest .)
    LTstr           reduce using rule 82 (NodeTest -> NameTest .)
    LEstr           reduce using rule 82 (NodeTest -> NameTest .)
    GTstr           reduce using rule 82 (NodeTest -> NameTest .)
    GEstr           reduce using rule 82 (NodeTest -> NameTest .)
    EQsym           reduce using rule 82 (NodeTest -> NameTest .)
    NEsym           reduce using rule 82 (NodeTest -> NameTest .)
    LTsym           reduce using rule 82 (NodeTest -> NameTest .)
    LEsym           reduce using rule 82 (NodeTest -> NameTest .)
    GTsym           reduce using rule 82 (NodeTest -> NameTest .)
    GEsym           reduce using rule 82 (NodeTest -> NameTest .)
    IS              reduce using rule 82 (NodeTest -> NameTest .)
    AND             reduce using rule 82 (NodeTest -> NameTest .)
    OR              reduce using rule 82 (NodeTest -> NameTest .)
    ,               reduce using rule 82 (NodeTest -> NameTest .)
    $end            reduce using rule 82 (NodeTest -> NameTest .)
    )               reduce using rule 82 (NodeTest -> NameTest .)
    ]               reduce using rule 82 (NodeTest -> NameTest .)


state 59

    (83) KindTest -> ElementTest .

    [               reduce using rule 83 (KindTest -> ElementTest .)
    SLASH           reduce using rule 83 (KindTest -> ElementTest .)
    DOUBLESLASH     reduce using rule 83 (KindTest -> ElementTest .)
    INTERSECT       reduce using rule 83 (KindTest -> ElementTest .)
    EXCEPT          reduce using rule 83 (KindTest -> ElementTest .)
    UNION           reduce using rule 83 (KindTest -> ElementTest .)
    |               reduce using rule 83 (KindTest -> ElementTest .)
    *               reduce using rule 83 (KindTest -> ElementTest .)
    DIV             reduce using rule 83 (KindTest -> ElementTest .)
    IDIV            reduce using rule 83 (KindTest -> ElementTest .)
    MOD             reduce using rule 83 (KindTest -> ElementTest .)
    +               reduce using rule 83 (KindTest -> ElementTest .)
    -               reduce using rule 83 (KindTest -> ElementTest .)
    EQstr           reduce using rule 83 (KindTest -> ElementTest .)
    NEstr           reduce using rule 83 (KindTest -> ElementTest .)
    LTstr           reduce using rule 83 (KindTest -> ElementTest .)
    LEstr           reduce using rule 83 (KindTest -> ElementTest .)
    GTstr           reduce using rule 83 (KindTest -> ElementTest .)
    GEstr           reduce using rule 83 (KindTest -> ElementTest .)
    EQsym           reduce using rule 83 (KindTest -> ElementTest .)
    NEsym           reduce using rule 83 (KindTest -> ElementTest .)
    LTsym           reduce using rule 83 (KindTest -> ElementTest .)
    LEsym           reduce using rule 83 (KindTest -> ElementTest .)
    GTsym           reduce using rule 83 (KindTest -> ElementTest .)
    GEsym           reduce using rule 83 (KindTest -> ElementTest .)
    IS              reduce using rule 83 (KindTest -> ElementTest .)
    AND             reduce using rule 83 (KindTest -> ElementTest .)
    OR              reduce using rule 83 (KindTest -> ElementTest .)
    ,               reduce using rule 83 (KindTest -> ElementTest .)
    $end            reduce using rule 83 (KindTest -> ElementTest .)
    )               reduce using rule 83 (KindTest -> ElementTest .)
    ]               reduce using rule 83 (KindTest -> ElementTest .)


state 60

    (84) KindTest -> AttributeTest .

    [               reduce using rule 84 (KindTest -> AttributeTest .)
    SLASH           reduce using rule 84 (KindTest -> AttributeTest .)
    DOUBLESLASH     reduce using rule 84 (KindTest -> AttributeTest .)
    INTERSECT       reduce using rule 84 (KindTest -> AttributeTest .)
    EXCEPT          reduce using rule 84 (KindTest -> AttributeTest .)
    UNION           reduce using rule 84 (KindTest -> AttributeTest .)
    |               reduce using rule 84 (KindTest -> AttributeTest .)
    *               reduce using rule 84 (KindTest -> AttributeTest .)
    DIV             reduce using rule 84 (KindTest -> AttributeTest .)
    IDIV            reduce using rule 84 (KindTest -> AttributeTest .)
    MOD             reduce using rule 84 (KindTest -> AttributeTest .)
    +               reduce using rule 84 (KindTest -> AttributeTest .)
    -               reduce using rule 84 (KindTest -> AttributeTest .)
    EQstr           reduce using rule 84 (KindTest -> AttributeTest .)
    NEstr           reduce using rule 84 (KindTest -> AttributeTest .)
    LTstr           reduce using rule 84 (KindTest -> AttributeTest .)
    LEstr           reduce using rule 84 (KindTest -> AttributeTest .)
    GTstr           reduce using rule 84 (KindTest -> AttributeTest .)
    GEstr           reduce using rule 84 (KindTest -> AttributeTest .)
    EQsym           reduce using rule 84 (KindTest -> AttributeTest .)
    NEsym           reduce using rule 84 (KindTest -> AttributeTest .)
    LTsym           reduce using rule 84 (KindTest -> AttributeTest .)
    LEsym           reduce using rule 84 (KindTest -> AttributeTest .)
    GTsym           reduce using rule 84 (KindTest -> AttributeTest .)
    GEsym           reduce using rule 84 (KindTest -> AttributeTest .)
    IS              reduce using rule 84 (KindTest -> AttributeTest .)
    AND             reduce using rule 84 (KindTest -> AttributeTest .)
    OR              reduce using rule 84 (KindTest -> AttributeTest .)
    ,               reduce using rule 84 (KindTest -> AttributeTest .)
    $end            reduce using rule 84 (KindTest -> AttributeTest .)
    )               reduce using rule 84 (KindTest -> AttributeTest .)
    ]               reduce using rule 84 (KindTest -> AttributeTest .)


state 61

    (85) KindTest -> AnyKindTest .

    [               reduce using rule 85 (KindTest -> AnyKindTest .)
    SLASH           reduce using rule 85 (KindTest -> AnyKindTest .)
    DOUBLESLASH     reduce using rule 85 (KindTest -> AnyKindTest .)
    INTERSECT       reduce using rule 85 (KindTest -> AnyKindTest .)
    EXCEPT          reduce using rule 85 (KindTest -> AnyKindTest .)
    UNION           reduce using rule 85 (KindTest -> AnyKindTest .)
    |               reduce using rule 85 (KindTest -> AnyKindTest .)
    *               reduce using rule 85 (KindTest -> AnyKindTest .)
    DIV             reduce using rule 85 (KindTest -> AnyKindTest .)
    IDIV            reduce using rule 85 (KindTest -> AnyKindTest .)
    MOD             reduce using rule 85 (KindTest -> AnyKindTest .)
    +               reduce using rule 85 (KindTest -> AnyKindTest .)
    -               reduce using rule 85 (KindTest -> AnyKindTest .)
    EQstr           reduce using rule 85 (KindTest -> AnyKindTest .)
    NEstr           reduce using rule 85 (KindTest -> AnyKindTest .)
    LTstr           reduce using rule 85 (KindTest -> AnyKindTest .)
    LEstr           reduce using rule 85 (KindTest -> AnyKindTest .)
    GTstr           reduce using rule 85 (KindTest -> AnyKindTest .)
    GEstr           reduce using rule 85 (KindTest -> AnyKindTest .)
    EQsym           reduce using rule 85 (KindTest -> AnyKindTest .)
    NEsym           reduce using rule 85 (KindTest -> AnyKindTest .)
    LTsym           reduce using rule 85 (KindTest -> AnyKindTest .)
    LEsym           reduce using rule 85 (KindTest -> AnyKindTest .)
    GTsym           reduce using rule 85 (KindTest -> AnyKindTest .)
    GEsym           reduce using rule 85 (KindTest -> AnyKindTest .)
    IS              reduce using rule 85 (KindTest -> AnyKindTest .)
    AND             reduce using rule 85 (KindTest -> AnyKindTest .)
    OR              reduce using rule 85 (KindTest -> AnyKindTest .)
    ,               reduce using rule 85 (KindTest -> AnyKindTest .)
    $end            reduce using rule 85 (KindTest -> AnyKindTest .)
    )               reduce using rule 85 (KindTest -> AnyKindTest .)
    ]               reduce using rule 85 (KindTest -> AnyKindTest .)


state 62

    (86) ElementTest -> ELEMENT . ( ElementNameOrWildcard )
    (87) ElementTest -> ELEMENT . ( )

    (               shift and go to state 128


state 63

    (96) AnyKindTest -> NODE . ( )

    (               shift and go to state 129


state 64

    (4) ExprList -> ExprList , . ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    ExprSingle                     shift and go to state 130
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 65

    (6) OrExpr -> AndExpr OR . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    AndExpr                        shift and go to state 131
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 66

    (8) AndExpr -> ComparisonExpr AND . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    ComparisonExpr                 shift and go to state 132
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 67

    (10) ComparisonExpr -> AdditiveExpr ValueComp . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    AdditiveExpr                   shift and go to state 133
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 68

    (11) ComparisonExpr -> AdditiveExpr NodeComp . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    AdditiveExpr                   shift and go to state 134
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 69

    (13) ValueComp -> EQstr .

    +               reduce using rule 13 (ValueComp -> EQstr .)
    -               reduce using rule 13 (ValueComp -> EQstr .)
    SLASH           reduce using rule 13 (ValueComp -> EQstr .)
    DOUBLESLASH     reduce using rule 13 (ValueComp -> EQstr .)
    CONTEXT         reduce using rule 13 (ValueComp -> EQstr .)
    STRING          reduce using rule 13 (ValueComp -> EQstr .)
    NUMBER          reduce using rule 13 (ValueComp -> EQstr .)
    $               reduce using rule 13 (ValueComp -> EQstr .)
    (               reduce using rule 13 (ValueComp -> EQstr .)
    EQNAME          reduce using rule 13 (ValueComp -> EQstr .)
    PARENT          reduce using rule 13 (ValueComp -> EQstr .)
    ANCESTOR        reduce using rule 13 (ValueComp -> EQstr .)
    PRECEDING_SIBLING reduce using rule 13 (ValueComp -> EQstr .)
    PRECEDING       reduce using rule 13 (ValueComp -> EQstr .)
    ANCESTOR_OR_SELF reduce using rule 13 (ValueComp -> EQstr .)
    DOUBLEDOT       reduce using rule 13 (ValueComp -> EQstr .)
    CHILD           reduce using rule 13 (ValueComp -> EQstr .)
    DESCENDANT      reduce using rule 13 (ValueComp -> EQstr .)
    ATTRIBUTE       reduce using rule 13 (ValueComp -> EQstr .)
    SELF            reduce using rule 13 (ValueComp -> EQstr .)
    DESCENDANT_OR_SELF reduce using rule 13 (ValueComp -> EQstr .)
    FOLLOWING_SIBLING reduce using rule 13 (ValueComp -> EQstr .)
    FOLLOWING       reduce using rule 13 (ValueComp -> EQstr .)
    NAMESPACE       reduce using rule 13 (ValueComp -> EQstr .)
    @               reduce using rule 13 (ValueComp -> EQstr .)
    *               reduce using rule 13 (ValueComp -> EQstr .)
    ELEMENT         reduce using rule 13 (ValueComp -> EQstr .)
    NODE            reduce using rule 13 (ValueComp -> EQstr .)


state 70

    (14) ValueComp -> NEstr .

    +               reduce using rule 14 (ValueComp -> NEstr .)
    -               reduce using rule 14 (ValueComp -> NEstr .)
    SLASH           reduce using rule 14 (ValueComp -> NEstr .)
    DOUBLESLASH     reduce using rule 14 (ValueComp -> NEstr .)
    CONTEXT         reduce using rule 14 (ValueComp -> NEstr .)
    STRING          reduce using rule 14 (ValueComp -> NEstr .)
    NUMBER          reduce using rule 14 (ValueComp -> NEstr .)
    $               reduce using rule 14 (ValueComp -> NEstr .)
    (               reduce using rule 14 (ValueComp -> NEstr .)
    EQNAME          reduce using rule 14 (ValueComp -> NEstr .)
    PARENT          reduce using rule 14 (ValueComp -> NEstr .)
    ANCESTOR        reduce using rule 14 (ValueComp -> NEstr .)
    PRECEDING_SIBLING reduce using rule 14 (ValueComp -> NEstr .)
    PRECEDING       reduce using rule 14 (ValueComp -> NEstr .)
    ANCESTOR_OR_SELF reduce using rule 14 (ValueComp -> NEstr .)
    DOUBLEDOT       reduce using rule 14 (ValueComp -> NEstr .)
    CHILD           reduce using rule 14 (ValueComp -> NEstr .)
    DESCENDANT      reduce using rule 14 (ValueComp -> NEstr .)
    ATTRIBUTE       reduce using rule 14 (ValueComp -> NEstr .)
    SELF            reduce using rule 14 (ValueComp -> NEstr .)
    DESCENDANT_OR_SELF reduce using rule 14 (ValueComp -> NEstr .)
    FOLLOWING_SIBLING reduce using rule 14 (ValueComp -> NEstr .)
    FOLLOWING       reduce using rule 14 (ValueComp -> NEstr .)
    NAMESPACE       reduce using rule 14 (ValueComp -> NEstr .)
    @               reduce using rule 14 (ValueComp -> NEstr .)
    *               reduce using rule 14 (ValueComp -> NEstr .)
    ELEMENT         reduce using rule 14 (ValueComp -> NEstr .)
    NODE            reduce using rule 14 (ValueComp -> NEstr .)


state 71

    (15) ValueComp -> LTstr .

    +               reduce using rule 15 (ValueComp -> LTstr .)
    -               reduce using rule 15 (ValueComp -> LTstr .)
    SLASH           reduce using rule 15 (ValueComp -> LTstr .)
    DOUBLESLASH     reduce using rule 15 (ValueComp -> LTstr .)
    CONTEXT         reduce using rule 15 (ValueComp -> LTstr .)
    STRING          reduce using rule 15 (ValueComp -> LTstr .)
    NUMBER          reduce using rule 15 (ValueComp -> LTstr .)
    $               reduce using rule 15 (ValueComp -> LTstr .)
    (               reduce using rule 15 (ValueComp -> LTstr .)
    EQNAME          reduce using rule 15 (ValueComp -> LTstr .)
    PARENT          reduce using rule 15 (ValueComp -> LTstr .)
    ANCESTOR        reduce using rule 15 (ValueComp -> LTstr .)
    PRECEDING_SIBLING reduce using rule 15 (ValueComp -> LTstr .)
    PRECEDING       reduce using rule 15 (ValueComp -> LTstr .)
    ANCESTOR_OR_SELF reduce using rule 15 (ValueComp -> LTstr .)
    DOUBLEDOT       reduce using rule 15 (ValueComp -> LTstr .)
    CHILD           reduce using rule 15 (ValueComp -> LTstr .)
    DESCENDANT      reduce using rule 15 (ValueComp -> LTstr .)
    ATTRIBUTE       reduce using rule 15 (ValueComp -> LTstr .)
    SELF            reduce using rule 15 (ValueComp -> LTstr .)
    DESCENDANT_OR_SELF reduce using rule 15 (ValueComp -> LTstr .)
    FOLLOWING_SIBLING reduce using rule 15 (ValueComp -> LTstr .)
    FOLLOWING       reduce using rule 15 (ValueComp -> LTstr .)
    NAMESPACE       reduce using rule 15 (ValueComp -> LTstr .)
    @               reduce using rule 15 (ValueComp -> LTstr .)
    *               reduce using rule 15 (ValueComp -> LTstr .)
    ELEMENT         reduce using rule 15 (ValueComp -> LTstr .)
    NODE            reduce using rule 15 (ValueComp -> LTstr .)


state 72

    (16) ValueComp -> LEstr .

    +               reduce using rule 16 (ValueComp -> LEstr .)
    -               reduce using rule 16 (ValueComp -> LEstr .)
    SLASH           reduce using rule 16 (ValueComp -> LEstr .)
    DOUBLESLASH     reduce using rule 16 (ValueComp -> LEstr .)
    CONTEXT         reduce using rule 16 (ValueComp -> LEstr .)
    STRING          reduce using rule 16 (ValueComp -> LEstr .)
    NUMBER          reduce using rule 16 (ValueComp -> LEstr .)
    $               reduce using rule 16 (ValueComp -> LEstr .)
    (               reduce using rule 16 (ValueComp -> LEstr .)
    EQNAME          reduce using rule 16 (ValueComp -> LEstr .)
    PARENT          reduce using rule 16 (ValueComp -> LEstr .)
    ANCESTOR        reduce using rule 16 (ValueComp -> LEstr .)
    PRECEDING_SIBLING reduce using rule 16 (ValueComp -> LEstr .)
    PRECEDING       reduce using rule 16 (ValueComp -> LEstr .)
    ANCESTOR_OR_SELF reduce using rule 16 (ValueComp -> LEstr .)
    DOUBLEDOT       reduce using rule 16 (ValueComp -> LEstr .)
    CHILD           reduce using rule 16 (ValueComp -> LEstr .)
    DESCENDANT      reduce using rule 16 (ValueComp -> LEstr .)
    ATTRIBUTE       reduce using rule 16 (ValueComp -> LEstr .)
    SELF            reduce using rule 16 (ValueComp -> LEstr .)
    DESCENDANT_OR_SELF reduce using rule 16 (ValueComp -> LEstr .)
    FOLLOWING_SIBLING reduce using rule 16 (ValueComp -> LEstr .)
    FOLLOWING       reduce using rule 16 (ValueComp -> LEstr .)
    NAMESPACE       reduce using rule 16 (ValueComp -> LEstr .)
    @               reduce using rule 16 (ValueComp -> LEstr .)
    *               reduce using rule 16 (ValueComp -> LEstr .)
    ELEMENT         reduce using rule 16 (ValueComp -> LEstr .)
    NODE            reduce using rule 16 (ValueComp -> LEstr .)


state 73

    (17) ValueComp -> GTstr .

    +               reduce using rule 17 (ValueComp -> GTstr .)
    -               reduce using rule 17 (ValueComp -> GTstr .)
    SLASH           reduce using rule 17 (ValueComp -> GTstr .)
    DOUBLESLASH     reduce using rule 17 (ValueComp -> GTstr .)
    CONTEXT         reduce using rule 17 (ValueComp -> GTstr .)
    STRING          reduce using rule 17 (ValueComp -> GTstr .)
    NUMBER          reduce using rule 17 (ValueComp -> GTstr .)
    $               reduce using rule 17 (ValueComp -> GTstr .)
    (               reduce using rule 17 (ValueComp -> GTstr .)
    EQNAME          reduce using rule 17 (ValueComp -> GTstr .)
    PARENT          reduce using rule 17 (ValueComp -> GTstr .)
    ANCESTOR        reduce using rule 17 (ValueComp -> GTstr .)
    PRECEDING_SIBLING reduce using rule 17 (ValueComp -> GTstr .)
    PRECEDING       reduce using rule 17 (ValueComp -> GTstr .)
    ANCESTOR_OR_SELF reduce using rule 17 (ValueComp -> GTstr .)
    DOUBLEDOT       reduce using rule 17 (ValueComp -> GTstr .)
    CHILD           reduce using rule 17 (ValueComp -> GTstr .)
    DESCENDANT      reduce using rule 17 (ValueComp -> GTstr .)
    ATTRIBUTE       reduce using rule 17 (ValueComp -> GTstr .)
    SELF            reduce using rule 17 (ValueComp -> GTstr .)
    DESCENDANT_OR_SELF reduce using rule 17 (ValueComp -> GTstr .)
    FOLLOWING_SIBLING reduce using rule 17 (ValueComp -> GTstr .)
    FOLLOWING       reduce using rule 17 (ValueComp -> GTstr .)
    NAMESPACE       reduce using rule 17 (ValueComp -> GTstr .)
    @               reduce using rule 17 (ValueComp -> GTstr .)
    *               reduce using rule 17 (ValueComp -> GTstr .)
    ELEMENT         reduce using rule 17 (ValueComp -> GTstr .)
    NODE            reduce using rule 17 (ValueComp -> GTstr .)


state 74

    (18) ValueComp -> GEstr .

    +               reduce using rule 18 (ValueComp -> GEstr .)
    -               reduce using rule 18 (ValueComp -> GEstr .)
    SLASH           reduce using rule 18 (ValueComp -> GEstr .)
    DOUBLESLASH     reduce using rule 18 (ValueComp -> GEstr .)
    CONTEXT         reduce using rule 18 (ValueComp -> GEstr .)
    STRING          reduce using rule 18 (ValueComp -> GEstr .)
    NUMBER          reduce using rule 18 (ValueComp -> GEstr .)
    $               reduce using rule 18 (ValueComp -> GEstr .)
    (               reduce using rule 18 (ValueComp -> GEstr .)
    EQNAME          reduce using rule 18 (ValueComp -> GEstr .)
    PARENT          reduce using rule 18 (ValueComp -> GEstr .)
    ANCESTOR        reduce using rule 18 (ValueComp -> GEstr .)
    PRECEDING_SIBLING reduce using rule 18 (ValueComp -> GEstr .)
    PRECEDING       reduce using rule 18 (ValueComp -> GEstr .)
    ANCESTOR_OR_SELF reduce using rule 18 (ValueComp -> GEstr .)
    DOUBLEDOT       reduce using rule 18 (ValueComp -> GEstr .)
    CHILD           reduce using rule 18 (ValueComp -> GEstr .)
    DESCENDANT      reduce using rule 18 (ValueComp -> GEstr .)
    ATTRIBUTE       reduce using rule 18 (ValueComp -> GEstr .)
    SELF            reduce using rule 18 (ValueComp -> GEstr .)
    DESCENDANT_OR_SELF reduce using rule 18 (ValueComp -> GEstr .)
    FOLLOWING_SIBLING reduce using rule 18 (ValueComp -> GEstr .)
    FOLLOWING       reduce using rule 18 (ValueComp -> GEstr .)
    NAMESPACE       reduce using rule 18 (ValueComp -> GEstr .)
    @               reduce using rule 18 (ValueComp -> GEstr .)
    *               reduce using rule 18 (ValueComp -> GEstr .)
    ELEMENT         reduce using rule 18 (ValueComp -> GEstr .)
    NODE            reduce using rule 18 (ValueComp -> GEstr .)


state 75

    (19) ValueComp -> EQsym .

    +               reduce using rule 19 (ValueComp -> EQsym .)
    -               reduce using rule 19 (ValueComp -> EQsym .)
    SLASH           reduce using rule 19 (ValueComp -> EQsym .)
    DOUBLESLASH     reduce using rule 19 (ValueComp -> EQsym .)
    CONTEXT         reduce using rule 19 (ValueComp -> EQsym .)
    STRING          reduce using rule 19 (ValueComp -> EQsym .)
    NUMBER          reduce using rule 19 (ValueComp -> EQsym .)
    $               reduce using rule 19 (ValueComp -> EQsym .)
    (               reduce using rule 19 (ValueComp -> EQsym .)
    EQNAME          reduce using rule 19 (ValueComp -> EQsym .)
    PARENT          reduce using rule 19 (ValueComp -> EQsym .)
    ANCESTOR        reduce using rule 19 (ValueComp -> EQsym .)
    PRECEDING_SIBLING reduce using rule 19 (ValueComp -> EQsym .)
    PRECEDING       reduce using rule 19 (ValueComp -> EQsym .)
    ANCESTOR_OR_SELF reduce using rule 19 (ValueComp -> EQsym .)
    DOUBLEDOT       reduce using rule 19 (ValueComp -> EQsym .)
    CHILD           reduce using rule 19 (ValueComp -> EQsym .)
    DESCENDANT      reduce using rule 19 (ValueComp -> EQsym .)
    ATTRIBUTE       reduce using rule 19 (ValueComp -> EQsym .)
    SELF            reduce using rule 19 (ValueComp -> EQsym .)
    DESCENDANT_OR_SELF reduce using rule 19 (ValueComp -> EQsym .)
    FOLLOWING_SIBLING reduce using rule 19 (ValueComp -> EQsym .)
    FOLLOWING       reduce using rule 19 (ValueComp -> EQsym .)
    NAMESPACE       reduce using rule 19 (ValueComp -> EQsym .)
    @               reduce using rule 19 (ValueComp -> EQsym .)
    *               reduce using rule 19 (ValueComp -> EQsym .)
    ELEMENT         reduce using rule 19 (ValueComp -> EQsym .)
    NODE            reduce using rule 19 (ValueComp -> EQsym .)


state 76

    (20) ValueComp -> NEsym .

    +               reduce using rule 20 (ValueComp -> NEsym .)
    -               reduce using rule 20 (ValueComp -> NEsym .)
    SLASH           reduce using rule 20 (ValueComp -> NEsym .)
    DOUBLESLASH     reduce using rule 20 (ValueComp -> NEsym .)
    CONTEXT         reduce using rule 20 (ValueComp -> NEsym .)
    STRING          reduce using rule 20 (ValueComp -> NEsym .)
    NUMBER          reduce using rule 20 (ValueComp -> NEsym .)
    $               reduce using rule 20 (ValueComp -> NEsym .)
    (               reduce using rule 20 (ValueComp -> NEsym .)
    EQNAME          reduce using rule 20 (ValueComp -> NEsym .)
    PARENT          reduce using rule 20 (ValueComp -> NEsym .)
    ANCESTOR        reduce using rule 20 (ValueComp -> NEsym .)
    PRECEDING_SIBLING reduce using rule 20 (ValueComp -> NEsym .)
    PRECEDING       reduce using rule 20 (ValueComp -> NEsym .)
    ANCESTOR_OR_SELF reduce using rule 20 (ValueComp -> NEsym .)
    DOUBLEDOT       reduce using rule 20 (ValueComp -> NEsym .)
    CHILD           reduce using rule 20 (ValueComp -> NEsym .)
    DESCENDANT      reduce using rule 20 (ValueComp -> NEsym .)
    ATTRIBUTE       reduce using rule 20 (ValueComp -> NEsym .)
    SELF            reduce using rule 20 (ValueComp -> NEsym .)
    DESCENDANT_OR_SELF reduce using rule 20 (ValueComp -> NEsym .)
    FOLLOWING_SIBLING reduce using rule 20 (ValueComp -> NEsym .)
    FOLLOWING       reduce using rule 20 (ValueComp -> NEsym .)
    NAMESPACE       reduce using rule 20 (ValueComp -> NEsym .)
    @               reduce using rule 20 (ValueComp -> NEsym .)
    *               reduce using rule 20 (ValueComp -> NEsym .)
    ELEMENT         reduce using rule 20 (ValueComp -> NEsym .)
    NODE            reduce using rule 20 (ValueComp -> NEsym .)


state 77

    (21) ValueComp -> LTsym .

    +               reduce using rule 21 (ValueComp -> LTsym .)
    -               reduce using rule 21 (ValueComp -> LTsym .)
    SLASH           reduce using rule 21 (ValueComp -> LTsym .)
    DOUBLESLASH     reduce using rule 21 (ValueComp -> LTsym .)
    CONTEXT         reduce using rule 21 (ValueComp -> LTsym .)
    STRING          reduce using rule 21 (ValueComp -> LTsym .)
    NUMBER          reduce using rule 21 (ValueComp -> LTsym .)
    $               reduce using rule 21 (ValueComp -> LTsym .)
    (               reduce using rule 21 (ValueComp -> LTsym .)
    EQNAME          reduce using rule 21 (ValueComp -> LTsym .)
    PARENT          reduce using rule 21 (ValueComp -> LTsym .)
    ANCESTOR        reduce using rule 21 (ValueComp -> LTsym .)
    PRECEDING_SIBLING reduce using rule 21 (ValueComp -> LTsym .)
    PRECEDING       reduce using rule 21 (ValueComp -> LTsym .)
    ANCESTOR_OR_SELF reduce using rule 21 (ValueComp -> LTsym .)
    DOUBLEDOT       reduce using rule 21 (ValueComp -> LTsym .)
    CHILD           reduce using rule 21 (ValueComp -> LTsym .)
    DESCENDANT      reduce using rule 21 (ValueComp -> LTsym .)
    ATTRIBUTE       reduce using rule 21 (ValueComp -> LTsym .)
    SELF            reduce using rule 21 (ValueComp -> LTsym .)
    DESCENDANT_OR_SELF reduce using rule 21 (ValueComp -> LTsym .)
    FOLLOWING_SIBLING reduce using rule 21 (ValueComp -> LTsym .)
    FOLLOWING       reduce using rule 21 (ValueComp -> LTsym .)
    NAMESPACE       reduce using rule 21 (ValueComp -> LTsym .)
    @               reduce using rule 21 (ValueComp -> LTsym .)
    *               reduce using rule 21 (ValueComp -> LTsym .)
    ELEMENT         reduce using rule 21 (ValueComp -> LTsym .)
    NODE            reduce using rule 21 (ValueComp -> LTsym .)


state 78

    (22) ValueComp -> LEsym .

    +               reduce using rule 22 (ValueComp -> LEsym .)
    -               reduce using rule 22 (ValueComp -> LEsym .)
    SLASH           reduce using rule 22 (ValueComp -> LEsym .)
    DOUBLESLASH     reduce using rule 22 (ValueComp -> LEsym .)
    CONTEXT         reduce using rule 22 (ValueComp -> LEsym .)
    STRING          reduce using rule 22 (ValueComp -> LEsym .)
    NUMBER          reduce using rule 22 (ValueComp -> LEsym .)
    $               reduce using rule 22 (ValueComp -> LEsym .)
    (               reduce using rule 22 (ValueComp -> LEsym .)
    EQNAME          reduce using rule 22 (ValueComp -> LEsym .)
    PARENT          reduce using rule 22 (ValueComp -> LEsym .)
    ANCESTOR        reduce using rule 22 (ValueComp -> LEsym .)
    PRECEDING_SIBLING reduce using rule 22 (ValueComp -> LEsym .)
    PRECEDING       reduce using rule 22 (ValueComp -> LEsym .)
    ANCESTOR_OR_SELF reduce using rule 22 (ValueComp -> LEsym .)
    DOUBLEDOT       reduce using rule 22 (ValueComp -> LEsym .)
    CHILD           reduce using rule 22 (ValueComp -> LEsym .)
    DESCENDANT      reduce using rule 22 (ValueComp -> LEsym .)
    ATTRIBUTE       reduce using rule 22 (ValueComp -> LEsym .)
    SELF            reduce using rule 22 (ValueComp -> LEsym .)
    DESCENDANT_OR_SELF reduce using rule 22 (ValueComp -> LEsym .)
    FOLLOWING_SIBLING reduce using rule 22 (ValueComp -> LEsym .)
    FOLLOWING       reduce using rule 22 (ValueComp -> LEsym .)
    NAMESPACE       reduce using rule 22 (ValueComp -> LEsym .)
    @               reduce using rule 22 (ValueComp -> LEsym .)
    *               reduce using rule 22 (ValueComp -> LEsym .)
    ELEMENT         reduce using rule 22 (ValueComp -> LEsym .)
    NODE            reduce using rule 22 (ValueComp -> LEsym .)


state 79

    (23) ValueComp -> GTsym .

    +               reduce using rule 23 (ValueComp -> GTsym .)
    -               reduce using rule 23 (ValueComp -> GTsym .)
    SLASH           reduce using rule 23 (ValueComp -> GTsym .)
    DOUBLESLASH     reduce using rule 23 (ValueComp -> GTsym .)
    CONTEXT         reduce using rule 23 (ValueComp -> GTsym .)
    STRING          reduce using rule 23 (ValueComp -> GTsym .)
    NUMBER          reduce using rule 23 (ValueComp -> GTsym .)
    $               reduce using rule 23 (ValueComp -> GTsym .)
    (               reduce using rule 23 (ValueComp -> GTsym .)
    EQNAME          reduce using rule 23 (ValueComp -> GTsym .)
    PARENT          reduce using rule 23 (ValueComp -> GTsym .)
    ANCESTOR        reduce using rule 23 (ValueComp -> GTsym .)
    PRECEDING_SIBLING reduce using rule 23 (ValueComp -> GTsym .)
    PRECEDING       reduce using rule 23 (ValueComp -> GTsym .)
    ANCESTOR_OR_SELF reduce using rule 23 (ValueComp -> GTsym .)
    DOUBLEDOT       reduce using rule 23 (ValueComp -> GTsym .)
    CHILD           reduce using rule 23 (ValueComp -> GTsym .)
    DESCENDANT      reduce using rule 23 (ValueComp -> GTsym .)
    ATTRIBUTE       reduce using rule 23 (ValueComp -> GTsym .)
    SELF            reduce using rule 23 (ValueComp -> GTsym .)
    DESCENDANT_OR_SELF reduce using rule 23 (ValueComp -> GTsym .)
    FOLLOWING_SIBLING reduce using rule 23 (ValueComp -> GTsym .)
    FOLLOWING       reduce using rule 23 (ValueComp -> GTsym .)
    NAMESPACE       reduce using rule 23 (ValueComp -> GTsym .)
    @               reduce using rule 23 (ValueComp -> GTsym .)
    *               reduce using rule 23 (ValueComp -> GTsym .)
    ELEMENT         reduce using rule 23 (ValueComp -> GTsym .)
    NODE            reduce using rule 23 (ValueComp -> GTsym .)


state 80

    (24) ValueComp -> GEsym .

    +               reduce using rule 24 (ValueComp -> GEsym .)
    -               reduce using rule 24 (ValueComp -> GEsym .)
    SLASH           reduce using rule 24 (ValueComp -> GEsym .)
    DOUBLESLASH     reduce using rule 24 (ValueComp -> GEsym .)
    CONTEXT         reduce using rule 24 (ValueComp -> GEsym .)
    STRING          reduce using rule 24 (ValueComp -> GEsym .)
    NUMBER          reduce using rule 24 (ValueComp -> GEsym .)
    $               reduce using rule 24 (ValueComp -> GEsym .)
    (               reduce using rule 24 (ValueComp -> GEsym .)
    EQNAME          reduce using rule 24 (ValueComp -> GEsym .)
    PARENT          reduce using rule 24 (ValueComp -> GEsym .)
    ANCESTOR        reduce using rule 24 (ValueComp -> GEsym .)
    PRECEDING_SIBLING reduce using rule 24 (ValueComp -> GEsym .)
    PRECEDING       reduce using rule 24 (ValueComp -> GEsym .)
    ANCESTOR_OR_SELF reduce using rule 24 (ValueComp -> GEsym .)
    DOUBLEDOT       reduce using rule 24 (ValueComp -> GEsym .)
    CHILD           reduce using rule 24 (ValueComp -> GEsym .)
    DESCENDANT      reduce using rule 24 (ValueComp -> GEsym .)
    ATTRIBUTE       reduce using rule 24 (ValueComp -> GEsym .)
    SELF            reduce using rule 24 (ValueComp -> GEsym .)
    DESCENDANT_OR_SELF reduce using rule 24 (ValueComp -> GEsym .)
    FOLLOWING_SIBLING reduce using rule 24 (ValueComp -> GEsym .)
    FOLLOWING       reduce using rule 24 (ValueComp -> GEsym .)
    NAMESPACE       reduce using rule 24 (ValueComp -> GEsym .)
    @               reduce using rule 24 (ValueComp -> GEsym .)
    *               reduce using rule 24 (ValueComp -> GEsym .)
    ELEMENT         reduce using rule 24 (ValueComp -> GEsym .)
    NODE            reduce using rule 24 (ValueComp -> GEsym .)


state 81

    (25) NodeComp -> IS .

    +               reduce using rule 25 (NodeComp -> IS .)
    -               reduce using rule 25 (NodeComp -> IS .)
    SLASH           reduce using rule 25 (NodeComp -> IS .)
    DOUBLESLASH     reduce using rule 25 (NodeComp -> IS .)
    CONTEXT         reduce using rule 25 (NodeComp -> IS .)
    STRING          reduce using rule 25 (NodeComp -> IS .)
    NUMBER          reduce using rule 25 (NodeComp -> IS .)
    $               reduce using rule 25 (NodeComp -> IS .)
    (               reduce using rule 25 (NodeComp -> IS .)
    EQNAME          reduce using rule 25 (NodeComp -> IS .)
    PARENT          reduce using rule 25 (NodeComp -> IS .)
    ANCESTOR        reduce using rule 25 (NodeComp -> IS .)
    PRECEDING_SIBLING reduce using rule 25 (NodeComp -> IS .)
    PRECEDING       reduce using rule 25 (NodeComp -> IS .)
    ANCESTOR_OR_SELF reduce using rule 25 (NodeComp -> IS .)
    DOUBLEDOT       reduce using rule 25 (NodeComp -> IS .)
    CHILD           reduce using rule 25 (NodeComp -> IS .)
    DESCENDANT      reduce using rule 25 (NodeComp -> IS .)
    ATTRIBUTE       reduce using rule 25 (NodeComp -> IS .)
    SELF            reduce using rule 25 (NodeComp -> IS .)
    DESCENDANT_OR_SELF reduce using rule 25 (NodeComp -> IS .)
    FOLLOWING_SIBLING reduce using rule 25 (NodeComp -> IS .)
    FOLLOWING       reduce using rule 25 (NodeComp -> IS .)
    NAMESPACE       reduce using rule 25 (NodeComp -> IS .)
    @               reduce using rule 25 (NodeComp -> IS .)
    *               reduce using rule 25 (NodeComp -> IS .)
    ELEMENT         reduce using rule 25 (NodeComp -> IS .)
    NODE            reduce using rule 25 (NodeComp -> IS .)


state 82

    (26) AdditiveExpr -> MultiplicativeExpr + . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    MultiplicativeExpr             shift and go to state 135
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 83

    (27) AdditiveExpr -> MultiplicativeExpr - . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    MultiplicativeExpr             shift and go to state 136
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 84

    (40) UnaryExpr -> + ValueExpr .

    INTERSECT       reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    EXCEPT          reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    UNION           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    |               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    *               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    DIV             reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    IDIV            reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    MOD             reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    +               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    -               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    EQstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    NEstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    LTstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    LEstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    GTstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    GEstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    EQsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    NEsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    LTsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    LEsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    GTsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    GEsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    IS              reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    AND             reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    OR              reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    ,               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    $end            reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    )               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    ]               reduce using rule 40 (UnaryExpr -> + ValueExpr .)


state 85

    (41) UnaryExpr -> - ValueExpr .

    INTERSECT       reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    EXCEPT          reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    UNION           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    |               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    *               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    DIV             reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    IDIV            reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    MOD             reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    +               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    -               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    EQstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    NEstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    LTstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    LEstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    GTstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    GEstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    EQsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    NEsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    LTsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    LEsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    GTsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    GEsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    IS              reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    AND             reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    OR              reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    ,               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    $end            reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    )               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    ]               reduce using rule 41 (UnaryExpr -> - ValueExpr .)


state 86

    (29) MultiplicativeExpr -> UnionExpr * . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    UnionExpr                      shift and go to state 137
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 87

    (30) MultiplicativeExpr -> UnionExpr DIV . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    UnionExpr                      shift and go to state 138
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 88

    (31) MultiplicativeExpr -> UnionExpr IDIV . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    UnionExpr                      shift and go to state 139
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 89

    (32) MultiplicativeExpr -> UnionExpr MOD . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    UnionExpr                      shift and go to state 140
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 90

    (34) UnionExpr -> IntersectExceptExpr UNION . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    IntersectExceptExpr            shift and go to state 141
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 91

    (35) UnionExpr -> IntersectExceptExpr | . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    IntersectExceptExpr            shift and go to state 142
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 92

    (37) IntersectExceptExpr -> UnaryExpr INTERSECT . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    UnaryExpr                      shift and go to state 143
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 93

    (38) IntersectExceptExpr -> UnaryExpr EXCEPT . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    UnaryExpr                      shift and go to state 144
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 94

    (43) ValueExpr -> SLASH RelativePathExpr .

    INTERSECT       reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    EXCEPT          reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    UNION           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    |               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    *               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    DIV             reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    IDIV            reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    MOD             reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    +               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    -               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    EQstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    NEstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    LTstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    LEstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    GTstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    GEstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    EQsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    NEsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    LTsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    LEsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    GTsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    GEsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    IS              reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    AND             reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    OR              reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    ,               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    $end            reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    )               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    ]               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)


state 95

    (45) ValueExpr -> DOUBLESLASH RelativePathExpr .

    INTERSECT       reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    EXCEPT          reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    UNION           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    |               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    *               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    DIV             reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    IDIV            reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    MOD             reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    +               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    -               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    EQstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    NEstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    LTstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    LEstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    GTstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    GEstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    EQsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    NEsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    LTsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    LEsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    GTsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    GEsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    IS              reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    AND             reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    OR              reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    ,               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    $end            reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    )               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    ]               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)


state 96

    (49) RelativePathList -> RelativePathList SLASH . StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    StepExpr                       shift and go to state 145
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 97

    (50) RelativePathList -> RelativePathList DOUBLESLASH . StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    StepExpr                       shift and go to state 146
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 98

    (53) PostfixExpr -> PrimaryExpr Predicate .

    SLASH           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    DOUBLESLASH     reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    INTERSECT       reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    EXCEPT          reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    UNION           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    |               reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    *               reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    DIV             reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    IDIV            reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    MOD             reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    +               reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    -               reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    EQstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    NEstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    LTstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    LEstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    GTstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    GEstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    EQsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    NEsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    LTsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    LEsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    GTsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    GEsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    IS              reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    AND             reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    OR              reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    ,               reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    $end            reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    )               reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)
    ]               reduce using rule 53 (PostfixExpr -> PrimaryExpr Predicate .)


state 99

    (60) Predicate -> [ . Expr ]
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    Expr                           shift and go to state 147
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 100

    (55) AxisStep -> ReverseStep PredicateList .
    (58) PredicateList -> PredicateList . Predicate
    (60) Predicate -> . [ Expr ]

    SLASH           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    DOUBLESLASH     reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    INTERSECT       reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    EXCEPT          reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    UNION           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    |               reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    *               reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    DIV             reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    IDIV            reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    MOD             reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    +               reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    -               reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    EQstr           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    NEstr           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    LTstr           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    LEstr           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    GTstr           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    GEstr           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    EQsym           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    NEsym           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    LTsym           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    LEsym           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    GTsym           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    GEsym           reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    IS              reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    AND             reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    OR              reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    ,               reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    $end            reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    )               reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    ]               reduce using rule 55 (AxisStep -> ReverseStep PredicateList .)
    [               shift and go to state 99

    Predicate                      shift and go to state 148

state 101

    (57) PredicateList -> Predicate .

    [               reduce using rule 57 (PredicateList -> Predicate .)
    SLASH           reduce using rule 57 (PredicateList -> Predicate .)
    DOUBLESLASH     reduce using rule 57 (PredicateList -> Predicate .)
    INTERSECT       reduce using rule 57 (PredicateList -> Predicate .)
    EXCEPT          reduce using rule 57 (PredicateList -> Predicate .)
    UNION           reduce using rule 57 (PredicateList -> Predicate .)
    |               reduce using rule 57 (PredicateList -> Predicate .)
    *               reduce using rule 57 (PredicateList -> Predicate .)
    DIV             reduce using rule 57 (PredicateList -> Predicate .)
    IDIV            reduce using rule 57 (PredicateList -> Predicate .)
    MOD             reduce using rule 57 (PredicateList -> Predicate .)
    +               reduce using rule 57 (PredicateList -> Predicate .)
    -               reduce using rule 57 (PredicateList -> Predicate .)
    EQstr           reduce using rule 57 (PredicateList -> Predicate .)
    NEstr           reduce using rule 57 (PredicateList -> Predicate .)
    LTstr           reduce using rule 57 (PredicateList -> Predicate .)
    LEstr           reduce using rule 57 (PredicateList -> Predicate .)
    GTstr           reduce using rule 57 (PredicateList -> Predicate .)
    GEstr           reduce using rule 57 (PredicateList -> Predicate .)
    EQsym           reduce using rule 57 (PredicateList -> Predicate .)
    NEsym           reduce using rule 57 (PredicateList -> Predicate .)
    LTsym           reduce using rule 57 (PredicateList -> Predicate .)
    LEsym           reduce using rule 57 (PredicateList -> Predicate .)
    GTsym           reduce using rule 57 (PredicateList -> Predicate .)
    GEsym           reduce using rule 57 (PredicateList -> Predicate .)
    IS              reduce using rule 57 (PredicateList -> Predicate .)
    AND             reduce using rule 57 (PredicateList -> Predicate .)
    OR              reduce using rule 57 (PredicateList -> Predicate .)
    ,               reduce using rule 57 (PredicateList -> Predicate .)
    $end            reduce using rule 57 (PredicateList -> Predicate .)
    )               reduce using rule 57 (PredicateList -> Predicate .)
    ]               reduce using rule 57 (PredicateList -> Predicate .)


state 102

    (56) AxisStep -> ForwardStep PredicateList .
    (58) PredicateList -> PredicateList . Predicate
    (60) Predicate -> . [ Expr ]

    SLASH           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    DOUBLESLASH     reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    INTERSECT       reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    EXCEPT          reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    UNION           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    |               reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    *               reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    DIV             reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    IDIV            reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    MOD             reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    +               reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    -               reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    EQstr           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    NEstr           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    LTstr           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    LEstr           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    GTstr           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    GEstr           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    EQsym           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    NEsym           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    LTsym           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    LEsym           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    GTsym           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    GEsym           reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    IS              reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    AND             reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    OR              reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    ,               reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    $end            reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    )               reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    ]               reduce using rule 56 (AxisStep -> ForwardStep PredicateList .)
    [               shift and go to state 99

    Predicate                      shift and go to state 148

state 103

    (61) ReverseStep -> ReverseAxis NodeTest .

    [               reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    SLASH           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    DOUBLESLASH     reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    INTERSECT       reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    EXCEPT          reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    UNION           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    |               reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    *               reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    DIV             reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    IDIV            reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    MOD             reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    +               reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    -               reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    EQstr           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    NEstr           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    LTstr           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    LEstr           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    GTstr           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    GEstr           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    EQsym           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    NEsym           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    LTsym           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    LEsym           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    GTsym           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    GEsym           reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    IS              reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    AND             reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    OR              reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    ,               reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    $end            reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    )               reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)
    ]               reduce using rule 61 (ReverseStep -> ReverseAxis NodeTest .)


state 104

    (97) NameTest -> EQNAME .

    [               reduce using rule 97 (NameTest -> EQNAME .)
    SLASH           reduce using rule 97 (NameTest -> EQNAME .)
    DOUBLESLASH     reduce using rule 97 (NameTest -> EQNAME .)
    INTERSECT       reduce using rule 97 (NameTest -> EQNAME .)
    EXCEPT          reduce using rule 97 (NameTest -> EQNAME .)
    UNION           reduce using rule 97 (NameTest -> EQNAME .)
    |               reduce using rule 97 (NameTest -> EQNAME .)
    *               reduce using rule 97 (NameTest -> EQNAME .)
    DIV             reduce using rule 97 (NameTest -> EQNAME .)
    IDIV            reduce using rule 97 (NameTest -> EQNAME .)
    MOD             reduce using rule 97 (NameTest -> EQNAME .)
    +               reduce using rule 97 (NameTest -> EQNAME .)
    -               reduce using rule 97 (NameTest -> EQNAME .)
    EQstr           reduce using rule 97 (NameTest -> EQNAME .)
    NEstr           reduce using rule 97 (NameTest -> EQNAME .)
    LTstr           reduce using rule 97 (NameTest -> EQNAME .)
    LEstr           reduce using rule 97 (NameTest -> EQNAME .)
    GTstr           reduce using rule 97 (NameTest -> EQNAME .)
    GEstr           reduce using rule 97 (NameTest -> EQNAME .)
    EQsym           reduce using rule 97 (NameTest -> EQNAME .)
    NEsym           reduce using rule 97 (NameTest -> EQNAME .)
    LTsym           reduce using rule 97 (NameTest -> EQNAME .)
    LEsym           reduce using rule 97 (NameTest -> EQNAME .)
    GTsym           reduce using rule 97 (NameTest -> EQNAME .)
    GEsym           reduce using rule 97 (NameTest -> EQNAME .)
    IS              reduce using rule 97 (NameTest -> EQNAME .)
    AND             reduce using rule 97 (NameTest -> EQNAME .)
    OR              reduce using rule 97 (NameTest -> EQNAME .)
    ,               reduce using rule 97 (NameTest -> EQNAME .)
    $end            reduce using rule 97 (NameTest -> EQNAME .)
    )               reduce using rule 97 (NameTest -> EQNAME .)
    ]               reduce using rule 97 (NameTest -> EQNAME .)


state 105

    (91) AttributeTest -> ATTRIBUTE . ( AttributeNameOrWildcard )
    (92) AttributeTest -> ATTRIBUTE . ( )

    (               shift and go to state 121


state 106

    (69) ForwardStep -> ForwardAxis NodeTest .

    [               reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    SLASH           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    DOUBLESLASH     reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    INTERSECT       reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    EXCEPT          reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    UNION           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    |               reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    *               reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    DIV             reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    IDIV            reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    MOD             reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    +               reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    -               reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    EQstr           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    NEstr           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    LTstr           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    LEstr           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    GTstr           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    GEstr           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    EQsym           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    NEsym           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    LTsym           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    LEsym           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    GTsym           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    GEsym           reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    IS              reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    AND             reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    OR              reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    ,               reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    $end            reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    )               reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)
    ]               reduce using rule 69 (ForwardStep -> ForwardAxis NodeTest .)


state 107

    (106) VarRef -> $ VarName .

    [               reduce using rule 106 (VarRef -> $ VarName .)
    SLASH           reduce using rule 106 (VarRef -> $ VarName .)
    DOUBLESLASH     reduce using rule 106 (VarRef -> $ VarName .)
    INTERSECT       reduce using rule 106 (VarRef -> $ VarName .)
    EXCEPT          reduce using rule 106 (VarRef -> $ VarName .)
    UNION           reduce using rule 106 (VarRef -> $ VarName .)
    |               reduce using rule 106 (VarRef -> $ VarName .)
    *               reduce using rule 106 (VarRef -> $ VarName .)
    DIV             reduce using rule 106 (VarRef -> $ VarName .)
    IDIV            reduce using rule 106 (VarRef -> $ VarName .)
    MOD             reduce using rule 106 (VarRef -> $ VarName .)
    +               reduce using rule 106 (VarRef -> $ VarName .)
    -               reduce using rule 106 (VarRef -> $ VarName .)
    EQstr           reduce using rule 106 (VarRef -> $ VarName .)
    NEstr           reduce using rule 106 (VarRef -> $ VarName .)
    LTstr           reduce using rule 106 (VarRef -> $ VarName .)
    LEstr           reduce using rule 106 (VarRef -> $ VarName .)
    GTstr           reduce using rule 106 (VarRef -> $ VarName .)
    GEstr           reduce using rule 106 (VarRef -> $ VarName .)
    EQsym           reduce using rule 106 (VarRef -> $ VarName .)
    NEsym           reduce using rule 106 (VarRef -> $ VarName .)
    LTsym           reduce using rule 106 (VarRef -> $ VarName .)
    LEsym           reduce using rule 106 (VarRef -> $ VarName .)
    GTsym           reduce using rule 106 (VarRef -> $ VarName .)
    GEsym           reduce using rule 106 (VarRef -> $ VarName .)
    IS              reduce using rule 106 (VarRef -> $ VarName .)
    AND             reduce using rule 106 (VarRef -> $ VarName .)
    OR              reduce using rule 106 (VarRef -> $ VarName .)
    ,               reduce using rule 106 (VarRef -> $ VarName .)
    $end            reduce using rule 106 (VarRef -> $ VarName .)
    )               reduce using rule 106 (VarRef -> $ VarName .)
    ]               reduce using rule 106 (VarRef -> $ VarName .)


state 108

    (107) VarName -> EQNAME .

    [               reduce using rule 107 (VarName -> EQNAME .)
    SLASH           reduce using rule 107 (VarName -> EQNAME .)
    DOUBLESLASH     reduce using rule 107 (VarName -> EQNAME .)
    INTERSECT       reduce using rule 107 (VarName -> EQNAME .)
    EXCEPT          reduce using rule 107 (VarName -> EQNAME .)
    UNION           reduce using rule 107 (VarName -> EQNAME .)
    |               reduce using rule 107 (VarName -> EQNAME .)
    *               reduce using rule 107 (VarName -> EQNAME .)
    DIV             reduce using rule 107 (VarName -> EQNAME .)
    IDIV            reduce using rule 107 (VarName -> EQNAME .)
    MOD             reduce using rule 107 (VarName -> EQNAME .)
    +               reduce using rule 107 (VarName -> EQNAME .)
    -               reduce using rule 107 (VarName -> EQNAME .)
    EQstr           reduce using rule 107 (VarName -> EQNAME .)
    NEstr           reduce using rule 107 (VarName -> EQNAME .)
    LTstr           reduce using rule 107 (VarName -> EQNAME .)
    LEstr           reduce using rule 107 (VarName -> EQNAME .)
    GTstr           reduce using rule 107 (VarName -> EQNAME .)
    GEstr           reduce using rule 107 (VarName -> EQNAME .)
    EQsym           reduce using rule 107 (VarName -> EQNAME .)
    NEsym           reduce using rule 107 (VarName -> EQNAME .)
    LTsym           reduce using rule 107 (VarName -> EQNAME .)
    LEsym           reduce using rule 107 (VarName -> EQNAME .)
    GTsym           reduce using rule 107 (VarName -> EQNAME .)
    GEsym           reduce using rule 107 (VarName -> EQNAME .)
    IS              reduce using rule 107 (VarName -> EQNAME .)
    AND             reduce using rule 107 (VarName -> EQNAME .)
    OR              reduce using rule 107 (VarName -> EQNAME .)
    ,               reduce using rule 107 (VarName -> EQNAME .)
    $end            reduce using rule 107 (VarName -> EQNAME .)
    )               reduce using rule 107 (VarName -> EQNAME .)
    ]               reduce using rule 107 (VarName -> EQNAME .)


state 109

    (108) ParenthesizedExpr -> ( ) .

    [               reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    SLASH           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    DOUBLESLASH     reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    INTERSECT       reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    EXCEPT          reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    UNION           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    |               reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    *               reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    DIV             reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    IDIV            reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    MOD             reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    +               reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    -               reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    EQstr           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    NEstr           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    LTstr           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    LEstr           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    GTstr           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    GEstr           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    EQsym           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    NEsym           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    LTsym           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    LEsym           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    GTsym           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    GEsym           reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    IS              reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    AND             reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    OR              reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    ,               reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    $end            reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    )               reduce using rule 108 (ParenthesizedExpr -> ( ) .)
    ]               reduce using rule 108 (ParenthesizedExpr -> ( ) .)


state 110

    (109) ParenthesizedExpr -> ( Expr . )

    )               shift and go to state 149


state 111

    (110) FunctionCall -> EQNAME ArgumentList .

    [               reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    SLASH           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    DOUBLESLASH     reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    INTERSECT       reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    EXCEPT          reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    UNION           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    |               reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    *               reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    DIV             reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    IDIV            reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    MOD             reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    +               reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    -               reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    EQstr           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    NEstr           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    LTstr           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    LEstr           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    GTstr           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    GEstr           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    EQsym           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    NEsym           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    LTsym           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    LEsym           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    GTsym           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    GEsym           reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    IS              reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    AND             reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    OR              reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    ,               reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    $end            reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    )               reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)
    ]               reduce using rule 110 (FunctionCall -> EQNAME ArgumentList .)


state 112

    (111) ArgumentList -> ( . )
    (112) ArgumentList -> ( . ArgumentExpr )
    (113) ArgumentExpr -> . Argument , Argument
    (114) ArgumentExpr -> . Argument
    (115) Argument -> . Expr
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    )               shift and go to state 150
    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    ArgumentExpr                   shift and go to state 151
    Argument                       shift and go to state 152
    Expr                           shift and go to state 153
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 113

    (63) ReverseAxis -> PARENT AXIS .

    EQNAME          reduce using rule 63 (ReverseAxis -> PARENT AXIS .)
    *               reduce using rule 63 (ReverseAxis -> PARENT AXIS .)
    ELEMENT         reduce using rule 63 (ReverseAxis -> PARENT AXIS .)
    ATTRIBUTE       reduce using rule 63 (ReverseAxis -> PARENT AXIS .)
    NODE            reduce using rule 63 (ReverseAxis -> PARENT AXIS .)


state 114

    (64) ReverseAxis -> ANCESTOR AXIS .

    EQNAME          reduce using rule 64 (ReverseAxis -> ANCESTOR AXIS .)
    *               reduce using rule 64 (ReverseAxis -> ANCESTOR AXIS .)
    ELEMENT         reduce using rule 64 (ReverseAxis -> ANCESTOR AXIS .)
    ATTRIBUTE       reduce using rule 64 (ReverseAxis -> ANCESTOR AXIS .)
    NODE            reduce using rule 64 (ReverseAxis -> ANCESTOR AXIS .)


state 115

    (65) ReverseAxis -> PRECEDING_SIBLING AXIS .

    EQNAME          reduce using rule 65 (ReverseAxis -> PRECEDING_SIBLING AXIS .)
    *               reduce using rule 65 (ReverseAxis -> PRECEDING_SIBLING AXIS .)
    ELEMENT         reduce using rule 65 (ReverseAxis -> PRECEDING_SIBLING AXIS .)
    ATTRIBUTE       reduce using rule 65 (ReverseAxis -> PRECEDING_SIBLING AXIS .)
    NODE            reduce using rule 65 (ReverseAxis -> PRECEDING_SIBLING AXIS .)


state 116

    (66) ReverseAxis -> PRECEDING AXIS .

    EQNAME          reduce using rule 66 (ReverseAxis -> PRECEDING AXIS .)
    *               reduce using rule 66 (ReverseAxis -> PRECEDING AXIS .)
    ELEMENT         reduce using rule 66 (ReverseAxis -> PRECEDING AXIS .)
    ATTRIBUTE       reduce using rule 66 (ReverseAxis -> PRECEDING AXIS .)
    NODE            reduce using rule 66 (ReverseAxis -> PRECEDING AXIS .)


state 117

    (67) ReverseAxis -> ANCESTOR_OR_SELF AXIS .

    EQNAME          reduce using rule 67 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)
    *               reduce using rule 67 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)
    ELEMENT         reduce using rule 67 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)
    ATTRIBUTE       reduce using rule 67 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)
    NODE            reduce using rule 67 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)


state 118

    (71) ForwardAxis -> CHILD AXIS .

    EQNAME          reduce using rule 71 (ForwardAxis -> CHILD AXIS .)
    *               reduce using rule 71 (ForwardAxis -> CHILD AXIS .)
    ELEMENT         reduce using rule 71 (ForwardAxis -> CHILD AXIS .)
    ATTRIBUTE       reduce using rule 71 (ForwardAxis -> CHILD AXIS .)
    NODE            reduce using rule 71 (ForwardAxis -> CHILD AXIS .)


state 119

    (72) ForwardAxis -> DESCENDANT AXIS .

    EQNAME          reduce using rule 72 (ForwardAxis -> DESCENDANT AXIS .)
    *               reduce using rule 72 (ForwardAxis -> DESCENDANT AXIS .)
    ELEMENT         reduce using rule 72 (ForwardAxis -> DESCENDANT AXIS .)
    ATTRIBUTE       reduce using rule 72 (ForwardAxis -> DESCENDANT AXIS .)
    NODE            reduce using rule 72 (ForwardAxis -> DESCENDANT AXIS .)


state 120

    (73) ForwardAxis -> ATTRIBUTE AXIS .

    EQNAME          reduce using rule 73 (ForwardAxis -> ATTRIBUTE AXIS .)
    *               reduce using rule 73 (ForwardAxis -> ATTRIBUTE AXIS .)
    ELEMENT         reduce using rule 73 (ForwardAxis -> ATTRIBUTE AXIS .)
    ATTRIBUTE       reduce using rule 73 (ForwardAxis -> ATTRIBUTE AXIS .)
    NODE            reduce using rule 73 (ForwardAxis -> ATTRIBUTE AXIS .)


state 121

    (91) AttributeTest -> ATTRIBUTE ( . AttributeNameOrWildcard )
    (92) AttributeTest -> ATTRIBUTE ( . )
    (93) AttributeNameOrWildcard -> . AttributeName
    (94) AttributeNameOrWildcard -> . *
    (95) AttributeName -> . EQNAME

    )               shift and go to state 155
    *               shift and go to state 157
    EQNAME          shift and go to state 158

    AttributeNameOrWildcard        shift and go to state 154
    AttributeName                  shift and go to state 156

state 122

    (74) ForwardAxis -> SELF AXIS .

    EQNAME          reduce using rule 74 (ForwardAxis -> SELF AXIS .)
    *               reduce using rule 74 (ForwardAxis -> SELF AXIS .)
    ELEMENT         reduce using rule 74 (ForwardAxis -> SELF AXIS .)
    ATTRIBUTE       reduce using rule 74 (ForwardAxis -> SELF AXIS .)
    NODE            reduce using rule 74 (ForwardAxis -> SELF AXIS .)


state 123

    (75) ForwardAxis -> DESCENDANT_OR_SELF AXIS .

    EQNAME          reduce using rule 75 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)
    *               reduce using rule 75 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)
    ELEMENT         reduce using rule 75 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)
    ATTRIBUTE       reduce using rule 75 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)
    NODE            reduce using rule 75 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)


state 124

    (76) ForwardAxis -> FOLLOWING_SIBLING AXIS .

    EQNAME          reduce using rule 76 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)
    *               reduce using rule 76 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)
    ELEMENT         reduce using rule 76 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)
    ATTRIBUTE       reduce using rule 76 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)
    NODE            reduce using rule 76 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)


state 125

    (77) ForwardAxis -> FOLLOWING AXIS .

    EQNAME          reduce using rule 77 (ForwardAxis -> FOLLOWING AXIS .)
    *               reduce using rule 77 (ForwardAxis -> FOLLOWING AXIS .)
    ELEMENT         reduce using rule 77 (ForwardAxis -> FOLLOWING AXIS .)
    ATTRIBUTE       reduce using rule 77 (ForwardAxis -> FOLLOWING AXIS .)
    NODE            reduce using rule 77 (ForwardAxis -> FOLLOWING AXIS .)


state 126

    (78) ForwardAxis -> NAMESPACE AXIS .

    EQNAME          reduce using rule 78 (ForwardAxis -> NAMESPACE AXIS .)
    *               reduce using rule 78 (ForwardAxis -> NAMESPACE AXIS .)
    ELEMENT         reduce using rule 78 (ForwardAxis -> NAMESPACE AXIS .)
    ATTRIBUTE       reduce using rule 78 (ForwardAxis -> NAMESPACE AXIS .)
    NODE            reduce using rule 78 (ForwardAxis -> NAMESPACE AXIS .)


state 127

    (79) AbbrevForwardStep -> @ NodeTest .

    [               reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    SLASH           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    DOUBLESLASH     reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    INTERSECT       reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    EXCEPT          reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    UNION           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    |               reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    *               reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    DIV             reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    IDIV            reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    MOD             reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    +               reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    -               reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    EQstr           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    NEstr           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    LTstr           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    LEstr           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    GTstr           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    GEstr           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    EQsym           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    NEsym           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    LTsym           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    LEsym           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    GTsym           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    GEsym           reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    IS              reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    AND             reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    OR              reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    ,               reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    $end            reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    )               reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)
    ]               reduce using rule 79 (AbbrevForwardStep -> @ NodeTest .)


state 128

    (86) ElementTest -> ELEMENT ( . ElementNameOrWildcard )
    (87) ElementTest -> ELEMENT ( . )
    (88) ElementNameOrWildcard -> . ElementName
    (89) ElementNameOrWildcard -> . *
    (90) ElementName -> . EQNAME

    )               shift and go to state 160
    *               shift and go to state 162
    EQNAME          shift and go to state 163

    ElementNameOrWildcard          shift and go to state 159
    ElementName                    shift and go to state 161

state 129

    (96) AnyKindTest -> NODE ( . )

    )               shift and go to state 164


state 130

    (4) ExprList -> ExprList , ExprSingle .

    ,               reduce using rule 4 (ExprList -> ExprList , ExprSingle .)
    $end            reduce using rule 4 (ExprList -> ExprList , ExprSingle .)
    )               reduce using rule 4 (ExprList -> ExprList , ExprSingle .)
    ]               reduce using rule 4 (ExprList -> ExprList , ExprSingle .)


state 131

    (6) OrExpr -> AndExpr OR AndExpr .

    ,               reduce using rule 6 (OrExpr -> AndExpr OR AndExpr .)
    $end            reduce using rule 6 (OrExpr -> AndExpr OR AndExpr .)
    )               reduce using rule 6 (OrExpr -> AndExpr OR AndExpr .)
    ]               reduce using rule 6 (OrExpr -> AndExpr OR AndExpr .)


state 132

    (8) AndExpr -> ComparisonExpr AND ComparisonExpr .

    OR              reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)
    ,               reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)
    $end            reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)
    )               reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)
    ]               reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)


state 133

    (10) ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .

    AND             reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    OR              reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    ,               reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    $end            reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    )               reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    ]               reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)


state 134

    (11) ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .

    AND             reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    OR              reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    ,               reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    $end            reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    )               reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    ]               reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)


state 135

    (26) AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .

    EQstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    NEstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    LTstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    LEstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    GTstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    GEstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    EQsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    NEsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    LTsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    LEsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    GTsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    GEsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    IS              reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    AND             reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    OR              reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    ,               reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    $end            reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    )               reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    ]               reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)


state 136

    (27) AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .

    EQstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    NEstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    LTstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    LEstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    GTstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    GEstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    EQsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    NEsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    LTsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    LEsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    GTsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    GEsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    IS              reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    AND             reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    OR              reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    ,               reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    $end            reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    )               reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    ]               reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)


state 137

    (29) MultiplicativeExpr -> UnionExpr * UnionExpr .

    +               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    -               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    EQstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    NEstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    LTstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    LEstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    GTstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    GEstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    EQsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    NEsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    LTsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    LEsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    GTsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    GEsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    IS              reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    AND             reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    OR              reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    ,               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    $end            reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    )               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    ]               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)


state 138

    (30) MultiplicativeExpr -> UnionExpr DIV UnionExpr .

    +               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    -               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    EQstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    NEstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    LTstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    LEstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    GTstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    GEstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    EQsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    NEsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    LTsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    LEsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    GTsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    GEsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    IS              reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    AND             reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    OR              reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    ,               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    $end            reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    )               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    ]               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)


state 139

    (31) MultiplicativeExpr -> UnionExpr IDIV UnionExpr .

    +               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    -               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    EQstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    NEstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    LTstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    LEstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    GTstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    GEstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    EQsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    NEsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    LTsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    LEsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    GTsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    GEsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    IS              reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    AND             reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    OR              reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    ,               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    $end            reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    )               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    ]               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)


state 140

    (32) MultiplicativeExpr -> UnionExpr MOD UnionExpr .

    +               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    -               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    EQstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    NEstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    LTstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    LEstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    GTstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    GEstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    EQsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    NEsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    LTsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    LEsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    GTsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    GEsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    IS              reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    AND             reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    OR              reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    ,               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    $end            reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    )               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    ]               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)


state 141

    (34) UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .

    *               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    DIV             reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    IDIV            reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    MOD             reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    +               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    -               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    EQstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    NEstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    LTstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    LEstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    GTstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    GEstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    EQsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    NEsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    LTsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    LEsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    GTsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    GEsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    IS              reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    AND             reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    OR              reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    ,               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    $end            reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    )               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    ]               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)


state 142

    (35) UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .

    *               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    DIV             reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    IDIV            reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    MOD             reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    +               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    -               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    EQstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    NEstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    LTstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    LEstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    GTstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    GEstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    EQsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    NEsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    LTsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    LEsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    GTsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    GEsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    IS              reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    AND             reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    OR              reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    ,               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    $end            reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    )               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    ]               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)


state 143

    (37) IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .

    UNION           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    |               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    *               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    DIV             reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    IDIV            reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    MOD             reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    +               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    -               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    EQstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    NEstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    LTstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    LEstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    GTstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    GEstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    EQsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    NEsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    LTsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    LEsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    GTsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    GEsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    IS              reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    AND             reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    OR              reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    ,               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    $end            reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    )               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    ]               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)


state 144

    (38) IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .

    UNION           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    |               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    *               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    DIV             reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    IDIV            reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    MOD             reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    +               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    -               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    EQstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    NEstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    LTstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    LEstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    GTstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    GEstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    EQsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    NEsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    LTsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    LEsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    GTsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    GEsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    IS              reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    AND             reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    OR              reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    ,               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    $end            reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    )               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    ]               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)


state 145

    (49) RelativePathList -> RelativePathList SLASH StepExpr .

    SLASH           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    DOUBLESLASH     reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    INTERSECT       reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    EXCEPT          reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    UNION           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    |               reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    *               reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    DIV             reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    IDIV            reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    MOD             reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    +               reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    -               reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    EQstr           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    NEstr           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    LTstr           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    LEstr           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    GTstr           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    GEstr           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    EQsym           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    NEsym           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    LTsym           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    LEsym           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    GTsym           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    GEsym           reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    IS              reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    AND             reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    OR              reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    ,               reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    $end            reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    )               reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)
    ]               reduce using rule 49 (RelativePathList -> RelativePathList SLASH StepExpr .)


state 146

    (50) RelativePathList -> RelativePathList DOUBLESLASH StepExpr .

    SLASH           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    DOUBLESLASH     reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    INTERSECT       reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    EXCEPT          reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    UNION           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    |               reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    *               reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    DIV             reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    IDIV            reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    MOD             reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    +               reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    -               reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    EQstr           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    NEstr           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    LTstr           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    LEstr           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    GTstr           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    GEstr           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    EQsym           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    NEsym           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    LTsym           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    LEsym           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    GTsym           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    GEsym           reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    IS              reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    AND             reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    OR              reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    ,               reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    $end            reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    )               reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)
    ]               reduce using rule 50 (RelativePathList -> RelativePathList DOUBLESLASH StepExpr .)


state 147

    (60) Predicate -> [ Expr . ]

    ]               shift and go to state 165


state 148

    (58) PredicateList -> PredicateList Predicate .

    [               reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    SLASH           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    DOUBLESLASH     reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    INTERSECT       reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    EXCEPT          reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    UNION           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    |               reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    *               reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    DIV             reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    IDIV            reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    MOD             reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    +               reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    -               reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    EQstr           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    NEstr           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    LTstr           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    LEstr           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    GTstr           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    GEstr           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    EQsym           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    NEsym           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    LTsym           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    LEsym           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    GTsym           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    GEsym           reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    IS              reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    AND             reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    OR              reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    ,               reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    $end            reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    )               reduce using rule 58 (PredicateList -> PredicateList Predicate .)
    ]               reduce using rule 58 (PredicateList -> PredicateList Predicate .)


state 149

    (109) ParenthesizedExpr -> ( Expr ) .

    [               reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    SLASH           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    DOUBLESLASH     reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    INTERSECT       reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    EXCEPT          reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    UNION           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    |               reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    *               reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    DIV             reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    IDIV            reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    MOD             reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    +               reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    -               reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    EQstr           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    NEstr           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    LTstr           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    LEstr           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    GTstr           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    GEstr           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    EQsym           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    NEsym           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    LTsym           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    LEsym           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    GTsym           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    GEsym           reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    IS              reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    AND             reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    OR              reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    ,               reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    $end            reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    )               reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)
    ]               reduce using rule 109 (ParenthesizedExpr -> ( Expr ) .)


state 150

    (111) ArgumentList -> ( ) .

    [               reduce using rule 111 (ArgumentList -> ( ) .)
    SLASH           reduce using rule 111 (ArgumentList -> ( ) .)
    DOUBLESLASH     reduce using rule 111 (ArgumentList -> ( ) .)
    INTERSECT       reduce using rule 111 (ArgumentList -> ( ) .)
    EXCEPT          reduce using rule 111 (ArgumentList -> ( ) .)
    UNION           reduce using rule 111 (ArgumentList -> ( ) .)
    |               reduce using rule 111 (ArgumentList -> ( ) .)
    *               reduce using rule 111 (ArgumentList -> ( ) .)
    DIV             reduce using rule 111 (ArgumentList -> ( ) .)
    IDIV            reduce using rule 111 (ArgumentList -> ( ) .)
    MOD             reduce using rule 111 (ArgumentList -> ( ) .)
    +               reduce using rule 111 (ArgumentList -> ( ) .)
    -               reduce using rule 111 (ArgumentList -> ( ) .)
    EQstr           reduce using rule 111 (ArgumentList -> ( ) .)
    NEstr           reduce using rule 111 (ArgumentList -> ( ) .)
    LTstr           reduce using rule 111 (ArgumentList -> ( ) .)
    LEstr           reduce using rule 111 (ArgumentList -> ( ) .)
    GTstr           reduce using rule 111 (ArgumentList -> ( ) .)
    GEstr           reduce using rule 111 (ArgumentList -> ( ) .)
    EQsym           reduce using rule 111 (ArgumentList -> ( ) .)
    NEsym           reduce using rule 111 (ArgumentList -> ( ) .)
    LTsym           reduce using rule 111 (ArgumentList -> ( ) .)
    LEsym           reduce using rule 111 (ArgumentList -> ( ) .)
    GTsym           reduce using rule 111 (ArgumentList -> ( ) .)
    GEsym           reduce using rule 111 (ArgumentList -> ( ) .)
    IS              reduce using rule 111 (ArgumentList -> ( ) .)
    AND             reduce using rule 111 (ArgumentList -> ( ) .)
    OR              reduce using rule 111 (ArgumentList -> ( ) .)
    ,               reduce using rule 111 (ArgumentList -> ( ) .)
    $end            reduce using rule 111 (ArgumentList -> ( ) .)
    )               reduce using rule 111 (ArgumentList -> ( ) .)
    ]               reduce using rule 111 (ArgumentList -> ( ) .)


state 151

    (112) ArgumentList -> ( ArgumentExpr . )

    )               shift and go to state 166


state 152

    (113) ArgumentExpr -> Argument . , Argument
    (114) ArgumentExpr -> Argument .

    ,               shift and go to state 167
    )               reduce using rule 114 (ArgumentExpr -> Argument .)


state 153

    (115) Argument -> Expr .

    ,               reduce using rule 115 (Argument -> Expr .)
    )               reduce using rule 115 (Argument -> Expr .)


state 154

    (91) AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard . )

    )               shift and go to state 168


state 155

    (92) AttributeTest -> ATTRIBUTE ( ) .

    [               reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    SLASH           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    DOUBLESLASH     reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    INTERSECT       reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    EXCEPT          reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    UNION           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    |               reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    *               reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    DIV             reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    IDIV            reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    MOD             reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    +               reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    -               reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    EQstr           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    NEstr           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    LTstr           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    LEstr           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    GTstr           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    GEstr           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    EQsym           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    NEsym           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    LTsym           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    LEsym           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    GTsym           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    GEsym           reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    IS              reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    AND             reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    OR              reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    ,               reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    $end            reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    )               reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)
    ]               reduce using rule 92 (AttributeTest -> ATTRIBUTE ( ) .)


state 156

    (93) AttributeNameOrWildcard -> AttributeName .

    )               reduce using rule 93 (AttributeNameOrWildcard -> AttributeName .)


state 157

    (94) AttributeNameOrWildcard -> * .

    )               reduce using rule 94 (AttributeNameOrWildcard -> * .)


state 158

    (95) AttributeName -> EQNAME .

    )               reduce using rule 95 (AttributeName -> EQNAME .)


state 159

    (86) ElementTest -> ELEMENT ( ElementNameOrWildcard . )

    )               shift and go to state 169


state 160

    (87) ElementTest -> ELEMENT ( ) .

    [               reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    SLASH           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    DOUBLESLASH     reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    INTERSECT       reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    EXCEPT          reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    UNION           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    |               reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    *               reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    DIV             reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    IDIV            reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    MOD             reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    +               reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    -               reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    EQstr           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    NEstr           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    LTstr           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    LEstr           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    GTstr           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    GEstr           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    EQsym           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    NEsym           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    LTsym           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    LEsym           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    GTsym           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    GEsym           reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    IS              reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    AND             reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    OR              reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    ,               reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    $end            reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    )               reduce using rule 87 (ElementTest -> ELEMENT ( ) .)
    ]               reduce using rule 87 (ElementTest -> ELEMENT ( ) .)


state 161

    (88) ElementNameOrWildcard -> ElementName .

    )               reduce using rule 88 (ElementNameOrWildcard -> ElementName .)


state 162

    (89) ElementNameOrWildcard -> * .

    )               reduce using rule 89 (ElementNameOrWildcard -> * .)


state 163

    (90) ElementName -> EQNAME .

    )               reduce using rule 90 (ElementName -> EQNAME .)


state 164

    (96) AnyKindTest -> NODE ( ) .

    [               reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    SLASH           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    DOUBLESLASH     reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    INTERSECT       reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    EXCEPT          reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    UNION           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    |               reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    *               reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    DIV             reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    IDIV            reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    MOD             reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    +               reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    -               reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    EQstr           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    NEstr           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    LTstr           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    LEstr           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    GTstr           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    GEstr           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    EQsym           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    NEsym           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    LTsym           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    LEsym           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    GTsym           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    GEsym           reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    IS              reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    AND             reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    OR              reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    ,               reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    $end            reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    )               reduce using rule 96 (AnyKindTest -> NODE ( ) .)
    ]               reduce using rule 96 (AnyKindTest -> NODE ( ) .)


state 165

    (60) Predicate -> [ Expr ] .

    SLASH           reduce using rule 60 (Predicate -> [ Expr ] .)
    DOUBLESLASH     reduce using rule 60 (Predicate -> [ Expr ] .)
    INTERSECT       reduce using rule 60 (Predicate -> [ Expr ] .)
    EXCEPT          reduce using rule 60 (Predicate -> [ Expr ] .)
    UNION           reduce using rule 60 (Predicate -> [ Expr ] .)
    |               reduce using rule 60 (Predicate -> [ Expr ] .)
    *               reduce using rule 60 (Predicate -> [ Expr ] .)
    DIV             reduce using rule 60 (Predicate -> [ Expr ] .)
    IDIV            reduce using rule 60 (Predicate -> [ Expr ] .)
    MOD             reduce using rule 60 (Predicate -> [ Expr ] .)
    +               reduce using rule 60 (Predicate -> [ Expr ] .)
    -               reduce using rule 60 (Predicate -> [ Expr ] .)
    EQstr           reduce using rule 60 (Predicate -> [ Expr ] .)
    NEstr           reduce using rule 60 (Predicate -> [ Expr ] .)
    LTstr           reduce using rule 60 (Predicate -> [ Expr ] .)
    LEstr           reduce using rule 60 (Predicate -> [ Expr ] .)
    GTstr           reduce using rule 60 (Predicate -> [ Expr ] .)
    GEstr           reduce using rule 60 (Predicate -> [ Expr ] .)
    EQsym           reduce using rule 60 (Predicate -> [ Expr ] .)
    NEsym           reduce using rule 60 (Predicate -> [ Expr ] .)
    LTsym           reduce using rule 60 (Predicate -> [ Expr ] .)
    LEsym           reduce using rule 60 (Predicate -> [ Expr ] .)
    GTsym           reduce using rule 60 (Predicate -> [ Expr ] .)
    GEsym           reduce using rule 60 (Predicate -> [ Expr ] .)
    IS              reduce using rule 60 (Predicate -> [ Expr ] .)
    AND             reduce using rule 60 (Predicate -> [ Expr ] .)
    OR              reduce using rule 60 (Predicate -> [ Expr ] .)
    ,               reduce using rule 60 (Predicate -> [ Expr ] .)
    $end            reduce using rule 60 (Predicate -> [ Expr ] .)
    )               reduce using rule 60 (Predicate -> [ Expr ] .)
    ]               reduce using rule 60 (Predicate -> [ Expr ] .)
    [               reduce using rule 60 (Predicate -> [ Expr ] .)


state 166

    (112) ArgumentList -> ( ArgumentExpr ) .

    [               reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    SLASH           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    DOUBLESLASH     reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    INTERSECT       reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    EXCEPT          reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    UNION           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    |               reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    *               reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    DIV             reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    IDIV            reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    MOD             reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    +               reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    -               reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    EQstr           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    NEstr           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    LTstr           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    LEstr           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    GTstr           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    GEstr           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    EQsym           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    NEsym           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    LTsym           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    LEsym           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    GTsym           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    GEsym           reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    IS              reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    AND             reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    OR              reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    ,               reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    $end            reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    )               reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)
    ]               reduce using rule 112 (ArgumentList -> ( ArgumentExpr ) .)


state 167

    (113) ArgumentExpr -> Argument , . Argument
    (115) Argument -> . Expr
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . RelativePathList
    (48) RelativePathList -> . StepExpr
    (49) RelativePathList -> . RelativePathList SLASH StepExpr
    (50) RelativePathList -> . RelativePathList DOUBLESLASH StepExpr
    (51) StepExpr -> . PostfixExpr
    (52) StepExpr -> . AxisStep
    (53) PostfixExpr -> . PrimaryExpr Predicate
    (54) PostfixExpr -> . PrimaryExpr
    (55) AxisStep -> . ReverseStep PredicateList
    (56) AxisStep -> . ForwardStep PredicateList
    (99) PrimaryExpr -> . Literal
    (100) PrimaryExpr -> . VarRef
    (101) PrimaryExpr -> . ParenthesizedExpr
    (102) PrimaryExpr -> . CONTEXT
    (103) PrimaryExpr -> . FunctionCall
    (61) ReverseStep -> . ReverseAxis NodeTest
    (62) ReverseStep -> . AbbrevReverseStep
    (69) ForwardStep -> . ForwardAxis NodeTest
    (70) ForwardStep -> . AbbrevForwardStep
    (104) Literal -> . STRING
    (105) Literal -> . NUMBER
    (106) VarRef -> . $ VarName
    (108) ParenthesizedExpr -> . ( )
    (109) ParenthesizedExpr -> . ( Expr )
    (110) FunctionCall -> . EQNAME ArgumentList
    (63) ReverseAxis -> . PARENT AXIS
    (64) ReverseAxis -> . ANCESTOR AXIS
    (65) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (66) ReverseAxis -> . PRECEDING AXIS
    (67) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (68) AbbrevReverseStep -> . DOUBLEDOT
    (71) ForwardAxis -> . CHILD AXIS
    (72) ForwardAxis -> . DESCENDANT AXIS
    (73) ForwardAxis -> . ATTRIBUTE AXIS
    (74) ForwardAxis -> . SELF AXIS
    (75) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (76) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (77) ForwardAxis -> . FOLLOWING AXIS
    (78) ForwardAxis -> . NAMESPACE AXIS
    (79) AbbrevForwardStep -> . @ NodeTest
    (80) AbbrevForwardStep -> . NodeTest
    (81) NodeTest -> . KindTest
    (82) NodeTest -> . NameTest
    (83) KindTest -> . ElementTest
    (84) KindTest -> . AttributeTest
    (85) KindTest -> . AnyKindTest
    (97) NameTest -> . EQNAME
    (98) NameTest -> . *
    (86) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (87) ElementTest -> . ELEMENT ( )
    (91) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (92) AttributeTest -> . ATTRIBUTE ( )
    (96) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 30
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    $               shift and go to state 39
    (               shift and go to state 40
    EQNAME          shift and go to state 41
    PARENT          shift and go to state 42
    ANCESTOR        shift and go to state 43
    PRECEDING_SIBLING shift and go to state 44
    PRECEDING       shift and go to state 45
    ANCESTOR_OR_SELF shift and go to state 46
    DOUBLEDOT       shift and go to state 47
    CHILD           shift and go to state 48
    DESCENDANT      shift and go to state 49
    ATTRIBUTE       shift and go to state 50
    SELF            shift and go to state 51
    DESCENDANT_OR_SELF shift and go to state 52
    FOLLOWING_SIBLING shift and go to state 53
    FOLLOWING       shift and go to state 54
    NAMESPACE       shift and go to state 55
    @               shift and go to state 56
    *               shift and go to state 13
    ELEMENT         shift and go to state 62
    NODE            shift and go to state 63

    Argument                       shift and go to state 170
    Expr                           shift and go to state 153
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    RelativePathList               shift and go to state 20
    StepExpr                       shift and go to state 21
    PostfixExpr                    shift and go to state 22
    AxisStep                       shift and go to state 23
    PrimaryExpr                    shift and go to state 24
    ReverseStep                    shift and go to state 25
    ForwardStep                    shift and go to state 26
    Literal                        shift and go to state 27
    VarRef                         shift and go to state 28
    ParenthesizedExpr              shift and go to state 29
    FunctionCall                   shift and go to state 31
    ReverseAxis                    shift and go to state 32
    NodeTest                       shift and go to state 33
    AbbrevReverseStep              shift and go to state 34
    ForwardAxis                    shift and go to state 35
    AbbrevForwardStep              shift and go to state 36
    KindTest                       shift and go to state 57
    NameTest                       shift and go to state 58
    ElementTest                    shift and go to state 59
    AttributeTest                  shift and go to state 60
    AnyKindTest                    shift and go to state 61

state 168

    (91) AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .

    [               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    SLASH           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    DOUBLESLASH     reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    INTERSECT       reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    EXCEPT          reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    UNION           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    |               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    *               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    DIV             reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    IDIV            reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    MOD             reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    +               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    -               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    EQstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    NEstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    LTstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    LEstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    GTstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    GEstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    EQsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    NEsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    LTsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    LEsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    GTsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    GEsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    IS              reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    AND             reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    OR              reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    ,               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    $end            reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    )               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    ]               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)


state 169

    (86) ElementTest -> ELEMENT ( ElementNameOrWildcard ) .

    [               reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    SLASH           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    DOUBLESLASH     reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    INTERSECT       reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    EXCEPT          reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    UNION           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    |               reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    *               reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    DIV             reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    IDIV            reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    MOD             reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    +               reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    -               reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    EQstr           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    NEstr           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    LTstr           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    LEstr           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    GTstr           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    GEstr           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    EQsym           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    NEsym           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    LTsym           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    LEsym           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    GTsym           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    GEsym           reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    IS              reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    AND             reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    OR              reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    ,               reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    $end            reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    )               reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    ]               reduce using rule 86 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)


state 170

    (113) ArgumentExpr -> Argument , Argument .

    )               reduce using rule 113 (ArgumentExpr -> Argument , Argument .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for , in state 3 resolved as shift
WARNING: shift/reduce conflict for [ in state 25 resolved as shift
WARNING: shift/reduce conflict for [ in state 26 resolved as shift
