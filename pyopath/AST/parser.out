Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> path
Rule 1     path -> Expr
Rule 2     Expr -> ExprList
Rule 3     ExprList -> ExprSingle
Rule 4     ExprList -> ExprList , ExprSingle
Rule 5     ExprSingle -> OrExpr
Rule 6     OrExpr -> AndExpr OR AndExpr
Rule 7     OrExpr -> AndExpr
Rule 8     AndExpr -> ComparisonExpr AND ComparisonExpr
Rule 9     AndExpr -> ComparisonExpr
Rule 10    ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr
Rule 11    ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr
Rule 12    ComparisonExpr -> AdditiveExpr
Rule 13    ValueComp -> EQstr
Rule 14    ValueComp -> NEstr
Rule 15    ValueComp -> LTstr
Rule 16    ValueComp -> LEstr
Rule 17    ValueComp -> GTstr
Rule 18    ValueComp -> GEstr
Rule 19    ValueComp -> EQsym
Rule 20    ValueComp -> NEsym
Rule 21    ValueComp -> LTsym
Rule 22    ValueComp -> LEsym
Rule 23    ValueComp -> GTsym
Rule 24    ValueComp -> GEsym
Rule 25    NodeComp -> IS
Rule 26    AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr
Rule 27    AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr
Rule 28    AdditiveExpr -> MultiplicativeExpr
Rule 29    MultiplicativeExpr -> UnionExpr * UnionExpr
Rule 30    MultiplicativeExpr -> UnionExpr DIV UnionExpr
Rule 31    MultiplicativeExpr -> UnionExpr IDIV UnionExpr
Rule 32    MultiplicativeExpr -> UnionExpr MOD UnionExpr
Rule 33    MultiplicativeExpr -> UnionExpr
Rule 34    UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr
Rule 35    UnionExpr -> IntersectExceptExpr | IntersectExceptExpr
Rule 36    UnionExpr -> IntersectExceptExpr
Rule 37    IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr
Rule 38    IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr
Rule 39    IntersectExceptExpr -> UnaryExpr
Rule 40    UnaryExpr -> + ValueExpr
Rule 41    UnaryExpr -> - ValueExpr
Rule 42    UnaryExpr -> ValueExpr
Rule 43    ValueExpr -> SLASH RelativePathExpr
Rule 44    ValueExpr -> SLASH
Rule 45    ValueExpr -> DOUBLESLASH RelativePathExpr
Rule 46    ValueExpr -> RelativePathExpr
Rule 47    RelativePathExpr -> StepExpr SLASH StepExpr
Rule 48    RelativePathExpr -> StepExpr DOUBLESLASH StepExpr
Rule 49    RelativePathExpr -> StepExpr
Rule 50    StepExpr -> PostfixExpr
Rule 51    StepExpr -> AxisStep
Rule 52    PostfixExpr -> PrimaryExpr Predicate
Rule 53    PostfixExpr -> PrimaryExpr
Rule 54    AxisStep -> ReverseStep PredicateList
Rule 55    AxisStep -> ForwardStep PredicateList
Rule 56    PredicateList -> Predicate PredicateList
Rule 57    PredicateList -> Predicate
Rule 58    PredicateList -> <empty>
Rule 59    Predicate -> [ Expr ]
Rule 60    ReverseStep -> ReverseAxis NodeTest
Rule 61    ReverseStep -> AbbrevReverseStep
Rule 62    ReverseAxis -> PARENT AXIS
Rule 63    ReverseAxis -> ANCESTOR AXIS
Rule 64    ReverseAxis -> PRECEDING_SIBLING AXIS
Rule 65    ReverseAxis -> PRECEDING AXIS
Rule 66    ReverseAxis -> ANCESTOR_OR_SELF AXIS
Rule 67    AbbrevReverseStep -> DOUBLEDOT
Rule 68    ForwardStep -> ForwardAxis NodeTest
Rule 69    ForwardStep -> AbbrevForwardStep
Rule 70    ForwardAxis -> CHILD AXIS
Rule 71    ForwardAxis -> DESCENDANT AXIS
Rule 72    ForwardAxis -> ATTRIBUTE AXIS
Rule 73    ForwardAxis -> SELF AXIS
Rule 74    ForwardAxis -> DESCENDANT_OR_SELF AXIS
Rule 75    ForwardAxis -> FOLLOWING_SIBLING AXIS
Rule 76    ForwardAxis -> FOLLOWING AXIS
Rule 77    ForwardAxis -> NAMESPACE AXIS
Rule 78    AbbrevForwardStep -> @ NodeTest
Rule 79    AbbrevForwardStep -> NodeTest
Rule 80    NodeTest -> KindTest
Rule 81    NodeTest -> NameTest
Rule 82    KindTest -> ElementTest
Rule 83    KindTest -> AttributeTest
Rule 84    KindTest -> AnyKindTest
Rule 85    ElementTest -> ELEMENT ( ElementNameOrWildcard )
Rule 86    ElementTest -> ELEMENT ( )
Rule 87    ElementNameOrWildcard -> ElementName
Rule 88    ElementNameOrWildcard -> *
Rule 89    ElementName -> EQNAME
Rule 90    AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard )
Rule 91    AttributeTest -> ATTRIBUTE ( )
Rule 92    AttributeNameOrWildcard -> AttributeName
Rule 93    AttributeNameOrWildcard -> *
Rule 94    AttributeName -> EQNAME
Rule 95    AnyKindTest -> NODE ( )
Rule 96    NameTest -> EQNAME
Rule 97    NameTest -> *
Rule 98    PrimaryExpr -> Literal
Rule 99    PrimaryExpr -> VarRef
Rule 100   PrimaryExpr -> ParenthesizedExpr
Rule 101   PrimaryExpr -> CONTEXT
Rule 102   PrimaryExpr -> FunctionCall
Rule 103   Literal -> STRING
Rule 104   Literal -> NUMBER
Rule 105   VarRef -> $ VarName
Rule 106   VarName -> EQNAME
Rule 107   ParenthesizedExpr -> ( )
Rule 108   ParenthesizedExpr -> ( Expr )
Rule 109   FunctionCall -> EQNAME ArgumentList
Rule 110   ArgumentList -> ( )
Rule 111   ArgumentList -> ( ArgumentExpr )
Rule 112   ArgumentExpr -> Argument , Argument
Rule 113   ArgumentExpr -> Argument
Rule 114   Argument -> Expr

Terminals, with rules where they appear

$                    : 105
(                    : 85 86 90 91 95 107 108 110 111
)                    : 85 86 90 91 95 107 108 110 111
*                    : 29 88 93 97
+                    : 26 40
,                    : 4 112
-                    : 27 41
@                    : 78
ANCESTOR             : 63
ANCESTOR_OR_SELF     : 66
AND                  : 8
ATTRIBUTE            : 72 90 91
AXIS                 : 62 63 64 65 66 70 71 72 73 74 75 76 77
CHILD                : 70
CONTEXT              : 101
DESCENDANT           : 71
DESCENDANT_OR_SELF   : 74
DIV                  : 30
DOUBLEDOT            : 67
DOUBLESLASH          : 45 48
ELEMENT              : 85 86
EQNAME               : 89 94 96 106 109
EQstr                : 13
EQsym                : 19
EXCEPT               : 38
FOLLOWING            : 76
FOLLOWING_SIBLING    : 75
GEstr                : 18
GEsym                : 24
GTstr                : 17
GTsym                : 23
IDIV                 : 31
INTERSECT            : 37
IS                   : 25
LEstr                : 16
LEsym                : 22
LTstr                : 15
LTsym                : 21
MOD                  : 32
NAMESPACE            : 77
NEstr                : 14
NEsym                : 20
NODE                 : 95
NUMBER               : 104
OR                   : 6
PARENT               : 62
PRECEDING            : 65
PRECEDING_SIBLING    : 64
SELF                 : 73
SLASH                : 43 44 47
STRING               : 103
UNION                : 34
[                    : 59
]                    : 59
error                : 
|                    : 35

Nonterminals, with rules where they appear

AbbrevForwardStep    : 69
AbbrevReverseStep    : 61
AdditiveExpr         : 10 10 11 11 12
AndExpr              : 6 6 7
AnyKindTest          : 84
Argument             : 112 112 113
ArgumentExpr         : 111
ArgumentList         : 109
AttributeName        : 92
AttributeNameOrWildcard : 90
AttributeTest        : 83
AxisStep             : 51
ComparisonExpr       : 8 8 9
ElementName          : 87
ElementNameOrWildcard : 85
ElementTest          : 82
Expr                 : 1 59 108 114
ExprList             : 2 4
ExprSingle           : 3 4
ForwardAxis          : 68
ForwardStep          : 55
FunctionCall         : 102
IntersectExceptExpr  : 34 34 35 35 36
KindTest             : 80
Literal              : 98
MultiplicativeExpr   : 26 26 27 27 28
NameTest             : 81
NodeComp             : 11
NodeTest             : 60 68 78 79
OrExpr               : 5
ParenthesizedExpr    : 100
PostfixExpr          : 50
Predicate            : 52 56 57
PredicateList        : 54 55 56
PrimaryExpr          : 52 53
RelativePathExpr     : 43 45 46
ReverseAxis          : 60
ReverseStep          : 54
StepExpr             : 47 47 48 48 49
UnaryExpr            : 37 37 38 38 39
UnionExpr            : 29 29 30 30 31 31 32 32 33
ValueComp            : 10
ValueExpr            : 40 41 42
VarName              : 105
VarRef               : 99
path                 : 0

Parsing method: LALR

state 0

    (0) S' -> . path
    (1) path -> . Expr
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    path                           shift and go to state 1
    Expr                           shift and go to state 2
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 1

    (0) S' -> path .



state 2

    (1) path -> Expr .

    $end            reduce using rule 1 (path -> Expr .)


state 3

    (2) Expr -> ExprList .
    (4) ExprList -> ExprList . , ExprSingle

  ! shift/reduce conflict for , resolved as shift
    $end            reduce using rule 2 (Expr -> ExprList .)
    )               reduce using rule 2 (Expr -> ExprList .)
    ]               reduce using rule 2 (Expr -> ExprList .)
    ,               shift and go to state 63

  ! ,               [ reduce using rule 2 (Expr -> ExprList .) ]


state 4

    (3) ExprList -> ExprSingle .

    ,               reduce using rule 3 (ExprList -> ExprSingle .)
    $end            reduce using rule 3 (ExprList -> ExprSingle .)
    )               reduce using rule 3 (ExprList -> ExprSingle .)
    ]               reduce using rule 3 (ExprList -> ExprSingle .)


state 5

    (5) ExprSingle -> OrExpr .

    ,               reduce using rule 5 (ExprSingle -> OrExpr .)
    $end            reduce using rule 5 (ExprSingle -> OrExpr .)
    )               reduce using rule 5 (ExprSingle -> OrExpr .)
    ]               reduce using rule 5 (ExprSingle -> OrExpr .)


state 6

    (6) OrExpr -> AndExpr . OR AndExpr
    (7) OrExpr -> AndExpr .

    OR              shift and go to state 64
    ,               reduce using rule 7 (OrExpr -> AndExpr .)
    $end            reduce using rule 7 (OrExpr -> AndExpr .)
    )               reduce using rule 7 (OrExpr -> AndExpr .)
    ]               reduce using rule 7 (OrExpr -> AndExpr .)


state 7

    (8) AndExpr -> ComparisonExpr . AND ComparisonExpr
    (9) AndExpr -> ComparisonExpr .

    AND             shift and go to state 65
    OR              reduce using rule 9 (AndExpr -> ComparisonExpr .)
    ,               reduce using rule 9 (AndExpr -> ComparisonExpr .)
    $end            reduce using rule 9 (AndExpr -> ComparisonExpr .)
    )               reduce using rule 9 (AndExpr -> ComparisonExpr .)
    ]               reduce using rule 9 (AndExpr -> ComparisonExpr .)


state 8

    (10) ComparisonExpr -> AdditiveExpr . ValueComp AdditiveExpr
    (11) ComparisonExpr -> AdditiveExpr . NodeComp AdditiveExpr
    (12) ComparisonExpr -> AdditiveExpr .
    (13) ValueComp -> . EQstr
    (14) ValueComp -> . NEstr
    (15) ValueComp -> . LTstr
    (16) ValueComp -> . LEstr
    (17) ValueComp -> . GTstr
    (18) ValueComp -> . GEstr
    (19) ValueComp -> . EQsym
    (20) ValueComp -> . NEsym
    (21) ValueComp -> . LTsym
    (22) ValueComp -> . LEsym
    (23) ValueComp -> . GTsym
    (24) ValueComp -> . GEsym
    (25) NodeComp -> . IS

    AND             reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    OR              reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    ,               reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    $end            reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    )               reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    ]               reduce using rule 12 (ComparisonExpr -> AdditiveExpr .)
    EQstr           shift and go to state 68
    NEstr           shift and go to state 69
    LTstr           shift and go to state 70
    LEstr           shift and go to state 71
    GTstr           shift and go to state 72
    GEstr           shift and go to state 73
    EQsym           shift and go to state 74
    NEsym           shift and go to state 75
    LTsym           shift and go to state 76
    LEsym           shift and go to state 77
    GTsym           shift and go to state 78
    GEsym           shift and go to state 79
    IS              shift and go to state 80

    ValueComp                      shift and go to state 66
    NodeComp                       shift and go to state 67

state 9

    (26) AdditiveExpr -> MultiplicativeExpr . + MultiplicativeExpr
    (27) AdditiveExpr -> MultiplicativeExpr . - MultiplicativeExpr
    (28) AdditiveExpr -> MultiplicativeExpr .

    +               shift and go to state 81
    -               shift and go to state 82
    EQstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    NEstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    LTstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    LEstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    GTstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    GEstr           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    EQsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    NEsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    LTsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    LEsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    GTsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    GEsym           reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    IS              reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    AND             reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    OR              reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    ,               reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    $end            reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    )               reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)
    ]               reduce using rule 28 (AdditiveExpr -> MultiplicativeExpr .)


state 10

    (40) UnaryExpr -> + . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    ValueExpr                      shift and go to state 83
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 11

    (41) UnaryExpr -> - . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    ValueExpr                      shift and go to state 84
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 12

    (29) MultiplicativeExpr -> UnionExpr . * UnionExpr
    (30) MultiplicativeExpr -> UnionExpr . DIV UnionExpr
    (31) MultiplicativeExpr -> UnionExpr . IDIV UnionExpr
    (32) MultiplicativeExpr -> UnionExpr . MOD UnionExpr
    (33) MultiplicativeExpr -> UnionExpr .

    *               shift and go to state 85
    DIV             shift and go to state 86
    IDIV            shift and go to state 87
    MOD             shift and go to state 88
    +               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    -               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    EQstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    NEstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    LTstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    LEstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    GTstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    GEstr           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    EQsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    NEsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    LTsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    LEsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    GTsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    GEsym           reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    IS              reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    AND             reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    OR              reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    ,               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    $end            reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    )               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)
    ]               reduce using rule 33 (MultiplicativeExpr -> UnionExpr .)


state 13

    (97) NameTest -> * .

    [               reduce using rule 97 (NameTest -> * .)
    SLASH           reduce using rule 97 (NameTest -> * .)
    DOUBLESLASH     reduce using rule 97 (NameTest -> * .)
    INTERSECT       reduce using rule 97 (NameTest -> * .)
    EXCEPT          reduce using rule 97 (NameTest -> * .)
    UNION           reduce using rule 97 (NameTest -> * .)
    |               reduce using rule 97 (NameTest -> * .)
    *               reduce using rule 97 (NameTest -> * .)
    DIV             reduce using rule 97 (NameTest -> * .)
    IDIV            reduce using rule 97 (NameTest -> * .)
    MOD             reduce using rule 97 (NameTest -> * .)
    +               reduce using rule 97 (NameTest -> * .)
    -               reduce using rule 97 (NameTest -> * .)
    EQstr           reduce using rule 97 (NameTest -> * .)
    NEstr           reduce using rule 97 (NameTest -> * .)
    LTstr           reduce using rule 97 (NameTest -> * .)
    LEstr           reduce using rule 97 (NameTest -> * .)
    GTstr           reduce using rule 97 (NameTest -> * .)
    GEstr           reduce using rule 97 (NameTest -> * .)
    EQsym           reduce using rule 97 (NameTest -> * .)
    NEsym           reduce using rule 97 (NameTest -> * .)
    LTsym           reduce using rule 97 (NameTest -> * .)
    LEsym           reduce using rule 97 (NameTest -> * .)
    GTsym           reduce using rule 97 (NameTest -> * .)
    GEsym           reduce using rule 97 (NameTest -> * .)
    IS              reduce using rule 97 (NameTest -> * .)
    AND             reduce using rule 97 (NameTest -> * .)
    OR              reduce using rule 97 (NameTest -> * .)
    ,               reduce using rule 97 (NameTest -> * .)
    $end            reduce using rule 97 (NameTest -> * .)
    )               reduce using rule 97 (NameTest -> * .)
    ]               reduce using rule 97 (NameTest -> * .)


state 14

    (34) UnionExpr -> IntersectExceptExpr . UNION IntersectExceptExpr
    (35) UnionExpr -> IntersectExceptExpr . | IntersectExceptExpr
    (36) UnionExpr -> IntersectExceptExpr .

    UNION           shift and go to state 89
    |               shift and go to state 90
    *               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    DIV             reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    IDIV            reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    MOD             reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    +               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    -               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    EQstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    NEstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    LTstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    LEstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    GTstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    GEstr           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    EQsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    NEsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    LTsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    LEsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    GTsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    GEsym           reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    IS              reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    AND             reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    OR              reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    ,               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    $end            reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    )               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)
    ]               reduce using rule 36 (UnionExpr -> IntersectExceptExpr .)


state 15

    (37) IntersectExceptExpr -> UnaryExpr . INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> UnaryExpr . EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> UnaryExpr .

    INTERSECT       shift and go to state 91
    EXCEPT          shift and go to state 92
    UNION           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    |               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    *               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    DIV             reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    IDIV            reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    MOD             reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    +               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    -               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    EQstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    NEstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    LTstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    LEstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    GTstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    GEstr           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    EQsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    NEsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    LTsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    LEsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    GTsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    GEsym           reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    IS              reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    AND             reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    OR              reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    ,               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    $end            reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    )               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)
    ]               reduce using rule 39 (IntersectExceptExpr -> UnaryExpr .)


state 16

    (42) UnaryExpr -> ValueExpr .

    INTERSECT       reduce using rule 42 (UnaryExpr -> ValueExpr .)
    EXCEPT          reduce using rule 42 (UnaryExpr -> ValueExpr .)
    UNION           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    |               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    *               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    DIV             reduce using rule 42 (UnaryExpr -> ValueExpr .)
    IDIV            reduce using rule 42 (UnaryExpr -> ValueExpr .)
    MOD             reduce using rule 42 (UnaryExpr -> ValueExpr .)
    +               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    -               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    EQstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    NEstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    LTstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    LEstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    GTstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    GEstr           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    EQsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    NEsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    LTsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    LEsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    GTsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    GEsym           reduce using rule 42 (UnaryExpr -> ValueExpr .)
    IS              reduce using rule 42 (UnaryExpr -> ValueExpr .)
    AND             reduce using rule 42 (UnaryExpr -> ValueExpr .)
    OR              reduce using rule 42 (UnaryExpr -> ValueExpr .)
    ,               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    $end            reduce using rule 42 (UnaryExpr -> ValueExpr .)
    )               reduce using rule 42 (UnaryExpr -> ValueExpr .)
    ]               reduce using rule 42 (UnaryExpr -> ValueExpr .)


state 17

    (43) ValueExpr -> SLASH . RelativePathExpr
    (44) ValueExpr -> SLASH .
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    INTERSECT       reduce using rule 44 (ValueExpr -> SLASH .)
    EXCEPT          reduce using rule 44 (ValueExpr -> SLASH .)
    UNION           reduce using rule 44 (ValueExpr -> SLASH .)
    |               reduce using rule 44 (ValueExpr -> SLASH .)
    *               reduce using rule 44 (ValueExpr -> SLASH .)
    DIV             reduce using rule 44 (ValueExpr -> SLASH .)
    IDIV            reduce using rule 44 (ValueExpr -> SLASH .)
    MOD             reduce using rule 44 (ValueExpr -> SLASH .)
    +               reduce using rule 44 (ValueExpr -> SLASH .)
    -               reduce using rule 44 (ValueExpr -> SLASH .)
    EQstr           reduce using rule 44 (ValueExpr -> SLASH .)
    NEstr           reduce using rule 44 (ValueExpr -> SLASH .)
    LTstr           reduce using rule 44 (ValueExpr -> SLASH .)
    LEstr           reduce using rule 44 (ValueExpr -> SLASH .)
    GTstr           reduce using rule 44 (ValueExpr -> SLASH .)
    GEstr           reduce using rule 44 (ValueExpr -> SLASH .)
    EQsym           reduce using rule 44 (ValueExpr -> SLASH .)
    NEsym           reduce using rule 44 (ValueExpr -> SLASH .)
    LTsym           reduce using rule 44 (ValueExpr -> SLASH .)
    LEsym           reduce using rule 44 (ValueExpr -> SLASH .)
    GTsym           reduce using rule 44 (ValueExpr -> SLASH .)
    GEsym           reduce using rule 44 (ValueExpr -> SLASH .)
    IS              reduce using rule 44 (ValueExpr -> SLASH .)
    AND             reduce using rule 44 (ValueExpr -> SLASH .)
    OR              reduce using rule 44 (ValueExpr -> SLASH .)
    ,               reduce using rule 44 (ValueExpr -> SLASH .)
    $end            reduce using rule 44 (ValueExpr -> SLASH .)
    )               reduce using rule 44 (ValueExpr -> SLASH .)
    ]               reduce using rule 44 (ValueExpr -> SLASH .)
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

  ! *               [ shift and go to state 13 ]

    RelativePathExpr               shift and go to state 93
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 18

    (46) ValueExpr -> RelativePathExpr .

    INTERSECT       reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    EXCEPT          reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    UNION           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    |               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    *               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    DIV             reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    IDIV            reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    MOD             reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    +               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    -               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    EQstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    NEstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    LTstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    LEstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    GTstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    GEstr           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    EQsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    NEsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    LTsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    LEsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    GTsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    GEsym           reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    IS              reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    AND             reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    OR              reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    ,               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    $end            reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    )               reduce using rule 46 (ValueExpr -> RelativePathExpr .)
    ]               reduce using rule 46 (ValueExpr -> RelativePathExpr .)


state 19

    (45) ValueExpr -> DOUBLESLASH . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    RelativePathExpr               shift and go to state 94
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 20

    (47) RelativePathExpr -> StepExpr . SLASH StepExpr
    (48) RelativePathExpr -> StepExpr . DOUBLESLASH StepExpr
    (49) RelativePathExpr -> StepExpr .

    SLASH           shift and go to state 95
    DOUBLESLASH     shift and go to state 96
    INTERSECT       reduce using rule 49 (RelativePathExpr -> StepExpr .)
    EXCEPT          reduce using rule 49 (RelativePathExpr -> StepExpr .)
    UNION           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    |               reduce using rule 49 (RelativePathExpr -> StepExpr .)
    *               reduce using rule 49 (RelativePathExpr -> StepExpr .)
    DIV             reduce using rule 49 (RelativePathExpr -> StepExpr .)
    IDIV            reduce using rule 49 (RelativePathExpr -> StepExpr .)
    MOD             reduce using rule 49 (RelativePathExpr -> StepExpr .)
    +               reduce using rule 49 (RelativePathExpr -> StepExpr .)
    -               reduce using rule 49 (RelativePathExpr -> StepExpr .)
    EQstr           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    NEstr           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    LTstr           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    LEstr           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    GTstr           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    GEstr           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    EQsym           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    NEsym           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    LTsym           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    LEsym           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    GTsym           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    GEsym           reduce using rule 49 (RelativePathExpr -> StepExpr .)
    IS              reduce using rule 49 (RelativePathExpr -> StepExpr .)
    AND             reduce using rule 49 (RelativePathExpr -> StepExpr .)
    OR              reduce using rule 49 (RelativePathExpr -> StepExpr .)
    ,               reduce using rule 49 (RelativePathExpr -> StepExpr .)
    $end            reduce using rule 49 (RelativePathExpr -> StepExpr .)
    )               reduce using rule 49 (RelativePathExpr -> StepExpr .)
    ]               reduce using rule 49 (RelativePathExpr -> StepExpr .)


state 21

    (50) StepExpr -> PostfixExpr .

    SLASH           reduce using rule 50 (StepExpr -> PostfixExpr .)
    DOUBLESLASH     reduce using rule 50 (StepExpr -> PostfixExpr .)
    INTERSECT       reduce using rule 50 (StepExpr -> PostfixExpr .)
    EXCEPT          reduce using rule 50 (StepExpr -> PostfixExpr .)
    UNION           reduce using rule 50 (StepExpr -> PostfixExpr .)
    |               reduce using rule 50 (StepExpr -> PostfixExpr .)
    *               reduce using rule 50 (StepExpr -> PostfixExpr .)
    DIV             reduce using rule 50 (StepExpr -> PostfixExpr .)
    IDIV            reduce using rule 50 (StepExpr -> PostfixExpr .)
    MOD             reduce using rule 50 (StepExpr -> PostfixExpr .)
    +               reduce using rule 50 (StepExpr -> PostfixExpr .)
    -               reduce using rule 50 (StepExpr -> PostfixExpr .)
    EQstr           reduce using rule 50 (StepExpr -> PostfixExpr .)
    NEstr           reduce using rule 50 (StepExpr -> PostfixExpr .)
    LTstr           reduce using rule 50 (StepExpr -> PostfixExpr .)
    LEstr           reduce using rule 50 (StepExpr -> PostfixExpr .)
    GTstr           reduce using rule 50 (StepExpr -> PostfixExpr .)
    GEstr           reduce using rule 50 (StepExpr -> PostfixExpr .)
    EQsym           reduce using rule 50 (StepExpr -> PostfixExpr .)
    NEsym           reduce using rule 50 (StepExpr -> PostfixExpr .)
    LTsym           reduce using rule 50 (StepExpr -> PostfixExpr .)
    LEsym           reduce using rule 50 (StepExpr -> PostfixExpr .)
    GTsym           reduce using rule 50 (StepExpr -> PostfixExpr .)
    GEsym           reduce using rule 50 (StepExpr -> PostfixExpr .)
    IS              reduce using rule 50 (StepExpr -> PostfixExpr .)
    AND             reduce using rule 50 (StepExpr -> PostfixExpr .)
    OR              reduce using rule 50 (StepExpr -> PostfixExpr .)
    ,               reduce using rule 50 (StepExpr -> PostfixExpr .)
    $end            reduce using rule 50 (StepExpr -> PostfixExpr .)
    )               reduce using rule 50 (StepExpr -> PostfixExpr .)
    ]               reduce using rule 50 (StepExpr -> PostfixExpr .)


state 22

    (51) StepExpr -> AxisStep .

    SLASH           reduce using rule 51 (StepExpr -> AxisStep .)
    DOUBLESLASH     reduce using rule 51 (StepExpr -> AxisStep .)
    INTERSECT       reduce using rule 51 (StepExpr -> AxisStep .)
    EXCEPT          reduce using rule 51 (StepExpr -> AxisStep .)
    UNION           reduce using rule 51 (StepExpr -> AxisStep .)
    |               reduce using rule 51 (StepExpr -> AxisStep .)
    *               reduce using rule 51 (StepExpr -> AxisStep .)
    DIV             reduce using rule 51 (StepExpr -> AxisStep .)
    IDIV            reduce using rule 51 (StepExpr -> AxisStep .)
    MOD             reduce using rule 51 (StepExpr -> AxisStep .)
    +               reduce using rule 51 (StepExpr -> AxisStep .)
    -               reduce using rule 51 (StepExpr -> AxisStep .)
    EQstr           reduce using rule 51 (StepExpr -> AxisStep .)
    NEstr           reduce using rule 51 (StepExpr -> AxisStep .)
    LTstr           reduce using rule 51 (StepExpr -> AxisStep .)
    LEstr           reduce using rule 51 (StepExpr -> AxisStep .)
    GTstr           reduce using rule 51 (StepExpr -> AxisStep .)
    GEstr           reduce using rule 51 (StepExpr -> AxisStep .)
    EQsym           reduce using rule 51 (StepExpr -> AxisStep .)
    NEsym           reduce using rule 51 (StepExpr -> AxisStep .)
    LTsym           reduce using rule 51 (StepExpr -> AxisStep .)
    LEsym           reduce using rule 51 (StepExpr -> AxisStep .)
    GTsym           reduce using rule 51 (StepExpr -> AxisStep .)
    GEsym           reduce using rule 51 (StepExpr -> AxisStep .)
    IS              reduce using rule 51 (StepExpr -> AxisStep .)
    AND             reduce using rule 51 (StepExpr -> AxisStep .)
    OR              reduce using rule 51 (StepExpr -> AxisStep .)
    ,               reduce using rule 51 (StepExpr -> AxisStep .)
    $end            reduce using rule 51 (StepExpr -> AxisStep .)
    )               reduce using rule 51 (StepExpr -> AxisStep .)
    ]               reduce using rule 51 (StepExpr -> AxisStep .)


state 23

    (52) PostfixExpr -> PrimaryExpr . Predicate
    (53) PostfixExpr -> PrimaryExpr .
    (59) Predicate -> . [ Expr ]

    SLASH           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    DOUBLESLASH     reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    INTERSECT       reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    EXCEPT          reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    UNION           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    |               reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    *               reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    DIV             reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    IDIV            reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    MOD             reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    +               reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    -               reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    EQstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    NEstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    LTstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    LEstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    GTstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    GEstr           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    EQsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    NEsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    LTsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    LEsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    GTsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    GEsym           reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    IS              reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    AND             reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    OR              reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    ,               reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    $end            reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    )               reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    ]               reduce using rule 53 (PostfixExpr -> PrimaryExpr .)
    [               shift and go to state 98

    Predicate                      shift and go to state 97

state 24

    (54) AxisStep -> ReverseStep . PredicateList
    (56) PredicateList -> . Predicate PredicateList
    (57) PredicateList -> . Predicate
    (58) PredicateList -> .
    (59) Predicate -> . [ Expr ]

    SLASH           reduce using rule 58 (PredicateList -> .)
    DOUBLESLASH     reduce using rule 58 (PredicateList -> .)
    INTERSECT       reduce using rule 58 (PredicateList -> .)
    EXCEPT          reduce using rule 58 (PredicateList -> .)
    UNION           reduce using rule 58 (PredicateList -> .)
    |               reduce using rule 58 (PredicateList -> .)
    *               reduce using rule 58 (PredicateList -> .)
    DIV             reduce using rule 58 (PredicateList -> .)
    IDIV            reduce using rule 58 (PredicateList -> .)
    MOD             reduce using rule 58 (PredicateList -> .)
    +               reduce using rule 58 (PredicateList -> .)
    -               reduce using rule 58 (PredicateList -> .)
    EQstr           reduce using rule 58 (PredicateList -> .)
    NEstr           reduce using rule 58 (PredicateList -> .)
    LTstr           reduce using rule 58 (PredicateList -> .)
    LEstr           reduce using rule 58 (PredicateList -> .)
    GTstr           reduce using rule 58 (PredicateList -> .)
    GEstr           reduce using rule 58 (PredicateList -> .)
    EQsym           reduce using rule 58 (PredicateList -> .)
    NEsym           reduce using rule 58 (PredicateList -> .)
    LTsym           reduce using rule 58 (PredicateList -> .)
    LEsym           reduce using rule 58 (PredicateList -> .)
    GTsym           reduce using rule 58 (PredicateList -> .)
    GEsym           reduce using rule 58 (PredicateList -> .)
    IS              reduce using rule 58 (PredicateList -> .)
    AND             reduce using rule 58 (PredicateList -> .)
    OR              reduce using rule 58 (PredicateList -> .)
    ,               reduce using rule 58 (PredicateList -> .)
    $end            reduce using rule 58 (PredicateList -> .)
    )               reduce using rule 58 (PredicateList -> .)
    ]               reduce using rule 58 (PredicateList -> .)
    [               shift and go to state 98

    PredicateList                  shift and go to state 99
    Predicate                      shift and go to state 100

state 25

    (55) AxisStep -> ForwardStep . PredicateList
    (56) PredicateList -> . Predicate PredicateList
    (57) PredicateList -> . Predicate
    (58) PredicateList -> .
    (59) Predicate -> . [ Expr ]

    SLASH           reduce using rule 58 (PredicateList -> .)
    DOUBLESLASH     reduce using rule 58 (PredicateList -> .)
    INTERSECT       reduce using rule 58 (PredicateList -> .)
    EXCEPT          reduce using rule 58 (PredicateList -> .)
    UNION           reduce using rule 58 (PredicateList -> .)
    |               reduce using rule 58 (PredicateList -> .)
    *               reduce using rule 58 (PredicateList -> .)
    DIV             reduce using rule 58 (PredicateList -> .)
    IDIV            reduce using rule 58 (PredicateList -> .)
    MOD             reduce using rule 58 (PredicateList -> .)
    +               reduce using rule 58 (PredicateList -> .)
    -               reduce using rule 58 (PredicateList -> .)
    EQstr           reduce using rule 58 (PredicateList -> .)
    NEstr           reduce using rule 58 (PredicateList -> .)
    LTstr           reduce using rule 58 (PredicateList -> .)
    LEstr           reduce using rule 58 (PredicateList -> .)
    GTstr           reduce using rule 58 (PredicateList -> .)
    GEstr           reduce using rule 58 (PredicateList -> .)
    EQsym           reduce using rule 58 (PredicateList -> .)
    NEsym           reduce using rule 58 (PredicateList -> .)
    LTsym           reduce using rule 58 (PredicateList -> .)
    LEsym           reduce using rule 58 (PredicateList -> .)
    GTsym           reduce using rule 58 (PredicateList -> .)
    GEsym           reduce using rule 58 (PredicateList -> .)
    IS              reduce using rule 58 (PredicateList -> .)
    AND             reduce using rule 58 (PredicateList -> .)
    OR              reduce using rule 58 (PredicateList -> .)
    ,               reduce using rule 58 (PredicateList -> .)
    $end            reduce using rule 58 (PredicateList -> .)
    )               reduce using rule 58 (PredicateList -> .)
    ]               reduce using rule 58 (PredicateList -> .)
    [               shift and go to state 98

    PredicateList                  shift and go to state 101
    Predicate                      shift and go to state 100

state 26

    (98) PrimaryExpr -> Literal .

    [               reduce using rule 98 (PrimaryExpr -> Literal .)
    SLASH           reduce using rule 98 (PrimaryExpr -> Literal .)
    DOUBLESLASH     reduce using rule 98 (PrimaryExpr -> Literal .)
    INTERSECT       reduce using rule 98 (PrimaryExpr -> Literal .)
    EXCEPT          reduce using rule 98 (PrimaryExpr -> Literal .)
    UNION           reduce using rule 98 (PrimaryExpr -> Literal .)
    |               reduce using rule 98 (PrimaryExpr -> Literal .)
    *               reduce using rule 98 (PrimaryExpr -> Literal .)
    DIV             reduce using rule 98 (PrimaryExpr -> Literal .)
    IDIV            reduce using rule 98 (PrimaryExpr -> Literal .)
    MOD             reduce using rule 98 (PrimaryExpr -> Literal .)
    +               reduce using rule 98 (PrimaryExpr -> Literal .)
    -               reduce using rule 98 (PrimaryExpr -> Literal .)
    EQstr           reduce using rule 98 (PrimaryExpr -> Literal .)
    NEstr           reduce using rule 98 (PrimaryExpr -> Literal .)
    LTstr           reduce using rule 98 (PrimaryExpr -> Literal .)
    LEstr           reduce using rule 98 (PrimaryExpr -> Literal .)
    GTstr           reduce using rule 98 (PrimaryExpr -> Literal .)
    GEstr           reduce using rule 98 (PrimaryExpr -> Literal .)
    EQsym           reduce using rule 98 (PrimaryExpr -> Literal .)
    NEsym           reduce using rule 98 (PrimaryExpr -> Literal .)
    LTsym           reduce using rule 98 (PrimaryExpr -> Literal .)
    LEsym           reduce using rule 98 (PrimaryExpr -> Literal .)
    GTsym           reduce using rule 98 (PrimaryExpr -> Literal .)
    GEsym           reduce using rule 98 (PrimaryExpr -> Literal .)
    IS              reduce using rule 98 (PrimaryExpr -> Literal .)
    AND             reduce using rule 98 (PrimaryExpr -> Literal .)
    OR              reduce using rule 98 (PrimaryExpr -> Literal .)
    ,               reduce using rule 98 (PrimaryExpr -> Literal .)
    $end            reduce using rule 98 (PrimaryExpr -> Literal .)
    )               reduce using rule 98 (PrimaryExpr -> Literal .)
    ]               reduce using rule 98 (PrimaryExpr -> Literal .)


state 27

    (99) PrimaryExpr -> VarRef .

    [               reduce using rule 99 (PrimaryExpr -> VarRef .)
    SLASH           reduce using rule 99 (PrimaryExpr -> VarRef .)
    DOUBLESLASH     reduce using rule 99 (PrimaryExpr -> VarRef .)
    INTERSECT       reduce using rule 99 (PrimaryExpr -> VarRef .)
    EXCEPT          reduce using rule 99 (PrimaryExpr -> VarRef .)
    UNION           reduce using rule 99 (PrimaryExpr -> VarRef .)
    |               reduce using rule 99 (PrimaryExpr -> VarRef .)
    *               reduce using rule 99 (PrimaryExpr -> VarRef .)
    DIV             reduce using rule 99 (PrimaryExpr -> VarRef .)
    IDIV            reduce using rule 99 (PrimaryExpr -> VarRef .)
    MOD             reduce using rule 99 (PrimaryExpr -> VarRef .)
    +               reduce using rule 99 (PrimaryExpr -> VarRef .)
    -               reduce using rule 99 (PrimaryExpr -> VarRef .)
    EQstr           reduce using rule 99 (PrimaryExpr -> VarRef .)
    NEstr           reduce using rule 99 (PrimaryExpr -> VarRef .)
    LTstr           reduce using rule 99 (PrimaryExpr -> VarRef .)
    LEstr           reduce using rule 99 (PrimaryExpr -> VarRef .)
    GTstr           reduce using rule 99 (PrimaryExpr -> VarRef .)
    GEstr           reduce using rule 99 (PrimaryExpr -> VarRef .)
    EQsym           reduce using rule 99 (PrimaryExpr -> VarRef .)
    NEsym           reduce using rule 99 (PrimaryExpr -> VarRef .)
    LTsym           reduce using rule 99 (PrimaryExpr -> VarRef .)
    LEsym           reduce using rule 99 (PrimaryExpr -> VarRef .)
    GTsym           reduce using rule 99 (PrimaryExpr -> VarRef .)
    GEsym           reduce using rule 99 (PrimaryExpr -> VarRef .)
    IS              reduce using rule 99 (PrimaryExpr -> VarRef .)
    AND             reduce using rule 99 (PrimaryExpr -> VarRef .)
    OR              reduce using rule 99 (PrimaryExpr -> VarRef .)
    ,               reduce using rule 99 (PrimaryExpr -> VarRef .)
    $end            reduce using rule 99 (PrimaryExpr -> VarRef .)
    )               reduce using rule 99 (PrimaryExpr -> VarRef .)
    ]               reduce using rule 99 (PrimaryExpr -> VarRef .)


state 28

    (100) PrimaryExpr -> ParenthesizedExpr .

    [               reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    SLASH           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    DOUBLESLASH     reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    INTERSECT       reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    EXCEPT          reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    UNION           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    |               reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    *               reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    DIV             reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    IDIV            reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    MOD             reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    +               reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    -               reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    EQstr           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    NEstr           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    LTstr           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    LEstr           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    GTstr           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    GEstr           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    EQsym           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    NEsym           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    LTsym           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    LEsym           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    GTsym           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    GEsym           reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    IS              reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    AND             reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    OR              reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    ,               reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    $end            reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    )               reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)
    ]               reduce using rule 100 (PrimaryExpr -> ParenthesizedExpr .)


state 29

    (101) PrimaryExpr -> CONTEXT .

    [               reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    SLASH           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    DOUBLESLASH     reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    INTERSECT       reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    EXCEPT          reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    UNION           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    |               reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    *               reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    DIV             reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    IDIV            reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    MOD             reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    +               reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    -               reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    EQstr           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    NEstr           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    LTstr           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    LEstr           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    GTstr           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    GEstr           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    EQsym           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    NEsym           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    LTsym           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    LEsym           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    GTsym           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    GEsym           reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    IS              reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    AND             reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    OR              reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    ,               reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    $end            reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    )               reduce using rule 101 (PrimaryExpr -> CONTEXT .)
    ]               reduce using rule 101 (PrimaryExpr -> CONTEXT .)


state 30

    (102) PrimaryExpr -> FunctionCall .

    [               reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    SLASH           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    DOUBLESLASH     reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    INTERSECT       reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    EXCEPT          reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    UNION           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    |               reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    *               reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    DIV             reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    IDIV            reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    MOD             reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    +               reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    -               reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    EQstr           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    NEstr           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    LTstr           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    LEstr           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    GTstr           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    GEstr           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    EQsym           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    NEsym           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    LTsym           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    LEsym           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    GTsym           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    GEsym           reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    IS              reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    AND             reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    OR              reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    ,               reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    $end            reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    )               reduce using rule 102 (PrimaryExpr -> FunctionCall .)
    ]               reduce using rule 102 (PrimaryExpr -> FunctionCall .)


state 31

    (60) ReverseStep -> ReverseAxis . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    EQNAME          shift and go to state 103
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    ATTRIBUTE       shift and go to state 104
    NODE            shift and go to state 62

    NodeTest                       shift and go to state 102
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 32

    (79) AbbrevForwardStep -> NodeTest .

    [               reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    SLASH           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    DOUBLESLASH     reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    INTERSECT       reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    EXCEPT          reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    UNION           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    |               reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    *               reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    DIV             reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    IDIV            reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    MOD             reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    +               reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    -               reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    EQstr           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    NEstr           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    LTstr           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    LEstr           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    GTstr           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    GEstr           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    EQsym           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    NEsym           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    LTsym           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    LEsym           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    GTsym           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    GEsym           reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    IS              reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    AND             reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    OR              reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    ,               reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    $end            reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    )               reduce using rule 79 (AbbrevForwardStep -> NodeTest .)
    ]               reduce using rule 79 (AbbrevForwardStep -> NodeTest .)


state 33

    (61) ReverseStep -> AbbrevReverseStep .

    [               reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    SLASH           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    DOUBLESLASH     reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    INTERSECT       reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    EXCEPT          reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    UNION           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    |               reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    *               reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    DIV             reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    IDIV            reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    MOD             reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    +               reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    -               reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    EQstr           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    NEstr           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    LTstr           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    LEstr           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    GTstr           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    GEstr           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    EQsym           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    NEsym           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    LTsym           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    LEsym           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    GTsym           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    GEsym           reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    IS              reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    AND             reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    OR              reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    ,               reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    $end            reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    )               reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)
    ]               reduce using rule 61 (ReverseStep -> AbbrevReverseStep .)


state 34

    (68) ForwardStep -> ForwardAxis . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    EQNAME          shift and go to state 103
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    ATTRIBUTE       shift and go to state 104
    NODE            shift and go to state 62

    NodeTest                       shift and go to state 105
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 35

    (69) ForwardStep -> AbbrevForwardStep .

    [               reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    SLASH           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    DOUBLESLASH     reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    INTERSECT       reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    EXCEPT          reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    UNION           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    |               reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    *               reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    DIV             reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    IDIV            reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    MOD             reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    +               reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    -               reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    EQstr           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    NEstr           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    LTstr           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    LEstr           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    GTstr           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    GEstr           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    EQsym           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    NEsym           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    LTsym           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    LEsym           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    GTsym           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    GEsym           reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    IS              reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    AND             reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    OR              reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    ,               reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    $end            reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    )               reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)
    ]               reduce using rule 69 (ForwardStep -> AbbrevForwardStep .)


state 36

    (103) Literal -> STRING .

    [               reduce using rule 103 (Literal -> STRING .)
    SLASH           reduce using rule 103 (Literal -> STRING .)
    DOUBLESLASH     reduce using rule 103 (Literal -> STRING .)
    INTERSECT       reduce using rule 103 (Literal -> STRING .)
    EXCEPT          reduce using rule 103 (Literal -> STRING .)
    UNION           reduce using rule 103 (Literal -> STRING .)
    |               reduce using rule 103 (Literal -> STRING .)
    *               reduce using rule 103 (Literal -> STRING .)
    DIV             reduce using rule 103 (Literal -> STRING .)
    IDIV            reduce using rule 103 (Literal -> STRING .)
    MOD             reduce using rule 103 (Literal -> STRING .)
    +               reduce using rule 103 (Literal -> STRING .)
    -               reduce using rule 103 (Literal -> STRING .)
    EQstr           reduce using rule 103 (Literal -> STRING .)
    NEstr           reduce using rule 103 (Literal -> STRING .)
    LTstr           reduce using rule 103 (Literal -> STRING .)
    LEstr           reduce using rule 103 (Literal -> STRING .)
    GTstr           reduce using rule 103 (Literal -> STRING .)
    GEstr           reduce using rule 103 (Literal -> STRING .)
    EQsym           reduce using rule 103 (Literal -> STRING .)
    NEsym           reduce using rule 103 (Literal -> STRING .)
    LTsym           reduce using rule 103 (Literal -> STRING .)
    LEsym           reduce using rule 103 (Literal -> STRING .)
    GTsym           reduce using rule 103 (Literal -> STRING .)
    GEsym           reduce using rule 103 (Literal -> STRING .)
    IS              reduce using rule 103 (Literal -> STRING .)
    AND             reduce using rule 103 (Literal -> STRING .)
    OR              reduce using rule 103 (Literal -> STRING .)
    ,               reduce using rule 103 (Literal -> STRING .)
    $end            reduce using rule 103 (Literal -> STRING .)
    )               reduce using rule 103 (Literal -> STRING .)
    ]               reduce using rule 103 (Literal -> STRING .)


state 37

    (104) Literal -> NUMBER .

    [               reduce using rule 104 (Literal -> NUMBER .)
    SLASH           reduce using rule 104 (Literal -> NUMBER .)
    DOUBLESLASH     reduce using rule 104 (Literal -> NUMBER .)
    INTERSECT       reduce using rule 104 (Literal -> NUMBER .)
    EXCEPT          reduce using rule 104 (Literal -> NUMBER .)
    UNION           reduce using rule 104 (Literal -> NUMBER .)
    |               reduce using rule 104 (Literal -> NUMBER .)
    *               reduce using rule 104 (Literal -> NUMBER .)
    DIV             reduce using rule 104 (Literal -> NUMBER .)
    IDIV            reduce using rule 104 (Literal -> NUMBER .)
    MOD             reduce using rule 104 (Literal -> NUMBER .)
    +               reduce using rule 104 (Literal -> NUMBER .)
    -               reduce using rule 104 (Literal -> NUMBER .)
    EQstr           reduce using rule 104 (Literal -> NUMBER .)
    NEstr           reduce using rule 104 (Literal -> NUMBER .)
    LTstr           reduce using rule 104 (Literal -> NUMBER .)
    LEstr           reduce using rule 104 (Literal -> NUMBER .)
    GTstr           reduce using rule 104 (Literal -> NUMBER .)
    GEstr           reduce using rule 104 (Literal -> NUMBER .)
    EQsym           reduce using rule 104 (Literal -> NUMBER .)
    NEsym           reduce using rule 104 (Literal -> NUMBER .)
    LTsym           reduce using rule 104 (Literal -> NUMBER .)
    LEsym           reduce using rule 104 (Literal -> NUMBER .)
    GTsym           reduce using rule 104 (Literal -> NUMBER .)
    GEsym           reduce using rule 104 (Literal -> NUMBER .)
    IS              reduce using rule 104 (Literal -> NUMBER .)
    AND             reduce using rule 104 (Literal -> NUMBER .)
    OR              reduce using rule 104 (Literal -> NUMBER .)
    ,               reduce using rule 104 (Literal -> NUMBER .)
    $end            reduce using rule 104 (Literal -> NUMBER .)
    )               reduce using rule 104 (Literal -> NUMBER .)
    ]               reduce using rule 104 (Literal -> NUMBER .)


state 38

    (105) VarRef -> $ . VarName
    (106) VarName -> . EQNAME

    EQNAME          shift and go to state 107

    VarName                        shift and go to state 106

state 39

    (107) ParenthesizedExpr -> ( . )
    (108) ParenthesizedExpr -> ( . Expr )
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    )               shift and go to state 108
    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    Expr                           shift and go to state 109
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 40

    (109) FunctionCall -> EQNAME . ArgumentList
    (96) NameTest -> EQNAME .
    (110) ArgumentList -> . ( )
    (111) ArgumentList -> . ( ArgumentExpr )

    [               reduce using rule 96 (NameTest -> EQNAME .)
    SLASH           reduce using rule 96 (NameTest -> EQNAME .)
    DOUBLESLASH     reduce using rule 96 (NameTest -> EQNAME .)
    INTERSECT       reduce using rule 96 (NameTest -> EQNAME .)
    EXCEPT          reduce using rule 96 (NameTest -> EQNAME .)
    UNION           reduce using rule 96 (NameTest -> EQNAME .)
    |               reduce using rule 96 (NameTest -> EQNAME .)
    *               reduce using rule 96 (NameTest -> EQNAME .)
    DIV             reduce using rule 96 (NameTest -> EQNAME .)
    IDIV            reduce using rule 96 (NameTest -> EQNAME .)
    MOD             reduce using rule 96 (NameTest -> EQNAME .)
    +               reduce using rule 96 (NameTest -> EQNAME .)
    -               reduce using rule 96 (NameTest -> EQNAME .)
    EQstr           reduce using rule 96 (NameTest -> EQNAME .)
    NEstr           reduce using rule 96 (NameTest -> EQNAME .)
    LTstr           reduce using rule 96 (NameTest -> EQNAME .)
    LEstr           reduce using rule 96 (NameTest -> EQNAME .)
    GTstr           reduce using rule 96 (NameTest -> EQNAME .)
    GEstr           reduce using rule 96 (NameTest -> EQNAME .)
    EQsym           reduce using rule 96 (NameTest -> EQNAME .)
    NEsym           reduce using rule 96 (NameTest -> EQNAME .)
    LTsym           reduce using rule 96 (NameTest -> EQNAME .)
    LEsym           reduce using rule 96 (NameTest -> EQNAME .)
    GTsym           reduce using rule 96 (NameTest -> EQNAME .)
    GEsym           reduce using rule 96 (NameTest -> EQNAME .)
    IS              reduce using rule 96 (NameTest -> EQNAME .)
    AND             reduce using rule 96 (NameTest -> EQNAME .)
    OR              reduce using rule 96 (NameTest -> EQNAME .)
    ,               reduce using rule 96 (NameTest -> EQNAME .)
    $end            reduce using rule 96 (NameTest -> EQNAME .)
    )               reduce using rule 96 (NameTest -> EQNAME .)
    ]               reduce using rule 96 (NameTest -> EQNAME .)
    (               shift and go to state 111

    ArgumentList                   shift and go to state 110

state 41

    (62) ReverseAxis -> PARENT . AXIS

    AXIS            shift and go to state 112


state 42

    (63) ReverseAxis -> ANCESTOR . AXIS

    AXIS            shift and go to state 113


state 43

    (64) ReverseAxis -> PRECEDING_SIBLING . AXIS

    AXIS            shift and go to state 114


state 44

    (65) ReverseAxis -> PRECEDING . AXIS

    AXIS            shift and go to state 115


state 45

    (66) ReverseAxis -> ANCESTOR_OR_SELF . AXIS

    AXIS            shift and go to state 116


state 46

    (67) AbbrevReverseStep -> DOUBLEDOT .

    [               reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    SLASH           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    DOUBLESLASH     reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    INTERSECT       reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    EXCEPT          reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    UNION           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    |               reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    *               reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    DIV             reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    IDIV            reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    MOD             reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    +               reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    -               reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    EQstr           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    NEstr           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    LTstr           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    LEstr           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    GTstr           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    GEstr           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    EQsym           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    NEsym           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    LTsym           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    LEsym           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    GTsym           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    GEsym           reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    IS              reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    AND             reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    OR              reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    ,               reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    $end            reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    )               reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)
    ]               reduce using rule 67 (AbbrevReverseStep -> DOUBLEDOT .)


state 47

    (70) ForwardAxis -> CHILD . AXIS

    AXIS            shift and go to state 117


state 48

    (71) ForwardAxis -> DESCENDANT . AXIS

    AXIS            shift and go to state 118


state 49

    (72) ForwardAxis -> ATTRIBUTE . AXIS
    (90) AttributeTest -> ATTRIBUTE . ( AttributeNameOrWildcard )
    (91) AttributeTest -> ATTRIBUTE . ( )

    AXIS            shift and go to state 119
    (               shift and go to state 120


state 50

    (73) ForwardAxis -> SELF . AXIS

    AXIS            shift and go to state 121


state 51

    (74) ForwardAxis -> DESCENDANT_OR_SELF . AXIS

    AXIS            shift and go to state 122


state 52

    (75) ForwardAxis -> FOLLOWING_SIBLING . AXIS

    AXIS            shift and go to state 123


state 53

    (76) ForwardAxis -> FOLLOWING . AXIS

    AXIS            shift and go to state 124


state 54

    (77) ForwardAxis -> NAMESPACE . AXIS

    AXIS            shift and go to state 125


state 55

    (78) AbbrevForwardStep -> @ . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    EQNAME          shift and go to state 103
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    ATTRIBUTE       shift and go to state 104
    NODE            shift and go to state 62

    NodeTest                       shift and go to state 126
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 56

    (80) NodeTest -> KindTest .

    [               reduce using rule 80 (NodeTest -> KindTest .)
    SLASH           reduce using rule 80 (NodeTest -> KindTest .)
    DOUBLESLASH     reduce using rule 80 (NodeTest -> KindTest .)
    INTERSECT       reduce using rule 80 (NodeTest -> KindTest .)
    EXCEPT          reduce using rule 80 (NodeTest -> KindTest .)
    UNION           reduce using rule 80 (NodeTest -> KindTest .)
    |               reduce using rule 80 (NodeTest -> KindTest .)
    *               reduce using rule 80 (NodeTest -> KindTest .)
    DIV             reduce using rule 80 (NodeTest -> KindTest .)
    IDIV            reduce using rule 80 (NodeTest -> KindTest .)
    MOD             reduce using rule 80 (NodeTest -> KindTest .)
    +               reduce using rule 80 (NodeTest -> KindTest .)
    -               reduce using rule 80 (NodeTest -> KindTest .)
    EQstr           reduce using rule 80 (NodeTest -> KindTest .)
    NEstr           reduce using rule 80 (NodeTest -> KindTest .)
    LTstr           reduce using rule 80 (NodeTest -> KindTest .)
    LEstr           reduce using rule 80 (NodeTest -> KindTest .)
    GTstr           reduce using rule 80 (NodeTest -> KindTest .)
    GEstr           reduce using rule 80 (NodeTest -> KindTest .)
    EQsym           reduce using rule 80 (NodeTest -> KindTest .)
    NEsym           reduce using rule 80 (NodeTest -> KindTest .)
    LTsym           reduce using rule 80 (NodeTest -> KindTest .)
    LEsym           reduce using rule 80 (NodeTest -> KindTest .)
    GTsym           reduce using rule 80 (NodeTest -> KindTest .)
    GEsym           reduce using rule 80 (NodeTest -> KindTest .)
    IS              reduce using rule 80 (NodeTest -> KindTest .)
    AND             reduce using rule 80 (NodeTest -> KindTest .)
    OR              reduce using rule 80 (NodeTest -> KindTest .)
    ,               reduce using rule 80 (NodeTest -> KindTest .)
    $end            reduce using rule 80 (NodeTest -> KindTest .)
    )               reduce using rule 80 (NodeTest -> KindTest .)
    ]               reduce using rule 80 (NodeTest -> KindTest .)


state 57

    (81) NodeTest -> NameTest .

    [               reduce using rule 81 (NodeTest -> NameTest .)
    SLASH           reduce using rule 81 (NodeTest -> NameTest .)
    DOUBLESLASH     reduce using rule 81 (NodeTest -> NameTest .)
    INTERSECT       reduce using rule 81 (NodeTest -> NameTest .)
    EXCEPT          reduce using rule 81 (NodeTest -> NameTest .)
    UNION           reduce using rule 81 (NodeTest -> NameTest .)
    |               reduce using rule 81 (NodeTest -> NameTest .)
    *               reduce using rule 81 (NodeTest -> NameTest .)
    DIV             reduce using rule 81 (NodeTest -> NameTest .)
    IDIV            reduce using rule 81 (NodeTest -> NameTest .)
    MOD             reduce using rule 81 (NodeTest -> NameTest .)
    +               reduce using rule 81 (NodeTest -> NameTest .)
    -               reduce using rule 81 (NodeTest -> NameTest .)
    EQstr           reduce using rule 81 (NodeTest -> NameTest .)
    NEstr           reduce using rule 81 (NodeTest -> NameTest .)
    LTstr           reduce using rule 81 (NodeTest -> NameTest .)
    LEstr           reduce using rule 81 (NodeTest -> NameTest .)
    GTstr           reduce using rule 81 (NodeTest -> NameTest .)
    GEstr           reduce using rule 81 (NodeTest -> NameTest .)
    EQsym           reduce using rule 81 (NodeTest -> NameTest .)
    NEsym           reduce using rule 81 (NodeTest -> NameTest .)
    LTsym           reduce using rule 81 (NodeTest -> NameTest .)
    LEsym           reduce using rule 81 (NodeTest -> NameTest .)
    GTsym           reduce using rule 81 (NodeTest -> NameTest .)
    GEsym           reduce using rule 81 (NodeTest -> NameTest .)
    IS              reduce using rule 81 (NodeTest -> NameTest .)
    AND             reduce using rule 81 (NodeTest -> NameTest .)
    OR              reduce using rule 81 (NodeTest -> NameTest .)
    ,               reduce using rule 81 (NodeTest -> NameTest .)
    $end            reduce using rule 81 (NodeTest -> NameTest .)
    )               reduce using rule 81 (NodeTest -> NameTest .)
    ]               reduce using rule 81 (NodeTest -> NameTest .)


state 58

    (82) KindTest -> ElementTest .

    [               reduce using rule 82 (KindTest -> ElementTest .)
    SLASH           reduce using rule 82 (KindTest -> ElementTest .)
    DOUBLESLASH     reduce using rule 82 (KindTest -> ElementTest .)
    INTERSECT       reduce using rule 82 (KindTest -> ElementTest .)
    EXCEPT          reduce using rule 82 (KindTest -> ElementTest .)
    UNION           reduce using rule 82 (KindTest -> ElementTest .)
    |               reduce using rule 82 (KindTest -> ElementTest .)
    *               reduce using rule 82 (KindTest -> ElementTest .)
    DIV             reduce using rule 82 (KindTest -> ElementTest .)
    IDIV            reduce using rule 82 (KindTest -> ElementTest .)
    MOD             reduce using rule 82 (KindTest -> ElementTest .)
    +               reduce using rule 82 (KindTest -> ElementTest .)
    -               reduce using rule 82 (KindTest -> ElementTest .)
    EQstr           reduce using rule 82 (KindTest -> ElementTest .)
    NEstr           reduce using rule 82 (KindTest -> ElementTest .)
    LTstr           reduce using rule 82 (KindTest -> ElementTest .)
    LEstr           reduce using rule 82 (KindTest -> ElementTest .)
    GTstr           reduce using rule 82 (KindTest -> ElementTest .)
    GEstr           reduce using rule 82 (KindTest -> ElementTest .)
    EQsym           reduce using rule 82 (KindTest -> ElementTest .)
    NEsym           reduce using rule 82 (KindTest -> ElementTest .)
    LTsym           reduce using rule 82 (KindTest -> ElementTest .)
    LEsym           reduce using rule 82 (KindTest -> ElementTest .)
    GTsym           reduce using rule 82 (KindTest -> ElementTest .)
    GEsym           reduce using rule 82 (KindTest -> ElementTest .)
    IS              reduce using rule 82 (KindTest -> ElementTest .)
    AND             reduce using rule 82 (KindTest -> ElementTest .)
    OR              reduce using rule 82 (KindTest -> ElementTest .)
    ,               reduce using rule 82 (KindTest -> ElementTest .)
    $end            reduce using rule 82 (KindTest -> ElementTest .)
    )               reduce using rule 82 (KindTest -> ElementTest .)
    ]               reduce using rule 82 (KindTest -> ElementTest .)


state 59

    (83) KindTest -> AttributeTest .

    [               reduce using rule 83 (KindTest -> AttributeTest .)
    SLASH           reduce using rule 83 (KindTest -> AttributeTest .)
    DOUBLESLASH     reduce using rule 83 (KindTest -> AttributeTest .)
    INTERSECT       reduce using rule 83 (KindTest -> AttributeTest .)
    EXCEPT          reduce using rule 83 (KindTest -> AttributeTest .)
    UNION           reduce using rule 83 (KindTest -> AttributeTest .)
    |               reduce using rule 83 (KindTest -> AttributeTest .)
    *               reduce using rule 83 (KindTest -> AttributeTest .)
    DIV             reduce using rule 83 (KindTest -> AttributeTest .)
    IDIV            reduce using rule 83 (KindTest -> AttributeTest .)
    MOD             reduce using rule 83 (KindTest -> AttributeTest .)
    +               reduce using rule 83 (KindTest -> AttributeTest .)
    -               reduce using rule 83 (KindTest -> AttributeTest .)
    EQstr           reduce using rule 83 (KindTest -> AttributeTest .)
    NEstr           reduce using rule 83 (KindTest -> AttributeTest .)
    LTstr           reduce using rule 83 (KindTest -> AttributeTest .)
    LEstr           reduce using rule 83 (KindTest -> AttributeTest .)
    GTstr           reduce using rule 83 (KindTest -> AttributeTest .)
    GEstr           reduce using rule 83 (KindTest -> AttributeTest .)
    EQsym           reduce using rule 83 (KindTest -> AttributeTest .)
    NEsym           reduce using rule 83 (KindTest -> AttributeTest .)
    LTsym           reduce using rule 83 (KindTest -> AttributeTest .)
    LEsym           reduce using rule 83 (KindTest -> AttributeTest .)
    GTsym           reduce using rule 83 (KindTest -> AttributeTest .)
    GEsym           reduce using rule 83 (KindTest -> AttributeTest .)
    IS              reduce using rule 83 (KindTest -> AttributeTest .)
    AND             reduce using rule 83 (KindTest -> AttributeTest .)
    OR              reduce using rule 83 (KindTest -> AttributeTest .)
    ,               reduce using rule 83 (KindTest -> AttributeTest .)
    $end            reduce using rule 83 (KindTest -> AttributeTest .)
    )               reduce using rule 83 (KindTest -> AttributeTest .)
    ]               reduce using rule 83 (KindTest -> AttributeTest .)


state 60

    (84) KindTest -> AnyKindTest .

    [               reduce using rule 84 (KindTest -> AnyKindTest .)
    SLASH           reduce using rule 84 (KindTest -> AnyKindTest .)
    DOUBLESLASH     reduce using rule 84 (KindTest -> AnyKindTest .)
    INTERSECT       reduce using rule 84 (KindTest -> AnyKindTest .)
    EXCEPT          reduce using rule 84 (KindTest -> AnyKindTest .)
    UNION           reduce using rule 84 (KindTest -> AnyKindTest .)
    |               reduce using rule 84 (KindTest -> AnyKindTest .)
    *               reduce using rule 84 (KindTest -> AnyKindTest .)
    DIV             reduce using rule 84 (KindTest -> AnyKindTest .)
    IDIV            reduce using rule 84 (KindTest -> AnyKindTest .)
    MOD             reduce using rule 84 (KindTest -> AnyKindTest .)
    +               reduce using rule 84 (KindTest -> AnyKindTest .)
    -               reduce using rule 84 (KindTest -> AnyKindTest .)
    EQstr           reduce using rule 84 (KindTest -> AnyKindTest .)
    NEstr           reduce using rule 84 (KindTest -> AnyKindTest .)
    LTstr           reduce using rule 84 (KindTest -> AnyKindTest .)
    LEstr           reduce using rule 84 (KindTest -> AnyKindTest .)
    GTstr           reduce using rule 84 (KindTest -> AnyKindTest .)
    GEstr           reduce using rule 84 (KindTest -> AnyKindTest .)
    EQsym           reduce using rule 84 (KindTest -> AnyKindTest .)
    NEsym           reduce using rule 84 (KindTest -> AnyKindTest .)
    LTsym           reduce using rule 84 (KindTest -> AnyKindTest .)
    LEsym           reduce using rule 84 (KindTest -> AnyKindTest .)
    GTsym           reduce using rule 84 (KindTest -> AnyKindTest .)
    GEsym           reduce using rule 84 (KindTest -> AnyKindTest .)
    IS              reduce using rule 84 (KindTest -> AnyKindTest .)
    AND             reduce using rule 84 (KindTest -> AnyKindTest .)
    OR              reduce using rule 84 (KindTest -> AnyKindTest .)
    ,               reduce using rule 84 (KindTest -> AnyKindTest .)
    $end            reduce using rule 84 (KindTest -> AnyKindTest .)
    )               reduce using rule 84 (KindTest -> AnyKindTest .)
    ]               reduce using rule 84 (KindTest -> AnyKindTest .)


state 61

    (85) ElementTest -> ELEMENT . ( ElementNameOrWildcard )
    (86) ElementTest -> ELEMENT . ( )

    (               shift and go to state 127


state 62

    (95) AnyKindTest -> NODE . ( )

    (               shift and go to state 128


state 63

    (4) ExprList -> ExprList , . ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    ExprSingle                     shift and go to state 129
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 64

    (6) OrExpr -> AndExpr OR . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    AndExpr                        shift and go to state 130
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 65

    (8) AndExpr -> ComparisonExpr AND . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    ComparisonExpr                 shift and go to state 131
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 66

    (10) ComparisonExpr -> AdditiveExpr ValueComp . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    AdditiveExpr                   shift and go to state 132
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 67

    (11) ComparisonExpr -> AdditiveExpr NodeComp . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    AdditiveExpr                   shift and go to state 133
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 68

    (13) ValueComp -> EQstr .

    +               reduce using rule 13 (ValueComp -> EQstr .)
    -               reduce using rule 13 (ValueComp -> EQstr .)
    SLASH           reduce using rule 13 (ValueComp -> EQstr .)
    DOUBLESLASH     reduce using rule 13 (ValueComp -> EQstr .)
    CONTEXT         reduce using rule 13 (ValueComp -> EQstr .)
    STRING          reduce using rule 13 (ValueComp -> EQstr .)
    NUMBER          reduce using rule 13 (ValueComp -> EQstr .)
    $               reduce using rule 13 (ValueComp -> EQstr .)
    (               reduce using rule 13 (ValueComp -> EQstr .)
    EQNAME          reduce using rule 13 (ValueComp -> EQstr .)
    PARENT          reduce using rule 13 (ValueComp -> EQstr .)
    ANCESTOR        reduce using rule 13 (ValueComp -> EQstr .)
    PRECEDING_SIBLING reduce using rule 13 (ValueComp -> EQstr .)
    PRECEDING       reduce using rule 13 (ValueComp -> EQstr .)
    ANCESTOR_OR_SELF reduce using rule 13 (ValueComp -> EQstr .)
    DOUBLEDOT       reduce using rule 13 (ValueComp -> EQstr .)
    CHILD           reduce using rule 13 (ValueComp -> EQstr .)
    DESCENDANT      reduce using rule 13 (ValueComp -> EQstr .)
    ATTRIBUTE       reduce using rule 13 (ValueComp -> EQstr .)
    SELF            reduce using rule 13 (ValueComp -> EQstr .)
    DESCENDANT_OR_SELF reduce using rule 13 (ValueComp -> EQstr .)
    FOLLOWING_SIBLING reduce using rule 13 (ValueComp -> EQstr .)
    FOLLOWING       reduce using rule 13 (ValueComp -> EQstr .)
    NAMESPACE       reduce using rule 13 (ValueComp -> EQstr .)
    @               reduce using rule 13 (ValueComp -> EQstr .)
    *               reduce using rule 13 (ValueComp -> EQstr .)
    ELEMENT         reduce using rule 13 (ValueComp -> EQstr .)
    NODE            reduce using rule 13 (ValueComp -> EQstr .)


state 69

    (14) ValueComp -> NEstr .

    +               reduce using rule 14 (ValueComp -> NEstr .)
    -               reduce using rule 14 (ValueComp -> NEstr .)
    SLASH           reduce using rule 14 (ValueComp -> NEstr .)
    DOUBLESLASH     reduce using rule 14 (ValueComp -> NEstr .)
    CONTEXT         reduce using rule 14 (ValueComp -> NEstr .)
    STRING          reduce using rule 14 (ValueComp -> NEstr .)
    NUMBER          reduce using rule 14 (ValueComp -> NEstr .)
    $               reduce using rule 14 (ValueComp -> NEstr .)
    (               reduce using rule 14 (ValueComp -> NEstr .)
    EQNAME          reduce using rule 14 (ValueComp -> NEstr .)
    PARENT          reduce using rule 14 (ValueComp -> NEstr .)
    ANCESTOR        reduce using rule 14 (ValueComp -> NEstr .)
    PRECEDING_SIBLING reduce using rule 14 (ValueComp -> NEstr .)
    PRECEDING       reduce using rule 14 (ValueComp -> NEstr .)
    ANCESTOR_OR_SELF reduce using rule 14 (ValueComp -> NEstr .)
    DOUBLEDOT       reduce using rule 14 (ValueComp -> NEstr .)
    CHILD           reduce using rule 14 (ValueComp -> NEstr .)
    DESCENDANT      reduce using rule 14 (ValueComp -> NEstr .)
    ATTRIBUTE       reduce using rule 14 (ValueComp -> NEstr .)
    SELF            reduce using rule 14 (ValueComp -> NEstr .)
    DESCENDANT_OR_SELF reduce using rule 14 (ValueComp -> NEstr .)
    FOLLOWING_SIBLING reduce using rule 14 (ValueComp -> NEstr .)
    FOLLOWING       reduce using rule 14 (ValueComp -> NEstr .)
    NAMESPACE       reduce using rule 14 (ValueComp -> NEstr .)
    @               reduce using rule 14 (ValueComp -> NEstr .)
    *               reduce using rule 14 (ValueComp -> NEstr .)
    ELEMENT         reduce using rule 14 (ValueComp -> NEstr .)
    NODE            reduce using rule 14 (ValueComp -> NEstr .)


state 70

    (15) ValueComp -> LTstr .

    +               reduce using rule 15 (ValueComp -> LTstr .)
    -               reduce using rule 15 (ValueComp -> LTstr .)
    SLASH           reduce using rule 15 (ValueComp -> LTstr .)
    DOUBLESLASH     reduce using rule 15 (ValueComp -> LTstr .)
    CONTEXT         reduce using rule 15 (ValueComp -> LTstr .)
    STRING          reduce using rule 15 (ValueComp -> LTstr .)
    NUMBER          reduce using rule 15 (ValueComp -> LTstr .)
    $               reduce using rule 15 (ValueComp -> LTstr .)
    (               reduce using rule 15 (ValueComp -> LTstr .)
    EQNAME          reduce using rule 15 (ValueComp -> LTstr .)
    PARENT          reduce using rule 15 (ValueComp -> LTstr .)
    ANCESTOR        reduce using rule 15 (ValueComp -> LTstr .)
    PRECEDING_SIBLING reduce using rule 15 (ValueComp -> LTstr .)
    PRECEDING       reduce using rule 15 (ValueComp -> LTstr .)
    ANCESTOR_OR_SELF reduce using rule 15 (ValueComp -> LTstr .)
    DOUBLEDOT       reduce using rule 15 (ValueComp -> LTstr .)
    CHILD           reduce using rule 15 (ValueComp -> LTstr .)
    DESCENDANT      reduce using rule 15 (ValueComp -> LTstr .)
    ATTRIBUTE       reduce using rule 15 (ValueComp -> LTstr .)
    SELF            reduce using rule 15 (ValueComp -> LTstr .)
    DESCENDANT_OR_SELF reduce using rule 15 (ValueComp -> LTstr .)
    FOLLOWING_SIBLING reduce using rule 15 (ValueComp -> LTstr .)
    FOLLOWING       reduce using rule 15 (ValueComp -> LTstr .)
    NAMESPACE       reduce using rule 15 (ValueComp -> LTstr .)
    @               reduce using rule 15 (ValueComp -> LTstr .)
    *               reduce using rule 15 (ValueComp -> LTstr .)
    ELEMENT         reduce using rule 15 (ValueComp -> LTstr .)
    NODE            reduce using rule 15 (ValueComp -> LTstr .)


state 71

    (16) ValueComp -> LEstr .

    +               reduce using rule 16 (ValueComp -> LEstr .)
    -               reduce using rule 16 (ValueComp -> LEstr .)
    SLASH           reduce using rule 16 (ValueComp -> LEstr .)
    DOUBLESLASH     reduce using rule 16 (ValueComp -> LEstr .)
    CONTEXT         reduce using rule 16 (ValueComp -> LEstr .)
    STRING          reduce using rule 16 (ValueComp -> LEstr .)
    NUMBER          reduce using rule 16 (ValueComp -> LEstr .)
    $               reduce using rule 16 (ValueComp -> LEstr .)
    (               reduce using rule 16 (ValueComp -> LEstr .)
    EQNAME          reduce using rule 16 (ValueComp -> LEstr .)
    PARENT          reduce using rule 16 (ValueComp -> LEstr .)
    ANCESTOR        reduce using rule 16 (ValueComp -> LEstr .)
    PRECEDING_SIBLING reduce using rule 16 (ValueComp -> LEstr .)
    PRECEDING       reduce using rule 16 (ValueComp -> LEstr .)
    ANCESTOR_OR_SELF reduce using rule 16 (ValueComp -> LEstr .)
    DOUBLEDOT       reduce using rule 16 (ValueComp -> LEstr .)
    CHILD           reduce using rule 16 (ValueComp -> LEstr .)
    DESCENDANT      reduce using rule 16 (ValueComp -> LEstr .)
    ATTRIBUTE       reduce using rule 16 (ValueComp -> LEstr .)
    SELF            reduce using rule 16 (ValueComp -> LEstr .)
    DESCENDANT_OR_SELF reduce using rule 16 (ValueComp -> LEstr .)
    FOLLOWING_SIBLING reduce using rule 16 (ValueComp -> LEstr .)
    FOLLOWING       reduce using rule 16 (ValueComp -> LEstr .)
    NAMESPACE       reduce using rule 16 (ValueComp -> LEstr .)
    @               reduce using rule 16 (ValueComp -> LEstr .)
    *               reduce using rule 16 (ValueComp -> LEstr .)
    ELEMENT         reduce using rule 16 (ValueComp -> LEstr .)
    NODE            reduce using rule 16 (ValueComp -> LEstr .)


state 72

    (17) ValueComp -> GTstr .

    +               reduce using rule 17 (ValueComp -> GTstr .)
    -               reduce using rule 17 (ValueComp -> GTstr .)
    SLASH           reduce using rule 17 (ValueComp -> GTstr .)
    DOUBLESLASH     reduce using rule 17 (ValueComp -> GTstr .)
    CONTEXT         reduce using rule 17 (ValueComp -> GTstr .)
    STRING          reduce using rule 17 (ValueComp -> GTstr .)
    NUMBER          reduce using rule 17 (ValueComp -> GTstr .)
    $               reduce using rule 17 (ValueComp -> GTstr .)
    (               reduce using rule 17 (ValueComp -> GTstr .)
    EQNAME          reduce using rule 17 (ValueComp -> GTstr .)
    PARENT          reduce using rule 17 (ValueComp -> GTstr .)
    ANCESTOR        reduce using rule 17 (ValueComp -> GTstr .)
    PRECEDING_SIBLING reduce using rule 17 (ValueComp -> GTstr .)
    PRECEDING       reduce using rule 17 (ValueComp -> GTstr .)
    ANCESTOR_OR_SELF reduce using rule 17 (ValueComp -> GTstr .)
    DOUBLEDOT       reduce using rule 17 (ValueComp -> GTstr .)
    CHILD           reduce using rule 17 (ValueComp -> GTstr .)
    DESCENDANT      reduce using rule 17 (ValueComp -> GTstr .)
    ATTRIBUTE       reduce using rule 17 (ValueComp -> GTstr .)
    SELF            reduce using rule 17 (ValueComp -> GTstr .)
    DESCENDANT_OR_SELF reduce using rule 17 (ValueComp -> GTstr .)
    FOLLOWING_SIBLING reduce using rule 17 (ValueComp -> GTstr .)
    FOLLOWING       reduce using rule 17 (ValueComp -> GTstr .)
    NAMESPACE       reduce using rule 17 (ValueComp -> GTstr .)
    @               reduce using rule 17 (ValueComp -> GTstr .)
    *               reduce using rule 17 (ValueComp -> GTstr .)
    ELEMENT         reduce using rule 17 (ValueComp -> GTstr .)
    NODE            reduce using rule 17 (ValueComp -> GTstr .)


state 73

    (18) ValueComp -> GEstr .

    +               reduce using rule 18 (ValueComp -> GEstr .)
    -               reduce using rule 18 (ValueComp -> GEstr .)
    SLASH           reduce using rule 18 (ValueComp -> GEstr .)
    DOUBLESLASH     reduce using rule 18 (ValueComp -> GEstr .)
    CONTEXT         reduce using rule 18 (ValueComp -> GEstr .)
    STRING          reduce using rule 18 (ValueComp -> GEstr .)
    NUMBER          reduce using rule 18 (ValueComp -> GEstr .)
    $               reduce using rule 18 (ValueComp -> GEstr .)
    (               reduce using rule 18 (ValueComp -> GEstr .)
    EQNAME          reduce using rule 18 (ValueComp -> GEstr .)
    PARENT          reduce using rule 18 (ValueComp -> GEstr .)
    ANCESTOR        reduce using rule 18 (ValueComp -> GEstr .)
    PRECEDING_SIBLING reduce using rule 18 (ValueComp -> GEstr .)
    PRECEDING       reduce using rule 18 (ValueComp -> GEstr .)
    ANCESTOR_OR_SELF reduce using rule 18 (ValueComp -> GEstr .)
    DOUBLEDOT       reduce using rule 18 (ValueComp -> GEstr .)
    CHILD           reduce using rule 18 (ValueComp -> GEstr .)
    DESCENDANT      reduce using rule 18 (ValueComp -> GEstr .)
    ATTRIBUTE       reduce using rule 18 (ValueComp -> GEstr .)
    SELF            reduce using rule 18 (ValueComp -> GEstr .)
    DESCENDANT_OR_SELF reduce using rule 18 (ValueComp -> GEstr .)
    FOLLOWING_SIBLING reduce using rule 18 (ValueComp -> GEstr .)
    FOLLOWING       reduce using rule 18 (ValueComp -> GEstr .)
    NAMESPACE       reduce using rule 18 (ValueComp -> GEstr .)
    @               reduce using rule 18 (ValueComp -> GEstr .)
    *               reduce using rule 18 (ValueComp -> GEstr .)
    ELEMENT         reduce using rule 18 (ValueComp -> GEstr .)
    NODE            reduce using rule 18 (ValueComp -> GEstr .)


state 74

    (19) ValueComp -> EQsym .

    +               reduce using rule 19 (ValueComp -> EQsym .)
    -               reduce using rule 19 (ValueComp -> EQsym .)
    SLASH           reduce using rule 19 (ValueComp -> EQsym .)
    DOUBLESLASH     reduce using rule 19 (ValueComp -> EQsym .)
    CONTEXT         reduce using rule 19 (ValueComp -> EQsym .)
    STRING          reduce using rule 19 (ValueComp -> EQsym .)
    NUMBER          reduce using rule 19 (ValueComp -> EQsym .)
    $               reduce using rule 19 (ValueComp -> EQsym .)
    (               reduce using rule 19 (ValueComp -> EQsym .)
    EQNAME          reduce using rule 19 (ValueComp -> EQsym .)
    PARENT          reduce using rule 19 (ValueComp -> EQsym .)
    ANCESTOR        reduce using rule 19 (ValueComp -> EQsym .)
    PRECEDING_SIBLING reduce using rule 19 (ValueComp -> EQsym .)
    PRECEDING       reduce using rule 19 (ValueComp -> EQsym .)
    ANCESTOR_OR_SELF reduce using rule 19 (ValueComp -> EQsym .)
    DOUBLEDOT       reduce using rule 19 (ValueComp -> EQsym .)
    CHILD           reduce using rule 19 (ValueComp -> EQsym .)
    DESCENDANT      reduce using rule 19 (ValueComp -> EQsym .)
    ATTRIBUTE       reduce using rule 19 (ValueComp -> EQsym .)
    SELF            reduce using rule 19 (ValueComp -> EQsym .)
    DESCENDANT_OR_SELF reduce using rule 19 (ValueComp -> EQsym .)
    FOLLOWING_SIBLING reduce using rule 19 (ValueComp -> EQsym .)
    FOLLOWING       reduce using rule 19 (ValueComp -> EQsym .)
    NAMESPACE       reduce using rule 19 (ValueComp -> EQsym .)
    @               reduce using rule 19 (ValueComp -> EQsym .)
    *               reduce using rule 19 (ValueComp -> EQsym .)
    ELEMENT         reduce using rule 19 (ValueComp -> EQsym .)
    NODE            reduce using rule 19 (ValueComp -> EQsym .)


state 75

    (20) ValueComp -> NEsym .

    +               reduce using rule 20 (ValueComp -> NEsym .)
    -               reduce using rule 20 (ValueComp -> NEsym .)
    SLASH           reduce using rule 20 (ValueComp -> NEsym .)
    DOUBLESLASH     reduce using rule 20 (ValueComp -> NEsym .)
    CONTEXT         reduce using rule 20 (ValueComp -> NEsym .)
    STRING          reduce using rule 20 (ValueComp -> NEsym .)
    NUMBER          reduce using rule 20 (ValueComp -> NEsym .)
    $               reduce using rule 20 (ValueComp -> NEsym .)
    (               reduce using rule 20 (ValueComp -> NEsym .)
    EQNAME          reduce using rule 20 (ValueComp -> NEsym .)
    PARENT          reduce using rule 20 (ValueComp -> NEsym .)
    ANCESTOR        reduce using rule 20 (ValueComp -> NEsym .)
    PRECEDING_SIBLING reduce using rule 20 (ValueComp -> NEsym .)
    PRECEDING       reduce using rule 20 (ValueComp -> NEsym .)
    ANCESTOR_OR_SELF reduce using rule 20 (ValueComp -> NEsym .)
    DOUBLEDOT       reduce using rule 20 (ValueComp -> NEsym .)
    CHILD           reduce using rule 20 (ValueComp -> NEsym .)
    DESCENDANT      reduce using rule 20 (ValueComp -> NEsym .)
    ATTRIBUTE       reduce using rule 20 (ValueComp -> NEsym .)
    SELF            reduce using rule 20 (ValueComp -> NEsym .)
    DESCENDANT_OR_SELF reduce using rule 20 (ValueComp -> NEsym .)
    FOLLOWING_SIBLING reduce using rule 20 (ValueComp -> NEsym .)
    FOLLOWING       reduce using rule 20 (ValueComp -> NEsym .)
    NAMESPACE       reduce using rule 20 (ValueComp -> NEsym .)
    @               reduce using rule 20 (ValueComp -> NEsym .)
    *               reduce using rule 20 (ValueComp -> NEsym .)
    ELEMENT         reduce using rule 20 (ValueComp -> NEsym .)
    NODE            reduce using rule 20 (ValueComp -> NEsym .)


state 76

    (21) ValueComp -> LTsym .

    +               reduce using rule 21 (ValueComp -> LTsym .)
    -               reduce using rule 21 (ValueComp -> LTsym .)
    SLASH           reduce using rule 21 (ValueComp -> LTsym .)
    DOUBLESLASH     reduce using rule 21 (ValueComp -> LTsym .)
    CONTEXT         reduce using rule 21 (ValueComp -> LTsym .)
    STRING          reduce using rule 21 (ValueComp -> LTsym .)
    NUMBER          reduce using rule 21 (ValueComp -> LTsym .)
    $               reduce using rule 21 (ValueComp -> LTsym .)
    (               reduce using rule 21 (ValueComp -> LTsym .)
    EQNAME          reduce using rule 21 (ValueComp -> LTsym .)
    PARENT          reduce using rule 21 (ValueComp -> LTsym .)
    ANCESTOR        reduce using rule 21 (ValueComp -> LTsym .)
    PRECEDING_SIBLING reduce using rule 21 (ValueComp -> LTsym .)
    PRECEDING       reduce using rule 21 (ValueComp -> LTsym .)
    ANCESTOR_OR_SELF reduce using rule 21 (ValueComp -> LTsym .)
    DOUBLEDOT       reduce using rule 21 (ValueComp -> LTsym .)
    CHILD           reduce using rule 21 (ValueComp -> LTsym .)
    DESCENDANT      reduce using rule 21 (ValueComp -> LTsym .)
    ATTRIBUTE       reduce using rule 21 (ValueComp -> LTsym .)
    SELF            reduce using rule 21 (ValueComp -> LTsym .)
    DESCENDANT_OR_SELF reduce using rule 21 (ValueComp -> LTsym .)
    FOLLOWING_SIBLING reduce using rule 21 (ValueComp -> LTsym .)
    FOLLOWING       reduce using rule 21 (ValueComp -> LTsym .)
    NAMESPACE       reduce using rule 21 (ValueComp -> LTsym .)
    @               reduce using rule 21 (ValueComp -> LTsym .)
    *               reduce using rule 21 (ValueComp -> LTsym .)
    ELEMENT         reduce using rule 21 (ValueComp -> LTsym .)
    NODE            reduce using rule 21 (ValueComp -> LTsym .)


state 77

    (22) ValueComp -> LEsym .

    +               reduce using rule 22 (ValueComp -> LEsym .)
    -               reduce using rule 22 (ValueComp -> LEsym .)
    SLASH           reduce using rule 22 (ValueComp -> LEsym .)
    DOUBLESLASH     reduce using rule 22 (ValueComp -> LEsym .)
    CONTEXT         reduce using rule 22 (ValueComp -> LEsym .)
    STRING          reduce using rule 22 (ValueComp -> LEsym .)
    NUMBER          reduce using rule 22 (ValueComp -> LEsym .)
    $               reduce using rule 22 (ValueComp -> LEsym .)
    (               reduce using rule 22 (ValueComp -> LEsym .)
    EQNAME          reduce using rule 22 (ValueComp -> LEsym .)
    PARENT          reduce using rule 22 (ValueComp -> LEsym .)
    ANCESTOR        reduce using rule 22 (ValueComp -> LEsym .)
    PRECEDING_SIBLING reduce using rule 22 (ValueComp -> LEsym .)
    PRECEDING       reduce using rule 22 (ValueComp -> LEsym .)
    ANCESTOR_OR_SELF reduce using rule 22 (ValueComp -> LEsym .)
    DOUBLEDOT       reduce using rule 22 (ValueComp -> LEsym .)
    CHILD           reduce using rule 22 (ValueComp -> LEsym .)
    DESCENDANT      reduce using rule 22 (ValueComp -> LEsym .)
    ATTRIBUTE       reduce using rule 22 (ValueComp -> LEsym .)
    SELF            reduce using rule 22 (ValueComp -> LEsym .)
    DESCENDANT_OR_SELF reduce using rule 22 (ValueComp -> LEsym .)
    FOLLOWING_SIBLING reduce using rule 22 (ValueComp -> LEsym .)
    FOLLOWING       reduce using rule 22 (ValueComp -> LEsym .)
    NAMESPACE       reduce using rule 22 (ValueComp -> LEsym .)
    @               reduce using rule 22 (ValueComp -> LEsym .)
    *               reduce using rule 22 (ValueComp -> LEsym .)
    ELEMENT         reduce using rule 22 (ValueComp -> LEsym .)
    NODE            reduce using rule 22 (ValueComp -> LEsym .)


state 78

    (23) ValueComp -> GTsym .

    +               reduce using rule 23 (ValueComp -> GTsym .)
    -               reduce using rule 23 (ValueComp -> GTsym .)
    SLASH           reduce using rule 23 (ValueComp -> GTsym .)
    DOUBLESLASH     reduce using rule 23 (ValueComp -> GTsym .)
    CONTEXT         reduce using rule 23 (ValueComp -> GTsym .)
    STRING          reduce using rule 23 (ValueComp -> GTsym .)
    NUMBER          reduce using rule 23 (ValueComp -> GTsym .)
    $               reduce using rule 23 (ValueComp -> GTsym .)
    (               reduce using rule 23 (ValueComp -> GTsym .)
    EQNAME          reduce using rule 23 (ValueComp -> GTsym .)
    PARENT          reduce using rule 23 (ValueComp -> GTsym .)
    ANCESTOR        reduce using rule 23 (ValueComp -> GTsym .)
    PRECEDING_SIBLING reduce using rule 23 (ValueComp -> GTsym .)
    PRECEDING       reduce using rule 23 (ValueComp -> GTsym .)
    ANCESTOR_OR_SELF reduce using rule 23 (ValueComp -> GTsym .)
    DOUBLEDOT       reduce using rule 23 (ValueComp -> GTsym .)
    CHILD           reduce using rule 23 (ValueComp -> GTsym .)
    DESCENDANT      reduce using rule 23 (ValueComp -> GTsym .)
    ATTRIBUTE       reduce using rule 23 (ValueComp -> GTsym .)
    SELF            reduce using rule 23 (ValueComp -> GTsym .)
    DESCENDANT_OR_SELF reduce using rule 23 (ValueComp -> GTsym .)
    FOLLOWING_SIBLING reduce using rule 23 (ValueComp -> GTsym .)
    FOLLOWING       reduce using rule 23 (ValueComp -> GTsym .)
    NAMESPACE       reduce using rule 23 (ValueComp -> GTsym .)
    @               reduce using rule 23 (ValueComp -> GTsym .)
    *               reduce using rule 23 (ValueComp -> GTsym .)
    ELEMENT         reduce using rule 23 (ValueComp -> GTsym .)
    NODE            reduce using rule 23 (ValueComp -> GTsym .)


state 79

    (24) ValueComp -> GEsym .

    +               reduce using rule 24 (ValueComp -> GEsym .)
    -               reduce using rule 24 (ValueComp -> GEsym .)
    SLASH           reduce using rule 24 (ValueComp -> GEsym .)
    DOUBLESLASH     reduce using rule 24 (ValueComp -> GEsym .)
    CONTEXT         reduce using rule 24 (ValueComp -> GEsym .)
    STRING          reduce using rule 24 (ValueComp -> GEsym .)
    NUMBER          reduce using rule 24 (ValueComp -> GEsym .)
    $               reduce using rule 24 (ValueComp -> GEsym .)
    (               reduce using rule 24 (ValueComp -> GEsym .)
    EQNAME          reduce using rule 24 (ValueComp -> GEsym .)
    PARENT          reduce using rule 24 (ValueComp -> GEsym .)
    ANCESTOR        reduce using rule 24 (ValueComp -> GEsym .)
    PRECEDING_SIBLING reduce using rule 24 (ValueComp -> GEsym .)
    PRECEDING       reduce using rule 24 (ValueComp -> GEsym .)
    ANCESTOR_OR_SELF reduce using rule 24 (ValueComp -> GEsym .)
    DOUBLEDOT       reduce using rule 24 (ValueComp -> GEsym .)
    CHILD           reduce using rule 24 (ValueComp -> GEsym .)
    DESCENDANT      reduce using rule 24 (ValueComp -> GEsym .)
    ATTRIBUTE       reduce using rule 24 (ValueComp -> GEsym .)
    SELF            reduce using rule 24 (ValueComp -> GEsym .)
    DESCENDANT_OR_SELF reduce using rule 24 (ValueComp -> GEsym .)
    FOLLOWING_SIBLING reduce using rule 24 (ValueComp -> GEsym .)
    FOLLOWING       reduce using rule 24 (ValueComp -> GEsym .)
    NAMESPACE       reduce using rule 24 (ValueComp -> GEsym .)
    @               reduce using rule 24 (ValueComp -> GEsym .)
    *               reduce using rule 24 (ValueComp -> GEsym .)
    ELEMENT         reduce using rule 24 (ValueComp -> GEsym .)
    NODE            reduce using rule 24 (ValueComp -> GEsym .)


state 80

    (25) NodeComp -> IS .

    +               reduce using rule 25 (NodeComp -> IS .)
    -               reduce using rule 25 (NodeComp -> IS .)
    SLASH           reduce using rule 25 (NodeComp -> IS .)
    DOUBLESLASH     reduce using rule 25 (NodeComp -> IS .)
    CONTEXT         reduce using rule 25 (NodeComp -> IS .)
    STRING          reduce using rule 25 (NodeComp -> IS .)
    NUMBER          reduce using rule 25 (NodeComp -> IS .)
    $               reduce using rule 25 (NodeComp -> IS .)
    (               reduce using rule 25 (NodeComp -> IS .)
    EQNAME          reduce using rule 25 (NodeComp -> IS .)
    PARENT          reduce using rule 25 (NodeComp -> IS .)
    ANCESTOR        reduce using rule 25 (NodeComp -> IS .)
    PRECEDING_SIBLING reduce using rule 25 (NodeComp -> IS .)
    PRECEDING       reduce using rule 25 (NodeComp -> IS .)
    ANCESTOR_OR_SELF reduce using rule 25 (NodeComp -> IS .)
    DOUBLEDOT       reduce using rule 25 (NodeComp -> IS .)
    CHILD           reduce using rule 25 (NodeComp -> IS .)
    DESCENDANT      reduce using rule 25 (NodeComp -> IS .)
    ATTRIBUTE       reduce using rule 25 (NodeComp -> IS .)
    SELF            reduce using rule 25 (NodeComp -> IS .)
    DESCENDANT_OR_SELF reduce using rule 25 (NodeComp -> IS .)
    FOLLOWING_SIBLING reduce using rule 25 (NodeComp -> IS .)
    FOLLOWING       reduce using rule 25 (NodeComp -> IS .)
    NAMESPACE       reduce using rule 25 (NodeComp -> IS .)
    @               reduce using rule 25 (NodeComp -> IS .)
    *               reduce using rule 25 (NodeComp -> IS .)
    ELEMENT         reduce using rule 25 (NodeComp -> IS .)
    NODE            reduce using rule 25 (NodeComp -> IS .)


state 81

    (26) AdditiveExpr -> MultiplicativeExpr + . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    MultiplicativeExpr             shift and go to state 134
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 82

    (27) AdditiveExpr -> MultiplicativeExpr - . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    MultiplicativeExpr             shift and go to state 135
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 83

    (40) UnaryExpr -> + ValueExpr .

    INTERSECT       reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    EXCEPT          reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    UNION           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    |               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    *               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    DIV             reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    IDIV            reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    MOD             reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    +               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    -               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    EQstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    NEstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    LTstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    LEstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    GTstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    GEstr           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    EQsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    NEsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    LTsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    LEsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    GTsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    GEsym           reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    IS              reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    AND             reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    OR              reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    ,               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    $end            reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    )               reduce using rule 40 (UnaryExpr -> + ValueExpr .)
    ]               reduce using rule 40 (UnaryExpr -> + ValueExpr .)


state 84

    (41) UnaryExpr -> - ValueExpr .

    INTERSECT       reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    EXCEPT          reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    UNION           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    |               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    *               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    DIV             reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    IDIV            reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    MOD             reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    +               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    -               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    EQstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    NEstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    LTstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    LEstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    GTstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    GEstr           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    EQsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    NEsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    LTsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    LEsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    GTsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    GEsym           reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    IS              reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    AND             reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    OR              reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    ,               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    $end            reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    )               reduce using rule 41 (UnaryExpr -> - ValueExpr .)
    ]               reduce using rule 41 (UnaryExpr -> - ValueExpr .)


state 85

    (29) MultiplicativeExpr -> UnionExpr * . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    UnionExpr                      shift and go to state 136
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 86

    (30) MultiplicativeExpr -> UnionExpr DIV . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    UnionExpr                      shift and go to state 137
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 87

    (31) MultiplicativeExpr -> UnionExpr IDIV . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    UnionExpr                      shift and go to state 138
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 88

    (32) MultiplicativeExpr -> UnionExpr MOD . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    UnionExpr                      shift and go to state 139
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 89

    (34) UnionExpr -> IntersectExceptExpr UNION . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    IntersectExceptExpr            shift and go to state 140
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 90

    (35) UnionExpr -> IntersectExceptExpr | . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    IntersectExceptExpr            shift and go to state 141
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 91

    (37) IntersectExceptExpr -> UnaryExpr INTERSECT . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    UnaryExpr                      shift and go to state 142
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 92

    (38) IntersectExceptExpr -> UnaryExpr EXCEPT . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    UnaryExpr                      shift and go to state 143
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 93

    (43) ValueExpr -> SLASH RelativePathExpr .

    INTERSECT       reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    EXCEPT          reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    UNION           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    |               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    *               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    DIV             reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    IDIV            reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    MOD             reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    +               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    -               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    EQstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    NEstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    LTstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    LEstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    GTstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    GEstr           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    EQsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    NEsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    LTsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    LEsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    GTsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    GEsym           reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    IS              reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    AND             reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    OR              reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    ,               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    $end            reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    )               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)
    ]               reduce using rule 43 (ValueExpr -> SLASH RelativePathExpr .)


state 94

    (45) ValueExpr -> DOUBLESLASH RelativePathExpr .

    INTERSECT       reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    EXCEPT          reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    UNION           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    |               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    *               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    DIV             reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    IDIV            reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    MOD             reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    +               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    -               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    EQstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    NEstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    LTstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    LEstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    GTstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    GEstr           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    EQsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    NEsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    LTsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    LEsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    GTsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    GEsym           reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    IS              reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    AND             reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    OR              reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    ,               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    $end            reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    )               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)
    ]               reduce using rule 45 (ValueExpr -> DOUBLESLASH RelativePathExpr .)


state 95

    (47) RelativePathExpr -> StepExpr SLASH . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    StepExpr                       shift and go to state 144
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 96

    (48) RelativePathExpr -> StepExpr DOUBLESLASH . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    StepExpr                       shift and go to state 145
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 97

    (52) PostfixExpr -> PrimaryExpr Predicate .

    SLASH           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    DOUBLESLASH     reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    INTERSECT       reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    EXCEPT          reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    UNION           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    |               reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    *               reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    DIV             reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    IDIV            reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    MOD             reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    +               reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    -               reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    EQstr           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    NEstr           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    LTstr           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    LEstr           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    GTstr           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    GEstr           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    EQsym           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    NEsym           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    LTsym           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    LEsym           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    GTsym           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    GEsym           reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    IS              reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    AND             reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    OR              reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    ,               reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    $end            reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    )               reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)
    ]               reduce using rule 52 (PostfixExpr -> PrimaryExpr Predicate .)


state 98

    (59) Predicate -> [ . Expr ]
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    Expr                           shift and go to state 146
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 99

    (54) AxisStep -> ReverseStep PredicateList .

    SLASH           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    DOUBLESLASH     reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    INTERSECT       reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    EXCEPT          reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    UNION           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    |               reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    *               reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    DIV             reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    IDIV            reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    MOD             reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    +               reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    -               reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    EQstr           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    NEstr           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    LTstr           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    LEstr           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    GTstr           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    GEstr           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    EQsym           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    NEsym           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    LTsym           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    LEsym           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    GTsym           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    GEsym           reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    IS              reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    AND             reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    OR              reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    ,               reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    $end            reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    )               reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)
    ]               reduce using rule 54 (AxisStep -> ReverseStep PredicateList .)


state 100

    (56) PredicateList -> Predicate . PredicateList
    (57) PredicateList -> Predicate .
    (56) PredicateList -> . Predicate PredicateList
    (57) PredicateList -> . Predicate
    (58) PredicateList -> .
    (59) Predicate -> . [ Expr ]

  ! reduce/reduce conflict for SLASH resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for DOUBLESLASH resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for INTERSECT resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for EXCEPT resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for UNION resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for | resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for * resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for DIV resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for IDIV resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for MOD resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for + resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for - resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for EQstr resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for NEstr resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for LTstr resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for LEstr resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for GTstr resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for GEstr resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for EQsym resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for NEsym resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for LTsym resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for LEsym resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for GTsym resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for GEsym resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for IS resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for AND resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for OR resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for , resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for $end resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for ) resolved using rule 57 (PredicateList -> Predicate .)
  ! reduce/reduce conflict for ] resolved using rule 57 (PredicateList -> Predicate .)
    SLASH           reduce using rule 57 (PredicateList -> Predicate .)
    DOUBLESLASH     reduce using rule 57 (PredicateList -> Predicate .)
    INTERSECT       reduce using rule 57 (PredicateList -> Predicate .)
    EXCEPT          reduce using rule 57 (PredicateList -> Predicate .)
    UNION           reduce using rule 57 (PredicateList -> Predicate .)
    |               reduce using rule 57 (PredicateList -> Predicate .)
    *               reduce using rule 57 (PredicateList -> Predicate .)
    DIV             reduce using rule 57 (PredicateList -> Predicate .)
    IDIV            reduce using rule 57 (PredicateList -> Predicate .)
    MOD             reduce using rule 57 (PredicateList -> Predicate .)
    +               reduce using rule 57 (PredicateList -> Predicate .)
    -               reduce using rule 57 (PredicateList -> Predicate .)
    EQstr           reduce using rule 57 (PredicateList -> Predicate .)
    NEstr           reduce using rule 57 (PredicateList -> Predicate .)
    LTstr           reduce using rule 57 (PredicateList -> Predicate .)
    LEstr           reduce using rule 57 (PredicateList -> Predicate .)
    GTstr           reduce using rule 57 (PredicateList -> Predicate .)
    GEstr           reduce using rule 57 (PredicateList -> Predicate .)
    EQsym           reduce using rule 57 (PredicateList -> Predicate .)
    NEsym           reduce using rule 57 (PredicateList -> Predicate .)
    LTsym           reduce using rule 57 (PredicateList -> Predicate .)
    LEsym           reduce using rule 57 (PredicateList -> Predicate .)
    GTsym           reduce using rule 57 (PredicateList -> Predicate .)
    GEsym           reduce using rule 57 (PredicateList -> Predicate .)
    IS              reduce using rule 57 (PredicateList -> Predicate .)
    AND             reduce using rule 57 (PredicateList -> Predicate .)
    OR              reduce using rule 57 (PredicateList -> Predicate .)
    ,               reduce using rule 57 (PredicateList -> Predicate .)
    $end            reduce using rule 57 (PredicateList -> Predicate .)
    )               reduce using rule 57 (PredicateList -> Predicate .)
    ]               reduce using rule 57 (PredicateList -> Predicate .)
    [               shift and go to state 98

  ! SLASH           [ reduce using rule 58 (PredicateList -> .) ]
  ! DOUBLESLASH     [ reduce using rule 58 (PredicateList -> .) ]
  ! INTERSECT       [ reduce using rule 58 (PredicateList -> .) ]
  ! EXCEPT          [ reduce using rule 58 (PredicateList -> .) ]
  ! UNION           [ reduce using rule 58 (PredicateList -> .) ]
  ! |               [ reduce using rule 58 (PredicateList -> .) ]
  ! *               [ reduce using rule 58 (PredicateList -> .) ]
  ! DIV             [ reduce using rule 58 (PredicateList -> .) ]
  ! IDIV            [ reduce using rule 58 (PredicateList -> .) ]
  ! MOD             [ reduce using rule 58 (PredicateList -> .) ]
  ! +               [ reduce using rule 58 (PredicateList -> .) ]
  ! -               [ reduce using rule 58 (PredicateList -> .) ]
  ! EQstr           [ reduce using rule 58 (PredicateList -> .) ]
  ! NEstr           [ reduce using rule 58 (PredicateList -> .) ]
  ! LTstr           [ reduce using rule 58 (PredicateList -> .) ]
  ! LEstr           [ reduce using rule 58 (PredicateList -> .) ]
  ! GTstr           [ reduce using rule 58 (PredicateList -> .) ]
  ! GEstr           [ reduce using rule 58 (PredicateList -> .) ]
  ! EQsym           [ reduce using rule 58 (PredicateList -> .) ]
  ! NEsym           [ reduce using rule 58 (PredicateList -> .) ]
  ! LTsym           [ reduce using rule 58 (PredicateList -> .) ]
  ! LEsym           [ reduce using rule 58 (PredicateList -> .) ]
  ! GTsym           [ reduce using rule 58 (PredicateList -> .) ]
  ! GEsym           [ reduce using rule 58 (PredicateList -> .) ]
  ! IS              [ reduce using rule 58 (PredicateList -> .) ]
  ! AND             [ reduce using rule 58 (PredicateList -> .) ]
  ! OR              [ reduce using rule 58 (PredicateList -> .) ]
  ! ,               [ reduce using rule 58 (PredicateList -> .) ]
  ! $end            [ reduce using rule 58 (PredicateList -> .) ]
  ! )               [ reduce using rule 58 (PredicateList -> .) ]
  ! ]               [ reduce using rule 58 (PredicateList -> .) ]

    Predicate                      shift and go to state 100
    PredicateList                  shift and go to state 147

state 101

    (55) AxisStep -> ForwardStep PredicateList .

    SLASH           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    DOUBLESLASH     reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    INTERSECT       reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    EXCEPT          reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    UNION           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    |               reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    *               reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    DIV             reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    IDIV            reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    MOD             reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    +               reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    -               reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    EQstr           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    NEstr           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    LTstr           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    LEstr           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    GTstr           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    GEstr           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    EQsym           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    NEsym           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    LTsym           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    LEsym           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    GTsym           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    GEsym           reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    IS              reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    AND             reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    OR              reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    ,               reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    $end            reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    )               reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)
    ]               reduce using rule 55 (AxisStep -> ForwardStep PredicateList .)


state 102

    (60) ReverseStep -> ReverseAxis NodeTest .

    [               reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    SLASH           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    DOUBLESLASH     reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    INTERSECT       reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    EXCEPT          reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    UNION           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    |               reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    *               reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    DIV             reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    IDIV            reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    MOD             reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    +               reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    -               reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    EQstr           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    NEstr           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    LTstr           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    LEstr           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    GTstr           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    GEstr           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    EQsym           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    NEsym           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    LTsym           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    LEsym           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    GTsym           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    GEsym           reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    IS              reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    AND             reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    OR              reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    ,               reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    $end            reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    )               reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)
    ]               reduce using rule 60 (ReverseStep -> ReverseAxis NodeTest .)


state 103

    (96) NameTest -> EQNAME .

    [               reduce using rule 96 (NameTest -> EQNAME .)
    SLASH           reduce using rule 96 (NameTest -> EQNAME .)
    DOUBLESLASH     reduce using rule 96 (NameTest -> EQNAME .)
    INTERSECT       reduce using rule 96 (NameTest -> EQNAME .)
    EXCEPT          reduce using rule 96 (NameTest -> EQNAME .)
    UNION           reduce using rule 96 (NameTest -> EQNAME .)
    |               reduce using rule 96 (NameTest -> EQNAME .)
    *               reduce using rule 96 (NameTest -> EQNAME .)
    DIV             reduce using rule 96 (NameTest -> EQNAME .)
    IDIV            reduce using rule 96 (NameTest -> EQNAME .)
    MOD             reduce using rule 96 (NameTest -> EQNAME .)
    +               reduce using rule 96 (NameTest -> EQNAME .)
    -               reduce using rule 96 (NameTest -> EQNAME .)
    EQstr           reduce using rule 96 (NameTest -> EQNAME .)
    NEstr           reduce using rule 96 (NameTest -> EQNAME .)
    LTstr           reduce using rule 96 (NameTest -> EQNAME .)
    LEstr           reduce using rule 96 (NameTest -> EQNAME .)
    GTstr           reduce using rule 96 (NameTest -> EQNAME .)
    GEstr           reduce using rule 96 (NameTest -> EQNAME .)
    EQsym           reduce using rule 96 (NameTest -> EQNAME .)
    NEsym           reduce using rule 96 (NameTest -> EQNAME .)
    LTsym           reduce using rule 96 (NameTest -> EQNAME .)
    LEsym           reduce using rule 96 (NameTest -> EQNAME .)
    GTsym           reduce using rule 96 (NameTest -> EQNAME .)
    GEsym           reduce using rule 96 (NameTest -> EQNAME .)
    IS              reduce using rule 96 (NameTest -> EQNAME .)
    AND             reduce using rule 96 (NameTest -> EQNAME .)
    OR              reduce using rule 96 (NameTest -> EQNAME .)
    ,               reduce using rule 96 (NameTest -> EQNAME .)
    $end            reduce using rule 96 (NameTest -> EQNAME .)
    )               reduce using rule 96 (NameTest -> EQNAME .)
    ]               reduce using rule 96 (NameTest -> EQNAME .)


state 104

    (90) AttributeTest -> ATTRIBUTE . ( AttributeNameOrWildcard )
    (91) AttributeTest -> ATTRIBUTE . ( )

    (               shift and go to state 120


state 105

    (68) ForwardStep -> ForwardAxis NodeTest .

    [               reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    SLASH           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    DOUBLESLASH     reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    INTERSECT       reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    EXCEPT          reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    UNION           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    |               reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    *               reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    DIV             reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    IDIV            reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    MOD             reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    +               reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    -               reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    EQstr           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    NEstr           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    LTstr           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    LEstr           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    GTstr           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    GEstr           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    EQsym           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    NEsym           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    LTsym           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    LEsym           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    GTsym           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    GEsym           reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    IS              reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    AND             reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    OR              reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    ,               reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    $end            reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    )               reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)
    ]               reduce using rule 68 (ForwardStep -> ForwardAxis NodeTest .)


state 106

    (105) VarRef -> $ VarName .

    [               reduce using rule 105 (VarRef -> $ VarName .)
    SLASH           reduce using rule 105 (VarRef -> $ VarName .)
    DOUBLESLASH     reduce using rule 105 (VarRef -> $ VarName .)
    INTERSECT       reduce using rule 105 (VarRef -> $ VarName .)
    EXCEPT          reduce using rule 105 (VarRef -> $ VarName .)
    UNION           reduce using rule 105 (VarRef -> $ VarName .)
    |               reduce using rule 105 (VarRef -> $ VarName .)
    *               reduce using rule 105 (VarRef -> $ VarName .)
    DIV             reduce using rule 105 (VarRef -> $ VarName .)
    IDIV            reduce using rule 105 (VarRef -> $ VarName .)
    MOD             reduce using rule 105 (VarRef -> $ VarName .)
    +               reduce using rule 105 (VarRef -> $ VarName .)
    -               reduce using rule 105 (VarRef -> $ VarName .)
    EQstr           reduce using rule 105 (VarRef -> $ VarName .)
    NEstr           reduce using rule 105 (VarRef -> $ VarName .)
    LTstr           reduce using rule 105 (VarRef -> $ VarName .)
    LEstr           reduce using rule 105 (VarRef -> $ VarName .)
    GTstr           reduce using rule 105 (VarRef -> $ VarName .)
    GEstr           reduce using rule 105 (VarRef -> $ VarName .)
    EQsym           reduce using rule 105 (VarRef -> $ VarName .)
    NEsym           reduce using rule 105 (VarRef -> $ VarName .)
    LTsym           reduce using rule 105 (VarRef -> $ VarName .)
    LEsym           reduce using rule 105 (VarRef -> $ VarName .)
    GTsym           reduce using rule 105 (VarRef -> $ VarName .)
    GEsym           reduce using rule 105 (VarRef -> $ VarName .)
    IS              reduce using rule 105 (VarRef -> $ VarName .)
    AND             reduce using rule 105 (VarRef -> $ VarName .)
    OR              reduce using rule 105 (VarRef -> $ VarName .)
    ,               reduce using rule 105 (VarRef -> $ VarName .)
    $end            reduce using rule 105 (VarRef -> $ VarName .)
    )               reduce using rule 105 (VarRef -> $ VarName .)
    ]               reduce using rule 105 (VarRef -> $ VarName .)


state 107

    (106) VarName -> EQNAME .

    [               reduce using rule 106 (VarName -> EQNAME .)
    SLASH           reduce using rule 106 (VarName -> EQNAME .)
    DOUBLESLASH     reduce using rule 106 (VarName -> EQNAME .)
    INTERSECT       reduce using rule 106 (VarName -> EQNAME .)
    EXCEPT          reduce using rule 106 (VarName -> EQNAME .)
    UNION           reduce using rule 106 (VarName -> EQNAME .)
    |               reduce using rule 106 (VarName -> EQNAME .)
    *               reduce using rule 106 (VarName -> EQNAME .)
    DIV             reduce using rule 106 (VarName -> EQNAME .)
    IDIV            reduce using rule 106 (VarName -> EQNAME .)
    MOD             reduce using rule 106 (VarName -> EQNAME .)
    +               reduce using rule 106 (VarName -> EQNAME .)
    -               reduce using rule 106 (VarName -> EQNAME .)
    EQstr           reduce using rule 106 (VarName -> EQNAME .)
    NEstr           reduce using rule 106 (VarName -> EQNAME .)
    LTstr           reduce using rule 106 (VarName -> EQNAME .)
    LEstr           reduce using rule 106 (VarName -> EQNAME .)
    GTstr           reduce using rule 106 (VarName -> EQNAME .)
    GEstr           reduce using rule 106 (VarName -> EQNAME .)
    EQsym           reduce using rule 106 (VarName -> EQNAME .)
    NEsym           reduce using rule 106 (VarName -> EQNAME .)
    LTsym           reduce using rule 106 (VarName -> EQNAME .)
    LEsym           reduce using rule 106 (VarName -> EQNAME .)
    GTsym           reduce using rule 106 (VarName -> EQNAME .)
    GEsym           reduce using rule 106 (VarName -> EQNAME .)
    IS              reduce using rule 106 (VarName -> EQNAME .)
    AND             reduce using rule 106 (VarName -> EQNAME .)
    OR              reduce using rule 106 (VarName -> EQNAME .)
    ,               reduce using rule 106 (VarName -> EQNAME .)
    $end            reduce using rule 106 (VarName -> EQNAME .)
    )               reduce using rule 106 (VarName -> EQNAME .)
    ]               reduce using rule 106 (VarName -> EQNAME .)


state 108

    (107) ParenthesizedExpr -> ( ) .

    [               reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    SLASH           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    DOUBLESLASH     reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    INTERSECT       reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    EXCEPT          reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    UNION           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    |               reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    *               reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    DIV             reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    IDIV            reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    MOD             reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    +               reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    -               reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    EQstr           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    NEstr           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    LTstr           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    LEstr           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    GTstr           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    GEstr           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    EQsym           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    NEsym           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    LTsym           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    LEsym           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    GTsym           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    GEsym           reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    IS              reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    AND             reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    OR              reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    ,               reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    $end            reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    )               reduce using rule 107 (ParenthesizedExpr -> ( ) .)
    ]               reduce using rule 107 (ParenthesizedExpr -> ( ) .)


state 109

    (108) ParenthesizedExpr -> ( Expr . )

    )               shift and go to state 148


state 110

    (109) FunctionCall -> EQNAME ArgumentList .

    [               reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    SLASH           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    DOUBLESLASH     reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    INTERSECT       reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    EXCEPT          reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    UNION           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    |               reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    *               reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    DIV             reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    IDIV            reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    MOD             reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    +               reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    -               reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    EQstr           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    NEstr           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    LTstr           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    LEstr           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    GTstr           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    GEstr           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    EQsym           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    NEsym           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    LTsym           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    LEsym           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    GTsym           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    GEsym           reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    IS              reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    AND             reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    OR              reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    ,               reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    $end            reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    )               reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)
    ]               reduce using rule 109 (FunctionCall -> EQNAME ArgumentList .)


state 111

    (110) ArgumentList -> ( . )
    (111) ArgumentList -> ( . ArgumentExpr )
    (112) ArgumentExpr -> . Argument , Argument
    (113) ArgumentExpr -> . Argument
    (114) Argument -> . Expr
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    )               shift and go to state 149
    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    ArgumentExpr                   shift and go to state 150
    Argument                       shift and go to state 151
    Expr                           shift and go to state 152
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 112

    (62) ReverseAxis -> PARENT AXIS .

    EQNAME          reduce using rule 62 (ReverseAxis -> PARENT AXIS .)
    *               reduce using rule 62 (ReverseAxis -> PARENT AXIS .)
    ELEMENT         reduce using rule 62 (ReverseAxis -> PARENT AXIS .)
    ATTRIBUTE       reduce using rule 62 (ReverseAxis -> PARENT AXIS .)
    NODE            reduce using rule 62 (ReverseAxis -> PARENT AXIS .)


state 113

    (63) ReverseAxis -> ANCESTOR AXIS .

    EQNAME          reduce using rule 63 (ReverseAxis -> ANCESTOR AXIS .)
    *               reduce using rule 63 (ReverseAxis -> ANCESTOR AXIS .)
    ELEMENT         reduce using rule 63 (ReverseAxis -> ANCESTOR AXIS .)
    ATTRIBUTE       reduce using rule 63 (ReverseAxis -> ANCESTOR AXIS .)
    NODE            reduce using rule 63 (ReverseAxis -> ANCESTOR AXIS .)


state 114

    (64) ReverseAxis -> PRECEDING_SIBLING AXIS .

    EQNAME          reduce using rule 64 (ReverseAxis -> PRECEDING_SIBLING AXIS .)
    *               reduce using rule 64 (ReverseAxis -> PRECEDING_SIBLING AXIS .)
    ELEMENT         reduce using rule 64 (ReverseAxis -> PRECEDING_SIBLING AXIS .)
    ATTRIBUTE       reduce using rule 64 (ReverseAxis -> PRECEDING_SIBLING AXIS .)
    NODE            reduce using rule 64 (ReverseAxis -> PRECEDING_SIBLING AXIS .)


state 115

    (65) ReverseAxis -> PRECEDING AXIS .

    EQNAME          reduce using rule 65 (ReverseAxis -> PRECEDING AXIS .)
    *               reduce using rule 65 (ReverseAxis -> PRECEDING AXIS .)
    ELEMENT         reduce using rule 65 (ReverseAxis -> PRECEDING AXIS .)
    ATTRIBUTE       reduce using rule 65 (ReverseAxis -> PRECEDING AXIS .)
    NODE            reduce using rule 65 (ReverseAxis -> PRECEDING AXIS .)


state 116

    (66) ReverseAxis -> ANCESTOR_OR_SELF AXIS .

    EQNAME          reduce using rule 66 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)
    *               reduce using rule 66 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)
    ELEMENT         reduce using rule 66 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)
    ATTRIBUTE       reduce using rule 66 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)
    NODE            reduce using rule 66 (ReverseAxis -> ANCESTOR_OR_SELF AXIS .)


state 117

    (70) ForwardAxis -> CHILD AXIS .

    EQNAME          reduce using rule 70 (ForwardAxis -> CHILD AXIS .)
    *               reduce using rule 70 (ForwardAxis -> CHILD AXIS .)
    ELEMENT         reduce using rule 70 (ForwardAxis -> CHILD AXIS .)
    ATTRIBUTE       reduce using rule 70 (ForwardAxis -> CHILD AXIS .)
    NODE            reduce using rule 70 (ForwardAxis -> CHILD AXIS .)


state 118

    (71) ForwardAxis -> DESCENDANT AXIS .

    EQNAME          reduce using rule 71 (ForwardAxis -> DESCENDANT AXIS .)
    *               reduce using rule 71 (ForwardAxis -> DESCENDANT AXIS .)
    ELEMENT         reduce using rule 71 (ForwardAxis -> DESCENDANT AXIS .)
    ATTRIBUTE       reduce using rule 71 (ForwardAxis -> DESCENDANT AXIS .)
    NODE            reduce using rule 71 (ForwardAxis -> DESCENDANT AXIS .)


state 119

    (72) ForwardAxis -> ATTRIBUTE AXIS .

    EQNAME          reduce using rule 72 (ForwardAxis -> ATTRIBUTE AXIS .)
    *               reduce using rule 72 (ForwardAxis -> ATTRIBUTE AXIS .)
    ELEMENT         reduce using rule 72 (ForwardAxis -> ATTRIBUTE AXIS .)
    ATTRIBUTE       reduce using rule 72 (ForwardAxis -> ATTRIBUTE AXIS .)
    NODE            reduce using rule 72 (ForwardAxis -> ATTRIBUTE AXIS .)


state 120

    (90) AttributeTest -> ATTRIBUTE ( . AttributeNameOrWildcard )
    (91) AttributeTest -> ATTRIBUTE ( . )
    (92) AttributeNameOrWildcard -> . AttributeName
    (93) AttributeNameOrWildcard -> . *
    (94) AttributeName -> . EQNAME

    )               shift and go to state 154
    *               shift and go to state 156
    EQNAME          shift and go to state 157

    AttributeNameOrWildcard        shift and go to state 153
    AttributeName                  shift and go to state 155

state 121

    (73) ForwardAxis -> SELF AXIS .

    EQNAME          reduce using rule 73 (ForwardAxis -> SELF AXIS .)
    *               reduce using rule 73 (ForwardAxis -> SELF AXIS .)
    ELEMENT         reduce using rule 73 (ForwardAxis -> SELF AXIS .)
    ATTRIBUTE       reduce using rule 73 (ForwardAxis -> SELF AXIS .)
    NODE            reduce using rule 73 (ForwardAxis -> SELF AXIS .)


state 122

    (74) ForwardAxis -> DESCENDANT_OR_SELF AXIS .

    EQNAME          reduce using rule 74 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)
    *               reduce using rule 74 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)
    ELEMENT         reduce using rule 74 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)
    ATTRIBUTE       reduce using rule 74 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)
    NODE            reduce using rule 74 (ForwardAxis -> DESCENDANT_OR_SELF AXIS .)


state 123

    (75) ForwardAxis -> FOLLOWING_SIBLING AXIS .

    EQNAME          reduce using rule 75 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)
    *               reduce using rule 75 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)
    ELEMENT         reduce using rule 75 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)
    ATTRIBUTE       reduce using rule 75 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)
    NODE            reduce using rule 75 (ForwardAxis -> FOLLOWING_SIBLING AXIS .)


state 124

    (76) ForwardAxis -> FOLLOWING AXIS .

    EQNAME          reduce using rule 76 (ForwardAxis -> FOLLOWING AXIS .)
    *               reduce using rule 76 (ForwardAxis -> FOLLOWING AXIS .)
    ELEMENT         reduce using rule 76 (ForwardAxis -> FOLLOWING AXIS .)
    ATTRIBUTE       reduce using rule 76 (ForwardAxis -> FOLLOWING AXIS .)
    NODE            reduce using rule 76 (ForwardAxis -> FOLLOWING AXIS .)


state 125

    (77) ForwardAxis -> NAMESPACE AXIS .

    EQNAME          reduce using rule 77 (ForwardAxis -> NAMESPACE AXIS .)
    *               reduce using rule 77 (ForwardAxis -> NAMESPACE AXIS .)
    ELEMENT         reduce using rule 77 (ForwardAxis -> NAMESPACE AXIS .)
    ATTRIBUTE       reduce using rule 77 (ForwardAxis -> NAMESPACE AXIS .)
    NODE            reduce using rule 77 (ForwardAxis -> NAMESPACE AXIS .)


state 126

    (78) AbbrevForwardStep -> @ NodeTest .

    [               reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    SLASH           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    DOUBLESLASH     reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    INTERSECT       reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    EXCEPT          reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    UNION           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    |               reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    *               reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    DIV             reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    IDIV            reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    MOD             reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    +               reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    -               reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    EQstr           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    NEstr           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    LTstr           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    LEstr           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    GTstr           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    GEstr           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    EQsym           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    NEsym           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    LTsym           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    LEsym           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    GTsym           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    GEsym           reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    IS              reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    AND             reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    OR              reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    ,               reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    $end            reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    )               reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)
    ]               reduce using rule 78 (AbbrevForwardStep -> @ NodeTest .)


state 127

    (85) ElementTest -> ELEMENT ( . ElementNameOrWildcard )
    (86) ElementTest -> ELEMENT ( . )
    (87) ElementNameOrWildcard -> . ElementName
    (88) ElementNameOrWildcard -> . *
    (89) ElementName -> . EQNAME

    )               shift and go to state 159
    *               shift and go to state 161
    EQNAME          shift and go to state 162

    ElementNameOrWildcard          shift and go to state 158
    ElementName                    shift and go to state 160

state 128

    (95) AnyKindTest -> NODE ( . )

    )               shift and go to state 163


state 129

    (4) ExprList -> ExprList , ExprSingle .

    ,               reduce using rule 4 (ExprList -> ExprList , ExprSingle .)
    $end            reduce using rule 4 (ExprList -> ExprList , ExprSingle .)
    )               reduce using rule 4 (ExprList -> ExprList , ExprSingle .)
    ]               reduce using rule 4 (ExprList -> ExprList , ExprSingle .)


state 130

    (6) OrExpr -> AndExpr OR AndExpr .

    ,               reduce using rule 6 (OrExpr -> AndExpr OR AndExpr .)
    $end            reduce using rule 6 (OrExpr -> AndExpr OR AndExpr .)
    )               reduce using rule 6 (OrExpr -> AndExpr OR AndExpr .)
    ]               reduce using rule 6 (OrExpr -> AndExpr OR AndExpr .)


state 131

    (8) AndExpr -> ComparisonExpr AND ComparisonExpr .

    OR              reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)
    ,               reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)
    $end            reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)
    )               reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)
    ]               reduce using rule 8 (AndExpr -> ComparisonExpr AND ComparisonExpr .)


state 132

    (10) ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .

    AND             reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    OR              reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    ,               reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    $end            reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    )               reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)
    ]               reduce using rule 10 (ComparisonExpr -> AdditiveExpr ValueComp AdditiveExpr .)


state 133

    (11) ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .

    AND             reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    OR              reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    ,               reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    $end            reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    )               reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)
    ]               reduce using rule 11 (ComparisonExpr -> AdditiveExpr NodeComp AdditiveExpr .)


state 134

    (26) AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .

    EQstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    NEstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    LTstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    LEstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    GTstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    GEstr           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    EQsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    NEsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    LTsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    LEsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    GTsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    GEsym           reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    IS              reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    AND             reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    OR              reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    ,               reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    $end            reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    )               reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)
    ]               reduce using rule 26 (AdditiveExpr -> MultiplicativeExpr + MultiplicativeExpr .)


state 135

    (27) AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .

    EQstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    NEstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    LTstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    LEstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    GTstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    GEstr           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    EQsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    NEsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    LTsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    LEsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    GTsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    GEsym           reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    IS              reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    AND             reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    OR              reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    ,               reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    $end            reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    )               reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)
    ]               reduce using rule 27 (AdditiveExpr -> MultiplicativeExpr - MultiplicativeExpr .)


state 136

    (29) MultiplicativeExpr -> UnionExpr * UnionExpr .

    +               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    -               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    EQstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    NEstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    LTstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    LEstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    GTstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    GEstr           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    EQsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    NEsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    LTsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    LEsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    GTsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    GEsym           reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    IS              reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    AND             reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    OR              reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    ,               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    $end            reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    )               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)
    ]               reduce using rule 29 (MultiplicativeExpr -> UnionExpr * UnionExpr .)


state 137

    (30) MultiplicativeExpr -> UnionExpr DIV UnionExpr .

    +               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    -               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    EQstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    NEstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    LTstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    LEstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    GTstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    GEstr           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    EQsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    NEsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    LTsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    LEsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    GTsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    GEsym           reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    IS              reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    AND             reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    OR              reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    ,               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    $end            reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    )               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)
    ]               reduce using rule 30 (MultiplicativeExpr -> UnionExpr DIV UnionExpr .)


state 138

    (31) MultiplicativeExpr -> UnionExpr IDIV UnionExpr .

    +               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    -               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    EQstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    NEstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    LTstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    LEstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    GTstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    GEstr           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    EQsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    NEsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    LTsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    LEsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    GTsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    GEsym           reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    IS              reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    AND             reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    OR              reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    ,               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    $end            reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    )               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)
    ]               reduce using rule 31 (MultiplicativeExpr -> UnionExpr IDIV UnionExpr .)


state 139

    (32) MultiplicativeExpr -> UnionExpr MOD UnionExpr .

    +               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    -               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    EQstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    NEstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    LTstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    LEstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    GTstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    GEstr           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    EQsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    NEsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    LTsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    LEsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    GTsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    GEsym           reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    IS              reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    AND             reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    OR              reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    ,               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    $end            reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    )               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)
    ]               reduce using rule 32 (MultiplicativeExpr -> UnionExpr MOD UnionExpr .)


state 140

    (34) UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .

    *               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    DIV             reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    IDIV            reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    MOD             reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    +               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    -               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    EQstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    NEstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    LTstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    LEstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    GTstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    GEstr           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    EQsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    NEsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    LTsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    LEsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    GTsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    GEsym           reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    IS              reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    AND             reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    OR              reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    ,               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    $end            reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    )               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)
    ]               reduce using rule 34 (UnionExpr -> IntersectExceptExpr UNION IntersectExceptExpr .)


state 141

    (35) UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .

    *               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    DIV             reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    IDIV            reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    MOD             reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    +               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    -               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    EQstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    NEstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    LTstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    LEstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    GTstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    GEstr           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    EQsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    NEsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    LTsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    LEsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    GTsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    GEsym           reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    IS              reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    AND             reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    OR              reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    ,               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    $end            reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    )               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)
    ]               reduce using rule 35 (UnionExpr -> IntersectExceptExpr | IntersectExceptExpr .)


state 142

    (37) IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .

    UNION           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    |               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    *               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    DIV             reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    IDIV            reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    MOD             reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    +               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    -               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    EQstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    NEstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    LTstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    LEstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    GTstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    GEstr           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    EQsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    NEsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    LTsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    LEsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    GTsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    GEsym           reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    IS              reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    AND             reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    OR              reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    ,               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    $end            reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    )               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)
    ]               reduce using rule 37 (IntersectExceptExpr -> UnaryExpr INTERSECT UnaryExpr .)


state 143

    (38) IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .

    UNION           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    |               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    *               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    DIV             reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    IDIV            reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    MOD             reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    +               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    -               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    EQstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    NEstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    LTstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    LEstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    GTstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    GEstr           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    EQsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    NEsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    LTsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    LEsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    GTsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    GEsym           reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    IS              reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    AND             reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    OR              reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    ,               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    $end            reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    )               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)
    ]               reduce using rule 38 (IntersectExceptExpr -> UnaryExpr EXCEPT UnaryExpr .)


state 144

    (47) RelativePathExpr -> StepExpr SLASH StepExpr .

    INTERSECT       reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    EXCEPT          reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    UNION           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    |               reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    *               reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    DIV             reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    IDIV            reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    MOD             reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    +               reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    -               reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    EQstr           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    NEstr           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    LTstr           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    LEstr           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    GTstr           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    GEstr           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    EQsym           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    NEsym           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    LTsym           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    LEsym           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    GTsym           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    GEsym           reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    IS              reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    AND             reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    OR              reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    ,               reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    $end            reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    )               reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)
    ]               reduce using rule 47 (RelativePathExpr -> StepExpr SLASH StepExpr .)


state 145

    (48) RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .

    INTERSECT       reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    EXCEPT          reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    UNION           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    |               reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    *               reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    DIV             reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    IDIV            reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    MOD             reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    +               reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    -               reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    EQstr           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    NEstr           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    LTstr           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    LEstr           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    GTstr           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    GEstr           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    EQsym           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    NEsym           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    LTsym           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    LEsym           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    GTsym           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    GEsym           reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    IS              reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    AND             reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    OR              reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    ,               reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    $end            reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    )               reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)
    ]               reduce using rule 48 (RelativePathExpr -> StepExpr DOUBLESLASH StepExpr .)


state 146

    (59) Predicate -> [ Expr . ]

    ]               shift and go to state 164


state 147

    (56) PredicateList -> Predicate PredicateList .

    SLASH           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    DOUBLESLASH     reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    INTERSECT       reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    EXCEPT          reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    UNION           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    |               reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    *               reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    DIV             reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    IDIV            reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    MOD             reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    +               reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    -               reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    EQstr           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    NEstr           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    LTstr           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    LEstr           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    GTstr           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    GEstr           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    EQsym           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    NEsym           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    LTsym           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    LEsym           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    GTsym           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    GEsym           reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    IS              reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    AND             reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    OR              reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    ,               reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    $end            reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    )               reduce using rule 56 (PredicateList -> Predicate PredicateList .)
    ]               reduce using rule 56 (PredicateList -> Predicate PredicateList .)


state 148

    (108) ParenthesizedExpr -> ( Expr ) .

    [               reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    SLASH           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    DOUBLESLASH     reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    INTERSECT       reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    EXCEPT          reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    UNION           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    |               reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    *               reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    DIV             reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    IDIV            reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    MOD             reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    +               reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    -               reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    EQstr           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    NEstr           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    LTstr           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    LEstr           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    GTstr           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    GEstr           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    EQsym           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    NEsym           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    LTsym           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    LEsym           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    GTsym           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    GEsym           reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    IS              reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    AND             reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    OR              reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    ,               reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    $end            reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    )               reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)
    ]               reduce using rule 108 (ParenthesizedExpr -> ( Expr ) .)


state 149

    (110) ArgumentList -> ( ) .

    [               reduce using rule 110 (ArgumentList -> ( ) .)
    SLASH           reduce using rule 110 (ArgumentList -> ( ) .)
    DOUBLESLASH     reduce using rule 110 (ArgumentList -> ( ) .)
    INTERSECT       reduce using rule 110 (ArgumentList -> ( ) .)
    EXCEPT          reduce using rule 110 (ArgumentList -> ( ) .)
    UNION           reduce using rule 110 (ArgumentList -> ( ) .)
    |               reduce using rule 110 (ArgumentList -> ( ) .)
    *               reduce using rule 110 (ArgumentList -> ( ) .)
    DIV             reduce using rule 110 (ArgumentList -> ( ) .)
    IDIV            reduce using rule 110 (ArgumentList -> ( ) .)
    MOD             reduce using rule 110 (ArgumentList -> ( ) .)
    +               reduce using rule 110 (ArgumentList -> ( ) .)
    -               reduce using rule 110 (ArgumentList -> ( ) .)
    EQstr           reduce using rule 110 (ArgumentList -> ( ) .)
    NEstr           reduce using rule 110 (ArgumentList -> ( ) .)
    LTstr           reduce using rule 110 (ArgumentList -> ( ) .)
    LEstr           reduce using rule 110 (ArgumentList -> ( ) .)
    GTstr           reduce using rule 110 (ArgumentList -> ( ) .)
    GEstr           reduce using rule 110 (ArgumentList -> ( ) .)
    EQsym           reduce using rule 110 (ArgumentList -> ( ) .)
    NEsym           reduce using rule 110 (ArgumentList -> ( ) .)
    LTsym           reduce using rule 110 (ArgumentList -> ( ) .)
    LEsym           reduce using rule 110 (ArgumentList -> ( ) .)
    GTsym           reduce using rule 110 (ArgumentList -> ( ) .)
    GEsym           reduce using rule 110 (ArgumentList -> ( ) .)
    IS              reduce using rule 110 (ArgumentList -> ( ) .)
    AND             reduce using rule 110 (ArgumentList -> ( ) .)
    OR              reduce using rule 110 (ArgumentList -> ( ) .)
    ,               reduce using rule 110 (ArgumentList -> ( ) .)
    $end            reduce using rule 110 (ArgumentList -> ( ) .)
    )               reduce using rule 110 (ArgumentList -> ( ) .)
    ]               reduce using rule 110 (ArgumentList -> ( ) .)


state 150

    (111) ArgumentList -> ( ArgumentExpr . )

    )               shift and go to state 165


state 151

    (112) ArgumentExpr -> Argument . , Argument
    (113) ArgumentExpr -> Argument .

    ,               shift and go to state 166
    )               reduce using rule 113 (ArgumentExpr -> Argument .)


state 152

    (114) Argument -> Expr .

    ,               reduce using rule 114 (Argument -> Expr .)
    )               reduce using rule 114 (Argument -> Expr .)


state 153

    (90) AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard . )

    )               shift and go to state 167


state 154

    (91) AttributeTest -> ATTRIBUTE ( ) .

    [               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    SLASH           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    DOUBLESLASH     reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    INTERSECT       reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    EXCEPT          reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    UNION           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    |               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    *               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    DIV             reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    IDIV            reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    MOD             reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    +               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    -               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    EQstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    NEstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    LTstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    LEstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    GTstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    GEstr           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    EQsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    NEsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    LTsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    LEsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    GTsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    GEsym           reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    IS              reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    AND             reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    OR              reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    ,               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    $end            reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    )               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)
    ]               reduce using rule 91 (AttributeTest -> ATTRIBUTE ( ) .)


state 155

    (92) AttributeNameOrWildcard -> AttributeName .

    )               reduce using rule 92 (AttributeNameOrWildcard -> AttributeName .)


state 156

    (93) AttributeNameOrWildcard -> * .

    )               reduce using rule 93 (AttributeNameOrWildcard -> * .)


state 157

    (94) AttributeName -> EQNAME .

    )               reduce using rule 94 (AttributeName -> EQNAME .)


state 158

    (85) ElementTest -> ELEMENT ( ElementNameOrWildcard . )

    )               shift and go to state 168


state 159

    (86) ElementTest -> ELEMENT ( ) .

    [               reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    SLASH           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    DOUBLESLASH     reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    INTERSECT       reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    EXCEPT          reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    UNION           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    |               reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    *               reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    DIV             reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    IDIV            reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    MOD             reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    +               reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    -               reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    EQstr           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    NEstr           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    LTstr           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    LEstr           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    GTstr           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    GEstr           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    EQsym           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    NEsym           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    LTsym           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    LEsym           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    GTsym           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    GEsym           reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    IS              reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    AND             reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    OR              reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    ,               reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    $end            reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    )               reduce using rule 86 (ElementTest -> ELEMENT ( ) .)
    ]               reduce using rule 86 (ElementTest -> ELEMENT ( ) .)


state 160

    (87) ElementNameOrWildcard -> ElementName .

    )               reduce using rule 87 (ElementNameOrWildcard -> ElementName .)


state 161

    (88) ElementNameOrWildcard -> * .

    )               reduce using rule 88 (ElementNameOrWildcard -> * .)


state 162

    (89) ElementName -> EQNAME .

    )               reduce using rule 89 (ElementName -> EQNAME .)


state 163

    (95) AnyKindTest -> NODE ( ) .

    [               reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    SLASH           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    DOUBLESLASH     reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    INTERSECT       reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    EXCEPT          reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    UNION           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    |               reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    *               reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    DIV             reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    IDIV            reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    MOD             reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    +               reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    -               reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    EQstr           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    NEstr           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    LTstr           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    LEstr           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    GTstr           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    GEstr           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    EQsym           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    NEsym           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    LTsym           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    LEsym           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    GTsym           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    GEsym           reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    IS              reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    AND             reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    OR              reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    ,               reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    $end            reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    )               reduce using rule 95 (AnyKindTest -> NODE ( ) .)
    ]               reduce using rule 95 (AnyKindTest -> NODE ( ) .)


state 164

    (59) Predicate -> [ Expr ] .

    SLASH           reduce using rule 59 (Predicate -> [ Expr ] .)
    DOUBLESLASH     reduce using rule 59 (Predicate -> [ Expr ] .)
    INTERSECT       reduce using rule 59 (Predicate -> [ Expr ] .)
    EXCEPT          reduce using rule 59 (Predicate -> [ Expr ] .)
    UNION           reduce using rule 59 (Predicate -> [ Expr ] .)
    |               reduce using rule 59 (Predicate -> [ Expr ] .)
    *               reduce using rule 59 (Predicate -> [ Expr ] .)
    DIV             reduce using rule 59 (Predicate -> [ Expr ] .)
    IDIV            reduce using rule 59 (Predicate -> [ Expr ] .)
    MOD             reduce using rule 59 (Predicate -> [ Expr ] .)
    +               reduce using rule 59 (Predicate -> [ Expr ] .)
    -               reduce using rule 59 (Predicate -> [ Expr ] .)
    EQstr           reduce using rule 59 (Predicate -> [ Expr ] .)
    NEstr           reduce using rule 59 (Predicate -> [ Expr ] .)
    LTstr           reduce using rule 59 (Predicate -> [ Expr ] .)
    LEstr           reduce using rule 59 (Predicate -> [ Expr ] .)
    GTstr           reduce using rule 59 (Predicate -> [ Expr ] .)
    GEstr           reduce using rule 59 (Predicate -> [ Expr ] .)
    EQsym           reduce using rule 59 (Predicate -> [ Expr ] .)
    NEsym           reduce using rule 59 (Predicate -> [ Expr ] .)
    LTsym           reduce using rule 59 (Predicate -> [ Expr ] .)
    LEsym           reduce using rule 59 (Predicate -> [ Expr ] .)
    GTsym           reduce using rule 59 (Predicate -> [ Expr ] .)
    GEsym           reduce using rule 59 (Predicate -> [ Expr ] .)
    IS              reduce using rule 59 (Predicate -> [ Expr ] .)
    AND             reduce using rule 59 (Predicate -> [ Expr ] .)
    OR              reduce using rule 59 (Predicate -> [ Expr ] .)
    ,               reduce using rule 59 (Predicate -> [ Expr ] .)
    $end            reduce using rule 59 (Predicate -> [ Expr ] .)
    )               reduce using rule 59 (Predicate -> [ Expr ] .)
    ]               reduce using rule 59 (Predicate -> [ Expr ] .)
    [               reduce using rule 59 (Predicate -> [ Expr ] .)


state 165

    (111) ArgumentList -> ( ArgumentExpr ) .

    [               reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    SLASH           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    DOUBLESLASH     reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    INTERSECT       reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    EXCEPT          reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    UNION           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    |               reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    *               reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    DIV             reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    IDIV            reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    MOD             reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    +               reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    -               reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    EQstr           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    NEstr           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    LTstr           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    LEstr           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    GTstr           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    GEstr           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    EQsym           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    NEsym           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    LTsym           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    LEsym           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    GTsym           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    GEsym           reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    IS              reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    AND             reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    OR              reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    ,               reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    $end            reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    )               reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)
    ]               reduce using rule 111 (ArgumentList -> ( ArgumentExpr ) .)


state 166

    (112) ArgumentExpr -> Argument , . Argument
    (114) Argument -> . Expr
    (2) Expr -> . ExprList
    (3) ExprList -> . ExprSingle
    (4) ExprList -> . ExprList , ExprSingle
    (5) ExprSingle -> . OrExpr
    (6) OrExpr -> . AndExpr OR AndExpr
    (7) OrExpr -> . AndExpr
    (8) AndExpr -> . ComparisonExpr AND ComparisonExpr
    (9) AndExpr -> . ComparisonExpr
    (10) ComparisonExpr -> . AdditiveExpr ValueComp AdditiveExpr
    (11) ComparisonExpr -> . AdditiveExpr NodeComp AdditiveExpr
    (12) ComparisonExpr -> . AdditiveExpr
    (26) AdditiveExpr -> . MultiplicativeExpr + MultiplicativeExpr
    (27) AdditiveExpr -> . MultiplicativeExpr - MultiplicativeExpr
    (28) AdditiveExpr -> . MultiplicativeExpr
    (29) MultiplicativeExpr -> . UnionExpr * UnionExpr
    (30) MultiplicativeExpr -> . UnionExpr DIV UnionExpr
    (31) MultiplicativeExpr -> . UnionExpr IDIV UnionExpr
    (32) MultiplicativeExpr -> . UnionExpr MOD UnionExpr
    (33) MultiplicativeExpr -> . UnionExpr
    (34) UnionExpr -> . IntersectExceptExpr UNION IntersectExceptExpr
    (35) UnionExpr -> . IntersectExceptExpr | IntersectExceptExpr
    (36) UnionExpr -> . IntersectExceptExpr
    (37) IntersectExceptExpr -> . UnaryExpr INTERSECT UnaryExpr
    (38) IntersectExceptExpr -> . UnaryExpr EXCEPT UnaryExpr
    (39) IntersectExceptExpr -> . UnaryExpr
    (40) UnaryExpr -> . + ValueExpr
    (41) UnaryExpr -> . - ValueExpr
    (42) UnaryExpr -> . ValueExpr
    (43) ValueExpr -> . SLASH RelativePathExpr
    (44) ValueExpr -> . SLASH
    (45) ValueExpr -> . DOUBLESLASH RelativePathExpr
    (46) ValueExpr -> . RelativePathExpr
    (47) RelativePathExpr -> . StepExpr SLASH StepExpr
    (48) RelativePathExpr -> . StepExpr DOUBLESLASH StepExpr
    (49) RelativePathExpr -> . StepExpr
    (50) StepExpr -> . PostfixExpr
    (51) StepExpr -> . AxisStep
    (52) PostfixExpr -> . PrimaryExpr Predicate
    (53) PostfixExpr -> . PrimaryExpr
    (54) AxisStep -> . ReverseStep PredicateList
    (55) AxisStep -> . ForwardStep PredicateList
    (98) PrimaryExpr -> . Literal
    (99) PrimaryExpr -> . VarRef
    (100) PrimaryExpr -> . ParenthesizedExpr
    (101) PrimaryExpr -> . CONTEXT
    (102) PrimaryExpr -> . FunctionCall
    (60) ReverseStep -> . ReverseAxis NodeTest
    (61) ReverseStep -> . AbbrevReverseStep
    (68) ForwardStep -> . ForwardAxis NodeTest
    (69) ForwardStep -> . AbbrevForwardStep
    (103) Literal -> . STRING
    (104) Literal -> . NUMBER
    (105) VarRef -> . $ VarName
    (107) ParenthesizedExpr -> . ( )
    (108) ParenthesizedExpr -> . ( Expr )
    (109) FunctionCall -> . EQNAME ArgumentList
    (62) ReverseAxis -> . PARENT AXIS
    (63) ReverseAxis -> . ANCESTOR AXIS
    (64) ReverseAxis -> . PRECEDING_SIBLING AXIS
    (65) ReverseAxis -> . PRECEDING AXIS
    (66) ReverseAxis -> . ANCESTOR_OR_SELF AXIS
    (67) AbbrevReverseStep -> . DOUBLEDOT
    (70) ForwardAxis -> . CHILD AXIS
    (71) ForwardAxis -> . DESCENDANT AXIS
    (72) ForwardAxis -> . ATTRIBUTE AXIS
    (73) ForwardAxis -> . SELF AXIS
    (74) ForwardAxis -> . DESCENDANT_OR_SELF AXIS
    (75) ForwardAxis -> . FOLLOWING_SIBLING AXIS
    (76) ForwardAxis -> . FOLLOWING AXIS
    (77) ForwardAxis -> . NAMESPACE AXIS
    (78) AbbrevForwardStep -> . @ NodeTest
    (79) AbbrevForwardStep -> . NodeTest
    (80) NodeTest -> . KindTest
    (81) NodeTest -> . NameTest
    (82) KindTest -> . ElementTest
    (83) KindTest -> . AttributeTest
    (84) KindTest -> . AnyKindTest
    (96) NameTest -> . EQNAME
    (97) NameTest -> . *
    (85) ElementTest -> . ELEMENT ( ElementNameOrWildcard )
    (86) ElementTest -> . ELEMENT ( )
    (90) AttributeTest -> . ATTRIBUTE ( AttributeNameOrWildcard )
    (91) AttributeTest -> . ATTRIBUTE ( )
    (95) AnyKindTest -> . NODE ( )

    +               shift and go to state 10
    -               shift and go to state 11
    SLASH           shift and go to state 17
    DOUBLESLASH     shift and go to state 19
    CONTEXT         shift and go to state 29
    STRING          shift and go to state 36
    NUMBER          shift and go to state 37
    $               shift and go to state 38
    (               shift and go to state 39
    EQNAME          shift and go to state 40
    PARENT          shift and go to state 41
    ANCESTOR        shift and go to state 42
    PRECEDING_SIBLING shift and go to state 43
    PRECEDING       shift and go to state 44
    ANCESTOR_OR_SELF shift and go to state 45
    DOUBLEDOT       shift and go to state 46
    CHILD           shift and go to state 47
    DESCENDANT      shift and go to state 48
    ATTRIBUTE       shift and go to state 49
    SELF            shift and go to state 50
    DESCENDANT_OR_SELF shift and go to state 51
    FOLLOWING_SIBLING shift and go to state 52
    FOLLOWING       shift and go to state 53
    NAMESPACE       shift and go to state 54
    @               shift and go to state 55
    *               shift and go to state 13
    ELEMENT         shift and go to state 61
    NODE            shift and go to state 62

    Argument                       shift and go to state 169
    Expr                           shift and go to state 152
    ExprList                       shift and go to state 3
    ExprSingle                     shift and go to state 4
    OrExpr                         shift and go to state 5
    AndExpr                        shift and go to state 6
    ComparisonExpr                 shift and go to state 7
    AdditiveExpr                   shift and go to state 8
    MultiplicativeExpr             shift and go to state 9
    UnionExpr                      shift and go to state 12
    IntersectExceptExpr            shift and go to state 14
    UnaryExpr                      shift and go to state 15
    ValueExpr                      shift and go to state 16
    RelativePathExpr               shift and go to state 18
    StepExpr                       shift and go to state 20
    PostfixExpr                    shift and go to state 21
    AxisStep                       shift and go to state 22
    PrimaryExpr                    shift and go to state 23
    ReverseStep                    shift and go to state 24
    ForwardStep                    shift and go to state 25
    Literal                        shift and go to state 26
    VarRef                         shift and go to state 27
    ParenthesizedExpr              shift and go to state 28
    FunctionCall                   shift and go to state 30
    ReverseAxis                    shift and go to state 31
    NodeTest                       shift and go to state 32
    AbbrevReverseStep              shift and go to state 33
    ForwardAxis                    shift and go to state 34
    AbbrevForwardStep              shift and go to state 35
    KindTest                       shift and go to state 56
    NameTest                       shift and go to state 57
    ElementTest                    shift and go to state 58
    AttributeTest                  shift and go to state 59
    AnyKindTest                    shift and go to state 60

state 167

    (90) AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .

    [               reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    SLASH           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    DOUBLESLASH     reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    INTERSECT       reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    EXCEPT          reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    UNION           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    |               reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    *               reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    DIV             reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    IDIV            reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    MOD             reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    +               reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    -               reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    EQstr           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    NEstr           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    LTstr           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    LEstr           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    GTstr           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    GEstr           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    EQsym           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    NEsym           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    LTsym           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    LEsym           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    GTsym           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    GEsym           reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    IS              reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    AND             reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    OR              reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    ,               reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    $end            reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    )               reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)
    ]               reduce using rule 90 (AttributeTest -> ATTRIBUTE ( AttributeNameOrWildcard ) .)


state 168

    (85) ElementTest -> ELEMENT ( ElementNameOrWildcard ) .

    [               reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    SLASH           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    DOUBLESLASH     reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    INTERSECT       reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    EXCEPT          reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    UNION           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    |               reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    *               reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    DIV             reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    IDIV            reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    MOD             reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    +               reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    -               reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    EQstr           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    NEstr           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    LTstr           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    LEstr           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    GTstr           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    GEstr           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    EQsym           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    NEsym           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    LTsym           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    LEsym           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    GTsym           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    GEsym           reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    IS              reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    AND             reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    OR              reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    ,               reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    $end            reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    )               reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)
    ]               reduce using rule 85 (ElementTest -> ELEMENT ( ElementNameOrWildcard ) .)


state 169

    (112) ArgumentExpr -> Argument , Argument .

    )               reduce using rule 112 (ArgumentExpr -> Argument , Argument .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for , in state 3 resolved as shift
WARNING: reduce/reduce conflict in state 100 resolved using rule (PredicateList -> Predicate)
WARNING: rejected rule (PredicateList -> <empty>) in state 100
